   1                     ; C Compiler for 68HCS12 [COSMIC Software]
   2                     ; Parser V4.11.9 - 08 Feb 2017
   3                     ; Generator V4.8.12 - 22 Feb 2017
   4                     ; Optimizer V4.7.11 - 22 Feb 2017
4200                     ; 70 _NEAR void  *OSQAccept (OS_EVENT  *pevent,
4200                     ; 71                        INT8U     *perr)
4200                     ; 72 {
4201                     	switch	.text
4202 f9eca               _OSQAccept:
4204 f9eca 3b            	pshd	
4205 f9ecb 1b9b          	leas	-5,s
4206       00000005      OFST:	set	5
4209                     ; 76     OS_CPU_SR  cpu_sr = 0u;
4211                     ; 89     if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
4213 f9ecd 046404        	tbne	d,L5772
4214                     ; 90         *perr = OS_ERR_PEVENT_NULL;
4216 f9ed0 c604          	ldab	#4
4217                     ; 91         return ((void *)0);
4220 f9ed2 200a          	bra	LC001
4221 f9ed4               L5772:
4222                     ; 94     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
4224 f9ed4 e6f30005      	ldab	[OFST+0,s]
4225 f9ed8 c102          	cmpb	#2
4226 f9eda 270b          	beq	L7772
4227                     ; 95         *perr = OS_ERR_EVENT_TYPE;
4229 f9edc c601          	ldab	#1
4230                     ; 96         return ((void *)0);
4232 f9ede               LC001:
4233 f9ede 6bf30009      	stab	[OFST+4,s]
4234 f9ee2 87            	clra	
4235 f9ee3 c7            	clrb	
4237 f9ee4               L6:
4239 f9ee4 1b87          	leas	7,s
4240 f9ee6 3d            	rts	
4241 f9ee7               L7772:
4242                     ; 98     OS_ENTER_CRITICAL();
4244 f9ee7 164b4f        	jsr	_OS_CPU_SR_Save
4246 f9eea 6b84          	stab	OFST-1,s
4247                     ; 99     pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
4249 f9eec ed85          	ldy	OFST+0,s
4250 f9eee ed41          	ldy	1,y
4251 f9ef0 6d80          	sty	OFST-5,s
4252                     ; 100     if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
4254 f9ef2 ec4c          	ldd	12,y
4255 f9ef4 271d          	beq	L1003
4256                     ; 101         pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
4258 f9ef6 ee48          	ldx	8,y
4259 f9ef8 18023182      	movw	2,x+,OFST-3,s
4260 f9efc 6e48          	stx	8,y
4261                     ; 102         pq->OSQEntries--;                        /* Update the number of entries in the queue          */
4263 f9efe ee4c          	ldx	12,y
4264 f9f00 09            	dex	
4265 f9f01 6e4c          	stx	12,y
4266                     ; 103         if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
4268 f9f03 ec48          	ldd	8,y
4269 f9f05 ac44          	cpd	4,y
4270 f9f07 2604          	bne	L3003
4271                     ; 104             pq->OSQOut = pq->OSQStart;
4273 f9f09 18024248      	movw	2,y,8,y
4274 f9f0d               L3003:
4275                     ; 106         *perr = OS_ERR_NONE;
4277 f9f0d 69f30009      	clr	[OFST+4,s]
4279 f9f11 2009          	bra	L5003
4280 f9f13               L1003:
4281                     ; 108         *perr = OS_ERR_Q_EMPTY;
4283 f9f13 c61f          	ldab	#31
4284 f9f15 6bf30009      	stab	[OFST+4,s]
4285                     ; 109         pmsg  = (void *)0;                       /* Queue is empty                                     */
4287 f9f19 c7            	clrb	
4288 f9f1a 6c82          	std	OFST-3,s
4289 f9f1c               L5003:
4290                     ; 111     OS_EXIT_CRITICAL();
4292 f9f1c e684          	ldab	OFST-1,s
4293 f9f1e 87            	clra	
4294 f9f1f 164b54        	jsr	_OS_CPU_SR_Restore
4296                     ; 112     return (pmsg);                               /* Return message received (or NULL)                  */
4298 f9f22 ec82          	ldd	OFST-3,s
4300 f9f24 20be          	bra	L6
4382                     ; 136 _NEAR OS_EVENT  *OSQCreate (void    **start,
4382                     ; 137                            INT16U    size)
4382                     ; 138 {
4383                     	switch	.text
4384 f9f26               _OSQCreate:
4386 f9f26 3b            	pshd	
4387 f9f27 1b9b          	leas	-5,s
4388       00000005      OFST:	set	5
4391                     ; 142     OS_CPU_SR  cpu_sr = 0u;
4393                     ; 154     if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
4395 f9f29 f6163c        	ldab	_OSIntNesting
4396 f9f2c 2705          	beq	L7403
4397                     ; 155         return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
4399 f9f2e 87            	clra	
4400 f9f2f c7            	clrb	
4403 f9f30 1b87          	leas	7,s
4404 f9f32 3d            	rts	
4405 f9f33               L7403:
4406                     ; 157     OS_ENTER_CRITICAL();
4408 f9f33 164b4f        	jsr	_OS_CPU_SR_Save
4410 f9f36 6b84          	stab	OFST-1,s
4411                     ; 158     pevent = OSEventFreeList;                    /* Get next free event control block                  */
4413 f9f38 fd1702        	ldy	_OSEventFreeList
4414 f9f3b 6d80          	sty	OFST-5,s
4415                     ; 159     if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
4417 f9f3d 2705          	beq	L1503
4418                     ; 160         OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
4420 f9f3f 1805411702    	movw	1,y,_OSEventFreeList
4421 f9f44               L1503:
4422                     ; 162     OS_EXIT_CRITICAL();
4424 f9f44 87            	clra	
4425 f9f45 164b54        	jsr	_OS_CPU_SR_Restore
4427                     ; 163     if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
4429 f9f48 ec80          	ldd	OFST-5,s
4430 f9f4a 275b          	beq	L3503
4431                     ; 164         OS_ENTER_CRITICAL();
4433 f9f4c 164b4f        	jsr	_OS_CPU_SR_Save
4435 f9f4f 6b84          	stab	OFST-1,s
4436                     ; 165         pq = OSQFreeList;                        /* Get a free queue control block                     */
4438 f9f51 fd13e9        	ldy	_OSQFreeList
4439 f9f54 6d82          	sty	OFST-3,s
4440                     ; 166         if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
4442 f9f56 273f          	beq	L5503
4443                     ; 167             OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
4445 f9f58 18054013e9    	movw	0,y,_OSQFreeList
4446                     ; 168             OS_EXIT_CRITICAL();
4448 f9f5d 87            	clra	
4449 f9f5e 164b54        	jsr	_OS_CPU_SR_Restore
4451                     ; 169             pq->OSQStart           = start;               /*      Initialize the queue                 */
4453 f9f61 ed82          	ldy	OFST-3,s
4454 f9f63 18028542      	movw	OFST+0,s,2,y
4455                     ; 170             pq->OSQEnd             = &start[size];
4457 f9f67 ec89          	ldd	OFST+4,s
4458 f9f69 59            	lsld	
4459 f9f6a e385          	addd	OFST+0,s
4460 f9f6c 6c44          	std	4,y
4461                     ; 171             pq->OSQIn              = start;
4463 f9f6e ec85          	ldd	OFST+0,s
4464 f9f70 6c46          	std	6,y
4465                     ; 172             pq->OSQOut             = start;
4467 f9f72 6c48          	std	8,y
4468                     ; 173             pq->OSQSize            = size;
4470 f9f74 1802894a      	movw	OFST+4,s,10,y
4471                     ; 174             pq->OSQEntries         = 0u;
4473 f9f78 87            	clra	
4474 f9f79 c7            	clrb	
4475 f9f7a 6c4c          	std	12,y
4476                     ; 175             pevent->OSEventType    = OS_EVENT_TYPE_Q;
4478 f9f7c c602          	ldab	#2
4479 f9f7e ed80          	ldy	OFST-5,s
4480 f9f80 6b40          	stab	0,y
4481                     ; 176             pevent->OSEventCnt     = 0u;
4483 f9f82 c7            	clrb	
4484 f9f83 6c43          	std	3,y
4485                     ; 177             pevent->OSEventPtr     = pq;
4487 f9f85 18028241      	movw	OFST-3,s,1,y
4488                     ; 179             pevent->OSEventName    = (INT8U *)(void *)"?";
4490 f9f89 cc773f        	ldd	#L7503
4491 f9f8c 6c4e          	std	14,y
4492                     ; 181             OS_EventWaitListInit(pevent);                 /*      Initialize the wait list             */
4494 f9f8e b764          	tfr	y,d
4495 f9f90 1647a9        	jsr	_OS_EventWaitListInit
4497                     ; 183             OS_TRACE_Q_CREATE(pevent, pevent->OSEventName);
4499 f9f93 ec80          	ldd	OFST-5,s
4500 f9f95 2010          	bra	L3503
4501 f9f97               L5503:
4502                     ; 185             pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
4504 f9f97 ed80          	ldy	OFST-5,s
4505 f9f99 1801411702    	movw	_OSEventFreeList,1,y
4506                     ; 186             OSEventFreeList    = pevent;
4508 f9f9e 7d1702        	sty	_OSEventFreeList
4509                     ; 187             OS_EXIT_CRITICAL();
4511 f9fa1 87            	clra	
4512 f9fa2 164b54        	jsr	_OS_CPU_SR_Restore
4514                     ; 188             pevent = (OS_EVENT *)0;
4516 f9fa5 87            	clra	
4517 f9fa6 c7            	clrb	
4518 f9fa7               L3503:
4519                     ; 191     return (pevent);
4523 f9fa7 1b87          	leas	7,s
4524 f9fa9 3d            	rts	
4625                     ; 241 _NEAR OS_EVENT  *OSQDel (OS_EVENT  *pevent,
4625                     ; 242                         INT8U      opt,
4625                     ; 243                         INT8U     *perr)
4625                     ; 244 {
4626                     	switch	.text
4627 f9faa               _OSQDel:
4629 f9faa 3b            	pshd	
4630 f9fab 1b9c          	leas	-4,s
4631       00000004      OFST:	set	4
4634                     ; 249     OS_CPU_SR  cpu_sr = 0u;
4636                     ; 269     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
4638 f9fad 046404        	tbne	d,L1413
4639                     ; 270         *perr = OS_ERR_PEVENT_NULL;
4641 f9fb0 c604          	ldab	#4
4642                     ; 271         return (pevent);
4645 f9fb2 200a          	bra	L41
4646 f9fb4               L1413:
4647                     ; 277     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
4650 f9fb4 e6f30004      	ldab	[OFST+0,s]
4651 f9fb8 c102          	cmpb	#2
4652 f9fba 270b          	beq	L3413
4653                     ; 278         *perr = OS_ERR_EVENT_TYPE;
4655 f9fbc c601          	ldab	#1
4656                     ; 280         return (pevent);
4660 f9fbe               L41:
4661 f9fbe 6bf3000a      	stab	[OFST+6,s]
4662 f9fc2 ec84          	ldd	OFST+0,s
4664 f9fc4 1b86          	leas	6,s
4665 f9fc6 3d            	rts	
4666 f9fc7               L3413:
4667                     ; 282     if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
4669 f9fc7 f6163c        	ldab	_OSIntNesting
4670 f9fca 2704          	beq	L5413
4671                     ; 283         *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
4673 f9fcc c60f          	ldab	#15
4674                     ; 285         return (pevent);
4678 f9fce 20ee          	bra	L41
4679 f9fd0               L5413:
4680                     ; 287     OS_ENTER_CRITICAL();
4682 f9fd0 164b4f        	jsr	_OS_CPU_SR_Save
4684 f9fd3 6b82          	stab	OFST-2,s
4685                     ; 288     if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on queue        */
4687 f9fd5 ed84          	ldy	OFST+0,s
4688 f9fd7 e645          	ldab	5,y
4689 f9fd9 2706          	beq	L7413
4690                     ; 289         tasks_waiting = OS_TRUE;                           /* Yes                                      */
4692 f9fdb c601          	ldab	#1
4693 f9fdd 6b83          	stab	OFST-1,s
4695 f9fdf 2002          	bra	L1513
4696 f9fe1               L7413:
4697                     ; 291         tasks_waiting = OS_FALSE;                          /* No                                       */
4699 f9fe1 6983          	clr	OFST-1,s
4700 f9fe3               L1513:
4701                     ; 293     switch (opt) {
4703 f9fe3 e689          	ldab	OFST+5,s
4705 f9fe5 270d          	beq	L3603
4706 f9fe7 040160        	dbeq	b,L5613
4707                     ; 338         default:
4707                     ; 339              OS_EXIT_CRITICAL();
4709 f9fea e682          	ldab	OFST-2,s
4710 f9fec 87            	clra	
4711 f9fed 164b54        	jsr	_OS_CPU_SR_Restore
4713                     ; 340              *perr                  = OS_ERR_INVALID_OPT;
4715 f9ff0 c607          	ldab	#7
4716                     ; 341              pevent_return          = pevent;
4718                     ; 342              break;
4720 f9ff2 203a          	bra	LC003
4721 f9ff4               L3603:
4722                     ; 294         case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
4722                     ; 295              if (tasks_waiting == OS_FALSE) {
4724 f9ff4 e683          	ldab	OFST-1,s
4725 f9ff6 262e          	bne	L7513
4726                     ; 297                  pevent->OSEventName    = (INT8U *)(void *)"?";
4728 f9ff8 cc773f        	ldd	#L7503
4729 f9ffb 6c4e          	std	14,y
4730                     ; 299                  pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
4732 f9ffd ee41          	ldx	1,y
4733 f9fff 6e80          	stx	OFST-4,s
4734                     ; 300                  pq->OSQPtr             = OSQFreeList;
4736 fa001 18010013e9    	movw	_OSQFreeList,0,x
4737                     ; 301                  OSQFreeList            = pq;
4739 fa006 7e13e9        	stx	_OSQFreeList
4740                     ; 302                  pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
4742 fa009 87            	clra	
4743 fa00a 6a40          	staa	0,y
4744                     ; 303                  pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
4746 fa00c 1801411702    	movw	_OSEventFreeList,1,y
4747                     ; 304                  pevent->OSEventCnt     = 0u;
4749 fa011 c7            	clrb	
4750 fa012 6c43          	std	3,y
4751                     ; 305                  OSEventFreeList        = pevent;          /* Get next free event control block        */
4753 fa014 1805841702    	movw	OFST+0,s,_OSEventFreeList
4754                     ; 306                  OS_EXIT_CRITICAL();
4756 fa019 e682          	ldab	OFST-2,s
4757 fa01b 164b54        	jsr	_OS_CPU_SR_Restore
4759                     ; 307                  *perr                  = OS_ERR_NONE;
4761 fa01e 87            	clra	
4762 fa01f 6af3000a      	staa	[OFST+6,s]
4763                     ; 308                  pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
4765 fa023 c7            	clrb	
4767 fa024 200e          	bra	LC002
4768 fa026               L7513:
4769                     ; 310                  OS_EXIT_CRITICAL();
4771 fa026 e682          	ldab	OFST-2,s
4772 fa028 87            	clra	
4773 fa029 164b54        	jsr	_OS_CPU_SR_Restore
4775                     ; 311                  *perr                  = OS_ERR_TASK_WAITING;
4777 fa02c c649          	ldab	#73
4778                     ; 312                  pevent_return          = pevent;
4780 fa02e               LC003:
4781 fa02e 6bf3000a      	stab	[OFST+6,s]
4782 fa032 ec84          	ldd	OFST+0,s
4783 fa034               LC002:
4784 fa034 6c80          	std	OFST-4,s
4785 fa036 204a          	bra	L5513
4786 fa038               L3613:
4787                     ; 318                  (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
4789 fa038 cc0002        	ldd	#2
4790 fa03b 3b            	pshd	
4791 fa03c c604          	ldab	#4
4792 fa03e 3b            	pshd	
4793 fa03f c7            	clrb	
4794 fa040 3b            	pshd	
4795 fa041 ec8a          	ldd	OFST+6,s
4796 fa043 1645fc        	jsr	_OS_EventTaskRdy
4798 fa046 1b86          	leas	6,s
4799 fa048 ed84          	ldy	OFST+0,s
4800 fa04a               L5613:
4801                     ; 316         case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
4801                     ; 317              while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for queue        */
4803 fa04a e645          	ldab	5,y
4804 fa04c 26ea          	bne	L3613
4805                     ; 321              pevent->OSEventName    = (INT8U *)(void *)"?";
4807 fa04e cc773f        	ldd	#L7503
4808 fa051 6c4e          	std	14,y
4809                     ; 323              pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
4811 fa053 ee41          	ldx	1,y
4812 fa055 6e80          	stx	OFST-4,s
4813                     ; 324              pq->OSQPtr             = OSQFreeList;
4815 fa057 18010013e9    	movw	_OSQFreeList,0,x
4816                     ; 325              OSQFreeList            = pq;
4818 fa05c 7e13e9        	stx	_OSQFreeList
4819                     ; 326              pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
4821 fa05f 87            	clra	
4822 fa060 6a40          	staa	0,y
4823                     ; 327              pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
4825 fa062 1801411702    	movw	_OSEventFreeList,1,y
4826                     ; 328              pevent->OSEventCnt     = 0u;
4828 fa067 c7            	clrb	
4829 fa068 6c43          	std	3,y
4830                     ; 329              OSEventFreeList        = pevent;              /* Get next free event control block        */
4832 fa06a 1805841702    	movw	OFST+0,s,_OSEventFreeList
4833                     ; 330              OS_EXIT_CRITICAL();
4835 fa06f e682          	ldab	OFST-2,s
4836 fa071 164b54        	jsr	_OS_CPU_SR_Restore
4838                     ; 331              if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
4840 fa074 e683          	ldab	OFST-1,s
4841 fa076 042103        	dbne	b,L1713
4842                     ; 332                  OS_Sched();                               /* Find highest priority task ready to run  */
4844 fa079 164933        	jsr	_OS_Sched
4846 fa07c               L1713:
4847                     ; 334              *perr                  = OS_ERR_NONE;
4849 fa07c 87            	clra	
4850 fa07d 6af3000a      	staa	[OFST+6,s]
4851                     ; 335              pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
4853 fa081 c7            	clrb	
4854                     ; 336              break;
4856 fa082               L5513:
4857                     ; 347     return (pevent_return);
4862 fa082 1b86          	leas	6,s
4863 fa084 3d            	rts	
4920                     ; 372 _NEAR INT8U  OSQFlush (OS_EVENT *pevent)
4920                     ; 373 {
4921                     	switch	.text
4922 fa085               _OSQFlush:
4924 fa085 3b            	pshd	
4925 fa086 1b9d          	leas	-3,s
4926       00000003      OFST:	set	3
4929                     ; 376     OS_CPU_SR  cpu_sr = 0u;
4931                     ; 382     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
4933 fa088 046404        	tbne	d,L3223
4934                     ; 383         return (OS_ERR_PEVENT_NULL);
4936 fa08b c604          	ldab	#4
4938 fa08d 200a          	bra	L02
4939 fa08f               L3223:
4940                     ; 385     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
4942 fa08f e6f30003      	ldab	[OFST+0,s]
4943 fa093 c102          	cmpb	#2
4944 fa095 2705          	beq	L5223
4945                     ; 386         return (OS_ERR_EVENT_TYPE);
4947 fa097 c601          	ldab	#1
4949 fa099               L02:
4951 fa099 1b85          	leas	5,s
4952 fa09b 3d            	rts	
4953 fa09c               L5223:
4954                     ; 389     OS_ENTER_CRITICAL();
4956 fa09c 164b4f        	jsr	_OS_CPU_SR_Save
4958 fa09f 6b82          	stab	OFST-1,s
4959                     ; 390     pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
4961 fa0a1 ed83          	ldy	OFST+0,s
4962 fa0a3 ed41          	ldy	1,y
4963 fa0a5 6d80          	sty	OFST-3,s
4964                     ; 391     pq->OSQIn      = pq->OSQStart;
4966 fa0a7 ec42          	ldd	2,y
4967 fa0a9 6c46          	std	6,y
4968                     ; 392     pq->OSQOut     = pq->OSQStart;
4970 fa0ab 6c48          	std	8,y
4971                     ; 393     pq->OSQEntries = 0u;
4973 fa0ad 87            	clra	
4974 fa0ae c7            	clrb	
4975 fa0af 6c4c          	std	12,y
4976                     ; 394     OS_EXIT_CRITICAL();
4978 fa0b1 e682          	ldab	OFST-1,s
4979 fa0b3 164b54        	jsr	_OS_CPU_SR_Restore
4981                     ; 395     return (OS_ERR_NONE);
4983 fa0b6 c7            	clrb	
4985 fa0b7 20e0          	bra	L02
5076                     ; 436 _NEAR void  *OSQPend (OS_EVENT  *pevent,
5076                     ; 437                 INT32U     timeout,
5076                     ; 438                 INT8U     *perr)
5076                     ; 439 {
5077                     	switch	.text
5078 fa0b9               _OSQPend:
5080 fa0b9 3b            	pshd	
5081 fa0ba 1b9b          	leas	-5,s
5082       00000005      OFST:	set	5
5085                     ; 443     OS_CPU_SR  cpu_sr = 0u;
5087                     ; 455     if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
5089 fa0bc 046404        	tbne	d,L7723
5090                     ; 456         *perr = OS_ERR_PEVENT_NULL;
5092 fa0bf c604          	ldab	#4
5093                     ; 457         return ((void *)0);
5096 fa0c1 200a          	bra	LC004
5097 fa0c3               L7723:
5098                     ; 463     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
5101 fa0c3 e6f30005      	ldab	[OFST+0,s]
5102 fa0c7 c102          	cmpb	#2
5103 fa0c9 270b          	beq	L1033
5104                     ; 464         *perr = OS_ERR_EVENT_TYPE;
5106 fa0cb c601          	ldab	#1
5107                     ; 466         return ((void *)0);
5110 fa0cd               LC004:
5111 fa0cd 6bf3000d      	stab	[OFST+8,s]
5112 fa0d1 87            	clra	
5113 fa0d2 c7            	clrb	
5115 fa0d3               L42:
5117 fa0d3 1b87          	leas	7,s
5118 fa0d5 3d            	rts	
5119 fa0d6               L1033:
5120                     ; 468     if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
5122 fa0d6 f6163c        	ldab	_OSIntNesting
5123 fa0d9 2704          	beq	L3033
5124                     ; 469         *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
5126 fa0db c602          	ldab	#2
5127                     ; 471         return ((void *)0);
5131 fa0dd 20ee          	bra	LC004
5132 fa0df               L3033:
5133                     ; 473     if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
5135 fa0df f6163b        	ldab	_OSLockNesting
5136 fa0e2 2704          	beq	L5033
5137                     ; 474         *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
5139 fa0e4 c60d          	ldab	#13
5140                     ; 476         return ((void *)0);
5144 fa0e6 20e5          	bra	LC004
5145 fa0e8               L5033:
5146                     ; 478     OS_ENTER_CRITICAL();
5148 fa0e8 164b4f        	jsr	_OS_CPU_SR_Save
5150 fa0eb 6b84          	stab	OFST-1,s
5151                     ; 479     pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
5153 fa0ed ed85          	ldy	OFST+0,s
5154 fa0ef ed41          	ldy	1,y
5155 fa0f1 6d80          	sty	OFST-5,s
5156                     ; 480     if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
5158 fa0f3 ec4c          	ldd	12,y
5159 fa0f5 2725          	beq	L7033
5160                     ; 481         pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
5162 fa0f7 ee48          	ldx	8,y
5163 fa0f9 18023182      	movw	2,x+,OFST-3,s
5164 fa0fd 6e48          	stx	8,y
5165                     ; 482         pq->OSQEntries--;                        /* Update the number of entries in the queue          */
5167 fa0ff ee4c          	ldx	12,y
5168 fa101 09            	dex	
5169 fa102 6e4c          	stx	12,y
5170                     ; 483         if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
5172 fa104 ec48          	ldd	8,y
5173 fa106 ac44          	cpd	4,y
5174 fa108 2604          	bne	L1133
5175                     ; 484             pq->OSQOut = pq->OSQStart;
5177 fa10a 18024248      	movw	2,y,8,y
5178 fa10e               L1133:
5179                     ; 486         OS_EXIT_CRITICAL();
5181 fa10e e684          	ldab	OFST-1,s
5182 fa110 87            	clra	
5183 fa111 164b54        	jsr	_OS_CPU_SR_Restore
5185                     ; 487         *perr = OS_ERR_NONE;
5187 fa114 69f3000d      	clr	[OFST+8,s]
5188                     ; 489         return (pmsg);                           /* Return message received                            */
5191 fa118 ec82          	ldd	OFST-3,s
5193 fa11a 20b7          	bra	L42
5194 fa11c               L7033:
5195                     ; 491     OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
5197 fa11c fd1588        	ldy	_OSTCBCur
5198 fa11f 0ce82204      	bset	34,y,4
5199                     ; 492     OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
5201 fa123 69e823        	clr	35,y
5202                     ; 493     OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
5204 fa126 ec8b          	ldd	OFST+6,s
5205 fa128 6ce820        	std	32,y
5206 fa12b ec89          	ldd	OFST+4,s
5207 fa12d 6ce81e        	std	30,y
5208                     ; 494     OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
5210 fa130 ec85          	ldd	OFST+0,s
5211 fa132 164690        	jsr	_OS_EventTaskWait
5213                     ; 495     OS_EXIT_CRITICAL();
5215 fa135 e684          	ldab	OFST-1,s
5216 fa137 87            	clra	
5217 fa138 164b54        	jsr	_OS_CPU_SR_Restore
5219                     ; 496     OS_Sched();                                  /* Find next highest priority task ready to run       */
5221 fa13b 164933        	jsr	_OS_Sched
5223                     ; 497     OS_ENTER_CRITICAL();
5225 fa13e 164b4f        	jsr	_OS_CPU_SR_Save
5227 fa141 6b84          	stab	OFST-1,s
5228                     ; 498     switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
5230 fa143 fd1588        	ldy	_OSTCBCur
5231 fa146 e6e823        	ldab	35,y
5233 fa149 2708          	beq	L7223
5234 fa14b 040117        	dbeq	b,L3323
5235 fa14e 04010d        	dbeq	b,L1323
5236 fa151 2012          	bra	L3323
5237 fa153               L7223:
5238                     ; 499         case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
5238                     ; 500              pmsg =  OSTCBCur->OSTCBMsg;
5240 fa153 ece818        	ldd	24,y
5241 fa156 6c82          	std	OFST-3,s
5242                     ; 501             *perr =  OS_ERR_NONE;
5244 fa158 69f3000d      	clr	[OFST+8,s]
5245                     ; 502              break;
5247 fa15c 201e          	bra	L5133
5248 fa15e               L1323:
5249                     ; 504         case OS_STAT_PEND_ABORT:
5249                     ; 505              pmsg = (void *)0;
5251 fa15e 87            	clra	
5252 fa15f 6c82          	std	OFST-3,s
5253                     ; 506             *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
5255 fa161 c60e          	ldab	#14
5256                     ; 507              break;
5258 fa163 2010          	bra	LC005
5259 fa165               L3323:
5260                     ; 509         case OS_STAT_PEND_TO:
5260                     ; 510         default:
5260                     ; 511              OS_EventTaskRemove(OSTCBCur, pevent);
5262 fa165 ec85          	ldd	OFST+0,s
5263 fa167 3b            	pshd	
5264 fa168 b764          	tfr	y,d
5265 fa16a 164737        	jsr	_OS_EventTaskRemove
5267 fa16d 1b82          	leas	2,s
5268                     ; 512              pmsg = (void *)0;
5270 fa16f 87            	clra	
5271 fa170 c7            	clrb	
5272 fa171 6c82          	std	OFST-3,s
5273                     ; 513             *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
5275 fa173 c60a          	ldab	#10
5276 fa175               LC005:
5277 fa175 6bf3000d      	stab	[OFST+8,s]
5278                     ; 514              break;
5280 fa179 fd1588        	ldy	_OSTCBCur
5281 fa17c               L5133:
5282                     ; 516     OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
5284 fa17c c7            	clrb	
5285 fa17d 6be822        	stab	34,y
5286                     ; 517     OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
5288 fa180 87            	clra	
5289 fa181 6ae823        	staa	35,y
5290                     ; 518     OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
5292 fa184 6ce812        	std	18,y
5293                     ; 520     OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
5295 fa187 6ce814        	std	20,y
5296                     ; 521     OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
5298 fa18a 6ce816        	std	22,y
5299                     ; 523     OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
5301 fa18d 6ce818        	std	24,y
5302                     ; 524     OS_EXIT_CRITICAL();
5304 fa190 e684          	ldab	OFST-1,s
5305 fa192 164b54        	jsr	_OS_CPU_SR_Restore
5307                     ; 527     return (pmsg);                                    /* Return received message                       */
5310 fa195 ec82          	ldd	OFST-3,s
5313 fa197 1b87          	leas	7,s
5314 fa199 3d            	rts	
5385                     ; 564 _NEAR INT8U  OSQPendAbort (OS_EVENT  *pevent,
5385                     ; 565                           INT8U      opt,
5385                     ; 566                           INT8U     *perr)
5385                     ; 567 {
5386                     	switch	.text
5387 fa19a               _OSQPendAbort:
5389 fa19a 3b            	pshd	
5390       00000002      OFST:	set	2
5393                     ; 570     OS_CPU_SR  cpu_sr = 0u;
5395                     ; 583     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
5397 fa19b 6cae          	std	2,-s
5398 fa19d 2604          	bne	L5533
5399                     ; 584         *perr = OS_ERR_PEVENT_NULL;
5401 fa19f c604          	ldab	#4
5402                     ; 585         return (0u);
5405 fa1a1 200a          	bra	LC006
5406 fa1a3               L5533:
5407                     ; 588     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
5409 fa1a3 e6f30002      	ldab	[OFST+0,s]
5410 fa1a7 c102          	cmpb	#2
5411 fa1a9 270a          	beq	L7533
5412                     ; 589         *perr = OS_ERR_EVENT_TYPE;
5414 fa1ab c601          	ldab	#1
5415                     ; 590         return (0u);
5417 fa1ad               LC006:
5418 fa1ad 6bf30008      	stab	[OFST+6,s]
5419 fa1b1 c7            	clrb	
5421 fa1b2               L03:
5423 fa1b2 1b84          	leas	4,s
5424 fa1b4 3d            	rts	
5425 fa1b5               L7533:
5426                     ; 592     OS_ENTER_CRITICAL();
5428 fa1b5 164b4f        	jsr	_OS_CPU_SR_Save
5430 fa1b8 6b81          	stab	OFST-1,s
5431                     ; 593     if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on queue?        */
5433 fa1ba ed82          	ldy	OFST+0,s
5434 fa1bc e745          	tst	5,y
5435 fa1be 274a          	beq	L1633
5436                     ; 594         nbr_tasks = 0u;
5438 fa1c0 6980          	clr	OFST-2,s
5439                     ; 595         switch (opt) {
5441 fa1c2 e687          	ldab	OFST+5,s
5443 fa1c4 271f          	beq	L1233
5444 fa1c6 040116        	dbeq	b,L1733
5445 fa1c9 201a          	bra	L1233
5446 fa1cb               L7633:
5447                     ; 598                      (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
5449 fa1cb cc0002        	ldd	#2
5450 fa1ce 3b            	pshd	
5451 fa1cf c604          	ldab	#4
5452 fa1d1 3b            	pshd	
5453 fa1d2 c7            	clrb	
5454 fa1d3 3b            	pshd	
5455 fa1d4 ec88          	ldd	OFST+6,s
5456 fa1d6 1645fc        	jsr	_OS_EventTaskRdy
5458 fa1d9 1b86          	leas	6,s
5459                     ; 599                      nbr_tasks++;
5461 fa1db 6280          	inc	OFST-2,s
5462 fa1dd ed82          	ldy	OFST+0,s
5463 fa1df               L1733:
5464                     ; 596             case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
5464                     ; 597                  while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on queue    */
5466 fa1df e645          	ldab	5,y
5467 fa1e1 26e8          	bne	L7633
5468                     ; 601                  break;
5470 fa1e3 2012          	bra	L5633
5471 fa1e5               L1233:
5472                     ; 603             case OS_PEND_OPT_NONE:
5472                     ; 604             default:                                       /* No,  ready HPT       waiting on queue    */
5472                     ; 605                  (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
5474 fa1e5 cc0002        	ldd	#2
5475 fa1e8 3b            	pshd	
5476 fa1e9 c604          	ldab	#4
5477 fa1eb 3b            	pshd	
5478 fa1ec c7            	clrb	
5479 fa1ed 3b            	pshd	
5480 fa1ee b764          	tfr	y,d
5481 fa1f0 1645fc        	jsr	_OS_EventTaskRdy
5483 fa1f3 1b86          	leas	6,s
5484                     ; 606                  nbr_tasks++;
5486 fa1f5 6280          	inc	OFST-2,s
5487                     ; 607                  break;
5489 fa1f7               L5633:
5490                     ; 609         OS_EXIT_CRITICAL();
5492 fa1f7 e681          	ldab	OFST-1,s
5493 fa1f9 87            	clra	
5494 fa1fa 164b54        	jsr	_OS_CPU_SR_Restore
5496                     ; 610         OS_Sched();                                        /* Find HPT ready to run                    */
5498 fa1fd 164933        	jsr	_OS_Sched
5500                     ; 611         *perr = OS_ERR_PEND_ABORT;
5502 fa200 c60e          	ldab	#14
5503 fa202 6bf30008      	stab	[OFST+6,s]
5504                     ; 612         return (nbr_tasks);
5506 fa206 e680          	ldab	OFST-2,s
5508 fa208 20a8          	bra	L03
5509 fa20a               L1633:
5510                     ; 614     OS_EXIT_CRITICAL();
5512 fa20a 87            	clra	
5513 fa20b 164b54        	jsr	_OS_CPU_SR_Restore
5515                     ; 615     *perr = OS_ERR_NONE;
5517 fa20e c7            	clrb	
5518 fa20f 6bf30008      	stab	[OFST+6,s]
5519                     ; 616     return (0u);                                           /* No tasks waiting on queue                */
5522 fa213 209d          	bra	L03
5591                     ; 641 _NEAR INT8U  OSQPost (OS_EVENT  *pevent,
5591                     ; 642                      void      *pmsg)
5591                     ; 643 {
5592                     	switch	.text
5593 fa215               _OSQPost:
5595 fa215 3b            	pshd	
5596 fa216 1b9d          	leas	-3,s
5597       00000003      OFST:	set	3
5600                     ; 646     OS_CPU_SR  cpu_sr = 0u;
5602                     ; 651     if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
5604 fa218 046404        	tbne	d,L1343
5605                     ; 652         return (OS_ERR_PEVENT_NULL);
5607 fa21b c604          	ldab	#4
5609 fa21d 200a          	bra	L43
5610 fa21f               L1343:
5611                     ; 658     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
5614 fa21f e6f30003      	ldab	[OFST+0,s]
5615 fa223 c102          	cmpb	#2
5616 fa225 2705          	beq	L3343
5617                     ; 660         return (OS_ERR_EVENT_TYPE);
5620 fa227 c601          	ldab	#1
5622 fa229               L43:
5624 fa229 1b85          	leas	5,s
5625 fa22b 3d            	rts	
5626 fa22c               L3343:
5627                     ; 662     OS_ENTER_CRITICAL();
5629 fa22c 164b4f        	jsr	_OS_CPU_SR_Save
5631 fa22f 6b82          	stab	OFST-1,s
5632                     ; 663     if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
5634 fa231 ed83          	ldy	OFST+0,s
5635 fa233 e645          	ldab	5,y
5636 fa235 271b          	beq	L5343
5637                     ; 665         (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
5639 fa237 87            	clra	
5640 fa238 c7            	clrb	
5641 fa239 3b            	pshd	
5642 fa23a c604          	ldab	#4
5643 fa23c 3b            	pshd	
5644 fa23d ec8b          	ldd	OFST+8,s
5645 fa23f 3b            	pshd	
5646 fa240 b764          	tfr	y,d
5647 fa242 1645fc        	jsr	_OS_EventTaskRdy
5649 fa245 1b86          	leas	6,s
5650                     ; 666         OS_EXIT_CRITICAL();
5652 fa247 e682          	ldab	OFST-1,s
5653 fa249 87            	clra	
5654 fa24a 164b54        	jsr	_OS_CPU_SR_Restore
5656                     ; 667         OS_Sched();                                    /* Find highest priority task ready to run      */
5658 fa24d 164933        	jsr	_OS_Sched
5660                     ; 669         return (OS_ERR_NONE);
5664 fa250 2031          	bra	LC007
5665 fa252               L5343:
5666                     ; 671     pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
5668 fa252 ed41          	ldy	1,y
5669 fa254 6d80          	sty	OFST-3,s
5670                     ; 672     if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
5672 fa256 ec4c          	ldd	12,y
5673 fa258 ac4a          	cpd	10,y
5674 fa25a 250a          	blo	L7343
5675                     ; 673         OS_EXIT_CRITICAL();
5677 fa25c e682          	ldab	OFST-1,s
5678 fa25e 87            	clra	
5679 fa25f 164b54        	jsr	_OS_CPU_SR_Restore
5681                     ; 675         return (OS_ERR_Q_FULL);
5684 fa262 c61e          	ldab	#30
5686 fa264 20c3          	bra	L43
5687 fa266               L7343:
5688                     ; 677     *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
5690 fa266 ee46          	ldx	6,y
5691 fa268 18028731      	movw	OFST+4,s,2,x+
5692 fa26c 6e46          	stx	6,y
5693                     ; 678     pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
5695 fa26e ee4c          	ldx	12,y
5696 fa270 08            	inx	
5697 fa271 6e4c          	stx	12,y
5698                     ; 679     if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
5700 fa273 ec46          	ldd	6,y
5701 fa275 ac44          	cpd	4,y
5702 fa277 2604          	bne	L1443
5703                     ; 680         pq->OSQIn = pq->OSQStart;
5705 fa279 18024246      	movw	2,y,6,y
5706 fa27d               L1443:
5707                     ; 682     OS_EXIT_CRITICAL();
5709 fa27d e682          	ldab	OFST-1,s
5710 fa27f 87            	clra	
5711 fa280 164b54        	jsr	_OS_CPU_SR_Restore
5713                     ; 685     return (OS_ERR_NONE);
5716 fa283               LC007:
5717 fa283 c7            	clrb	
5719 fa284 20a3          	bra	L43
5788                     ; 712 _NEAR INT8U  OSQPostFront (OS_EVENT  *pevent,
5788                     ; 713                           void      *pmsg)
5788                     ; 714 {
5789                     	switch	.text
5790 fa286               _OSQPostFront:
5792 fa286 3b            	pshd	
5793 fa287 1b9d          	leas	-3,s
5794       00000003      OFST:	set	3
5797                     ; 717     OS_CPU_SR  cpu_sr = 0u;
5799                     ; 723     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
5801 fa289 046404        	tbne	d,L7743
5802                     ; 724         return (OS_ERR_PEVENT_NULL);
5804 fa28c c604          	ldab	#4
5806 fa28e 200a          	bra	L04
5807 fa290               L7743:
5808                     ; 730     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
5811 fa290 e6f30003      	ldab	[OFST+0,s]
5812 fa294 c102          	cmpb	#2
5813 fa296 2705          	beq	L1053
5814                     ; 732         return (OS_ERR_EVENT_TYPE);
5817 fa298 c601          	ldab	#1
5819 fa29a               L04:
5821 fa29a 1b85          	leas	5,s
5822 fa29c 3d            	rts	
5823 fa29d               L1053:
5824                     ; 734     OS_ENTER_CRITICAL();
5826 fa29d 164b4f        	jsr	_OS_CPU_SR_Save
5828 fa2a0 6b82          	stab	OFST-1,s
5829                     ; 735     if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on queue              */
5831 fa2a2 ed83          	ldy	OFST+0,s
5832 fa2a4 e645          	ldab	5,y
5833 fa2a6 271b          	beq	L3053
5834                     ; 737         (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
5836 fa2a8 87            	clra	
5837 fa2a9 c7            	clrb	
5838 fa2aa 3b            	pshd	
5839 fa2ab c604          	ldab	#4
5840 fa2ad 3b            	pshd	
5841 fa2ae ec8b          	ldd	OFST+8,s
5842 fa2b0 3b            	pshd	
5843 fa2b1 b764          	tfr	y,d
5844 fa2b3 1645fc        	jsr	_OS_EventTaskRdy
5846 fa2b6 1b86          	leas	6,s
5847                     ; 738         OS_EXIT_CRITICAL();
5849 fa2b8 e682          	ldab	OFST-1,s
5850 fa2ba 87            	clra	
5851 fa2bb 164b54        	jsr	_OS_CPU_SR_Restore
5853                     ; 739         OS_Sched();                                   /* Find highest priority task ready to run       */
5855 fa2be 164933        	jsr	_OS_Sched
5857                     ; 741         return (OS_ERR_NONE);
5861 fa2c1 202f          	bra	LC008
5862 fa2c3               L3053:
5863                     ; 743     pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
5865 fa2c3 ed41          	ldy	1,y
5866 fa2c5 6d80          	sty	OFST-3,s
5867                     ; 744     if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
5869 fa2c7 ec4c          	ldd	12,y
5870 fa2c9 ac4a          	cpd	10,y
5871 fa2cb 250a          	blo	L5053
5872                     ; 745         OS_EXIT_CRITICAL();
5874 fa2cd e682          	ldab	OFST-1,s
5875 fa2cf 87            	clra	
5876 fa2d0 164b54        	jsr	_OS_CPU_SR_Restore
5878                     ; 747         return (OS_ERR_Q_FULL);
5881 fa2d3 c61e          	ldab	#30
5883 fa2d5 20c3          	bra	L04
5884 fa2d7               L5053:
5885                     ; 749     if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
5887 fa2d7 ee48          	ldx	8,y
5888 fa2d9 ae42          	cpx	2,y
5889 fa2db 2604          	bne	L7053
5890                     ; 750         pq->OSQOut = pq->OSQEnd;
5892 fa2dd ee44          	ldx	4,y
5893 fa2df 6e48          	stx	8,y
5894 fa2e1               L7053:
5895                     ; 752     pq->OSQOut--;
5897                     ; 753     *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
5899 fa2e1 1802872e      	movw	OFST+4,s,2,-x
5900 fa2e5 6e48          	stx	8,y
5901                     ; 754     pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
5903 fa2e7 ee4c          	ldx	12,y
5904 fa2e9 08            	inx	
5905 fa2ea 6e4c          	stx	12,y
5906                     ; 755     OS_EXIT_CRITICAL();
5908 fa2ec e682          	ldab	OFST-1,s
5909 fa2ee 87            	clra	
5910 fa2ef 164b54        	jsr	_OS_CPU_SR_Restore
5912                     ; 757     return (OS_ERR_NONE);
5915 fa2f2               LC008:
5916 fa2f2 c7            	clrb	
5918 fa2f3 20a5          	bra	L04
5994                     ; 792 _NEAR INT8U  OSQPostOpt (OS_EVENT  *pevent,
5994                     ; 793                         void      *pmsg,
5994                     ; 794                         INT8U      opt)
5994                     ; 795 {
5995                     	switch	.text
5996 fa2f5               _OSQPostOpt:
5998 fa2f5 3b            	pshd	
5999 fa2f6 1b9d          	leas	-3,s
6000       00000003      OFST:	set	3
6003                     ; 798     OS_CPU_SR  cpu_sr = 0u;
6005                     ; 804     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
6007 fa2f8 046404        	tbne	d,L7453
6008                     ; 805         return (OS_ERR_PEVENT_NULL);
6010 fa2fb c604          	ldab	#4
6012 fa2fd 200a          	bra	L44
6013 fa2ff               L7453:
6014                     ; 811     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
6017 fa2ff e6f30003      	ldab	[OFST+0,s]
6018 fa303 c102          	cmpb	#2
6019 fa305 2705          	beq	L1553
6020                     ; 813         return (OS_ERR_EVENT_TYPE);
6023 fa307 c601          	ldab	#1
6025 fa309               L44:
6027 fa309 1b85          	leas	5,s
6028 fa30b 3d            	rts	
6029 fa30c               L1553:
6030                     ; 815     OS_ENTER_CRITICAL();
6032 fa30c 164b4f        	jsr	_OS_CPU_SR_Save
6034 fa30f 6b82          	stab	OFST-1,s
6035                     ; 816     if (pevent->OSEventGrp != 0x00u) {                /* See if any task pending on queue              */
6037 fa311 ed83          	ldy	OFST+0,s
6038 fa313 e645          	ldab	5,y
6039 fa315 273e          	beq	L3553
6040                     ; 817         if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
6042 fa317 0f8a011a      	brclr	OFST+7,s,1,L5553
6044 fa31b 2014          	bra	L1653
6045 fa31d               L7553:
6046                     ; 819                 (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
6048 fa31d 87            	clra	
6049 fa31e c7            	clrb	
6050 fa31f 3b            	pshd	
6051 fa320 c604          	ldab	#4
6052 fa322 3b            	pshd	
6053 fa323 ec8b          	ldd	OFST+8,s
6054 fa325 3b            	pshd	
6055 fa326 ec89          	ldd	OFST+6,s
6056 fa328 1645fc        	jsr	_OS_EventTaskRdy
6058 fa32b 1b86          	leas	6,s
6059 fa32d ed83          	ldy	OFST+0,s
6060 fa32f e645          	ldab	5,y
6061 fa331               L1653:
6062                     ; 818             while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on queue       */
6064 fa331 26ea          	bne	L7553
6066 fa333 2010          	bra	L5653
6067 fa335               L5553:
6068                     ; 822             (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
6070 fa335 87            	clra	
6071 fa336 c7            	clrb	
6072 fa337 3b            	pshd	
6073 fa338 c604          	ldab	#4
6074 fa33a 3b            	pshd	
6075 fa33b ec8b          	ldd	OFST+8,s
6076 fa33d 3b            	pshd	
6077 fa33e b764          	tfr	y,d
6078 fa340 1645fc        	jsr	_OS_EventTaskRdy
6080 fa343 1b86          	leas	6,s
6081 fa345               L5653:
6082                     ; 824         OS_EXIT_CRITICAL();
6084 fa345 e682          	ldab	OFST-1,s
6085 fa347 87            	clra	
6086 fa348 164b54        	jsr	_OS_CPU_SR_Restore
6088                     ; 825         if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
6090 fa34b 0e8a0403      	brset	OFST+7,s,4,L7653
6091                     ; 826             OS_Sched();                               /* Find highest priority task ready to run       */
6093 fa34f 164933        	jsr	_OS_Sched
6095 fa352               L7653:
6096                     ; 829         return (OS_ERR_NONE);
6099 fa352 c7            	clrb	
6101 fa353 20b4          	bra	L44
6102 fa355               L3553:
6103                     ; 831     pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
6105 fa355 ed41          	ldy	1,y
6106 fa357 6d80          	sty	OFST-3,s
6107                     ; 832     if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
6109 fa359 ec4c          	ldd	12,y
6110 fa35b ac4a          	cpd	10,y
6111 fa35d 250a          	blo	L1753
6112                     ; 833         OS_EXIT_CRITICAL();
6114 fa35f e682          	ldab	OFST-1,s
6115 fa361 87            	clra	
6116 fa362 164b54        	jsr	_OS_CPU_SR_Restore
6118                     ; 835         return (OS_ERR_Q_FULL);
6121 fa365 c61e          	ldab	#30
6123 fa367 20a0          	bra	L44
6124 fa369               L1753:
6125                     ; 837     if ((opt & OS_POST_OPT_FRONT) != 0x00u) {         /* Do we post to the FRONT of the queue?         */
6127 fa369 0f8a0212      	brclr	OFST+7,s,2,L3753
6128                     ; 838         if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
6130 fa36d ee48          	ldx	8,y
6131 fa36f ae42          	cpx	2,y
6132 fa371 2604          	bne	L5753
6133                     ; 839             pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
6135 fa373 ee44          	ldx	4,y
6136 fa375 6e48          	stx	8,y
6137 fa377               L5753:
6138                     ; 841         pq->OSQOut--;
6140                     ; 842         *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
6142 fa377 1802872e      	movw	OFST+4,s,2,-x
6143 fa37b 6e48          	stx	8,y
6145 fa37d 2010          	bra	L7753
6146 fa37f               L3753:
6147                     ; 844         *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
6149 fa37f ee46          	ldx	6,y
6150 fa381 18028731      	movw	OFST+4,s,2,x+
6151 fa385 6e46          	stx	6,y
6152                     ; 845         if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
6154 fa387 ae44          	cpx	4,y
6155 fa389 2604          	bne	L7753
6156                     ; 846             pq->OSQIn = pq->OSQStart;
6158 fa38b 18024246      	movw	2,y,6,y
6159 fa38f               L7753:
6160                     ; 849     pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
6162 fa38f ee4c          	ldx	12,y
6163 fa391 08            	inx	
6164 fa392 6e4c          	stx	12,y
6165                     ; 850     OS_EXIT_CRITICAL();
6167 fa394 e682          	ldab	OFST-1,s
6168 fa396 87            	clra	
6169 fa397 164b54        	jsr	_OS_CPU_SR_Restore
6171                     ; 852     return (OS_ERR_NONE);
6174 fa39a c7            	clrb	
6177 fa39b 1b85          	leas	5,s
6178 fa39d 3d            	rts	
6322                     ; 876 _NEAR INT8U  OSQQuery (OS_EVENT  *pevent,
6322                     ; 877                       OS_Q_DATA *p_q_data)
6322                     ; 878 {
6323                     	switch	.text
6324 fa39e               _OSQQuery:
6326 fa39e 3b            	pshd	
6327 fa39f 1b9a          	leas	-6,s
6328       00000006      OFST:	set	6
6331                     ; 884     OS_CPU_SR   cpu_sr = 0u;
6333                     ; 890     if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
6335 fa3a1 046404        	tbne	d,L5763
6336                     ; 891         return (OS_ERR_PEVENT_NULL);
6338 fa3a4 c604          	ldab	#4
6340 fa3a6 2006          	bra	L05
6341 fa3a8               L5763:
6342                     ; 893     if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
6344 fa3a8 ec8a          	ldd	OFST+4,s
6345 fa3aa 2605          	bne	L7763
6346                     ; 894         return (OS_ERR_PDATA_NULL);
6348 fa3ac c609          	ldab	#9
6350 fa3ae               L05:
6352 fa3ae 1b88          	leas	8,s
6353 fa3b0 3d            	rts	
6354 fa3b1               L7763:
6355                     ; 897     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
6357 fa3b1 e6f30006      	ldab	[OFST+0,s]
6358 fa3b5 c102          	cmpb	#2
6359 fa3b7 2704          	beq	L1073
6360                     ; 898         return (OS_ERR_EVENT_TYPE);
6362 fa3b9 c601          	ldab	#1
6364 fa3bb 20f1          	bra	L05
6365 fa3bd               L1073:
6366                     ; 900     OS_ENTER_CRITICAL();
6368 fa3bd 164b4f        	jsr	_OS_CPU_SR_Save
6370 fa3c0 6b85          	stab	OFST-1,s
6371                     ; 901     p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
6373 fa3c2 ed8a          	ldy	OFST+4,s
6374 fa3c4 ee86          	ldx	OFST+0,s
6375 fa3c6 180a054e      	movb	5,x,14,y
6376                     ; 902     psrc                 = &pevent->OSEventTbl[0];
6378 fa3ca ed86          	ldy	OFST+0,s
6379 fa3cc 1946          	leay	6,y
6380 fa3ce 6d83          	sty	OFST-3,s
6381                     ; 903     pdest                = &p_q_data->OSEventTbl[0];
6383 fa3d0 ed8a          	ldy	OFST+4,s
6384 fa3d2 1946          	leay	6,y
6385 fa3d4 6d80          	sty	OFST-6,s
6386                     ; 904     for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
6388 fa3d6 6982          	clr	OFST-4,s
6389 fa3d8 ee83          	ldx	OFST-3,s
6390 fa3da               L3073:
6391                     ; 905         *pdest++ = *psrc++;
6393 fa3da 180a3070      	movb	1,x+,1,y+
6394                     ; 904     for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
6396 fa3de 6282          	inc	OFST-4,s
6399 fa3e0 e682          	ldab	OFST-4,s
6400 fa3e2 c108          	cmpb	#8
6401 fa3e4 25f4          	blo	L3073
6402 fa3e6 6e83          	stx	OFST-3,s
6403                     ; 907     pq = (OS_Q *)pevent->OSEventPtr;
6405 fa3e8 ed86          	ldy	OFST+0,s
6406 fa3ea ed41          	ldy	1,y
6407 fa3ec 6d80          	sty	OFST-6,s
6408                     ; 908     if (pq->OSQEntries > 0u) {
6410 fa3ee ec4c          	ldd	12,y
6411 fa3f0 2704          	beq	L1173
6412                     ; 909         p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
6414 fa3f2 eceb0008      	ldd	[8,y]
6416 fa3f6               L1173:
6417                     ; 911         p_q_data->OSMsg = (void *)0;
6419 fa3f6 ed8a          	ldy	OFST+4,s
6420 fa3f8 6c40          	std	0,y
6421                     ; 913     p_q_data->OSNMsgs = pq->OSQEntries;
6423 fa3fa ee80          	ldx	OFST-6,s
6424 fa3fc 18020c42      	movw	12,x,2,y
6425                     ; 914     p_q_data->OSQSize = pq->OSQSize;
6427 fa400 18020a44      	movw	10,x,4,y
6428                     ; 915     OS_EXIT_CRITICAL();
6430 fa404 e685          	ldab	OFST-1,s
6431 fa406 87            	clra	
6432 fa407 164b54        	jsr	_OS_CPU_SR_Restore
6434                     ; 916     return (OS_ERR_NONE);
6436 fa40a c7            	clrb	
6438 fa40b 20a1          	bra	L05
6503                     ; 936 _NEAR void  OS_QInit (void)
6503                     ; 937 {
6504                     	switch	.text
6505 fa40d               _OS_QInit:
6507 fa40d 1b9a          	leas	-6,s
6508       00000006      OFST:	set	6
6511                     ; 951     OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
6513 fa40f cc0038        	ldd	#56
6514 fa412 3b            	pshd	
6515 fa413 cc13b1        	ldd	#_OSQTbl
6516 fa416 164907        	jsr	_OS_MemClr
6518 fa419 1b82          	leas	2,s
6519                     ; 952     for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
6521 fa41b 87            	clra	
6522 fa41c c7            	clrb	
6523 fa41d b746          	tfr	d,y
6524 fa41f 6d80          	sty	OFST-6,s
6525 fa421               L7473:
6526                     ; 953         ix_next = ix + 1u;
6528 fa421 02            	iny	
6529 fa422 6d82          	sty	OFST-4,s
6530                     ; 954         pq1 = &OSQTbl[ix];
6532 fa424 cd000e        	ldy	#14
6533 fa427 13            	emul	
6534 fa428 c313b1        	addd	#_OSQTbl
6535 fa42b 6c84          	std	OFST-2,s
6536                     ; 955         pq2 = &OSQTbl[ix_next];
6538 fa42d ec82          	ldd	OFST-4,s
6539 fa42f cd000e        	ldy	#14
6540 fa432 13            	emul	
6541 fa433 c313b1        	addd	#_OSQTbl
6542 fa436 6c82          	std	OFST-4,s
6543                     ; 956         pq1->OSQPtr = pq2;
6545 fa438 6cf30004      	std	[OFST-2,s]
6546                     ; 952     for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
6548 fa43c ed80          	ldy	OFST-6,s
6549 fa43e 02            	iny	
6552 fa43f b764          	tfr	y,d
6553 fa441 6c80          	std	OFST-6,s
6554 fa443 8c0003        	cpd	#3
6555 fa446 25d9          	blo	L7473
6556                     ; 958     pq1         = &OSQTbl[ix];
6558 fa448 cd000e        	ldy	#14
6559 fa44b 13            	emul	
6560 fa44c c313b1        	addd	#_OSQTbl
6561 fa44f 6c84          	std	OFST-2,s
6562                     ; 959     pq1->OSQPtr = (OS_Q *)0;
6564 fa451 87            	clra	
6565 fa452 c7            	clrb	
6566 fa453 6cf30004      	std	[OFST-2,s]
6567                     ; 960     OSQFreeList = &OSQTbl[0];
6569 fa457 cc13b1        	ldd	#_OSQTbl
6570 fa45a 7c13e9        	std	_OSQFreeList
6571                     ; 962 }
6574 fa45d 1b86          	leas	6,s
6575 fa45f 3d            	rts	
6587                     	xref	_OS_Sched
6588                     	xdef	_OS_QInit
6589                     	xref	_OS_MemClr
6590                     	xref	_OS_EventWaitListInit
6591                     	xref	_OS_EventTaskRemove
6592                     	xref	_OS_EventTaskWait
6593                     	xref	_OS_EventTaskRdy
6594                     	xdef	_OSQQuery
6595                     	xdef	_OSQPostOpt
6596                     	xdef	_OSQPostFront
6597                     	xdef	_OSQPost
6598                     	xdef	_OSQPendAbort
6599                     	xdef	_OSQPend
6600                     	xdef	_OSQFlush
6601                     	xdef	_OSQDel
6602                     	xdef	_OSQCreate
6603                     	xdef	_OSQAccept
6604                     	xref	_OSQTbl
6605                     	xref	_OSQFreeList
6606                     	xref	_OSTCBCur
6607                     	xref	_OSLockNesting
6608                     	xref	_OSIntNesting
6609                     	xref	_OSEventFreeList
6610                     	xref	_OS_CPU_SR_Restore
6611                     	xref	_OS_CPU_SR_Save
6612                     .const:	section	.data
6613 fb73f               L7503:
6614 fb73f 3f00          	dc.b	"?",0
6635                     	end
