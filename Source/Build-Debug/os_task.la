   1                     ; C Compiler for 68HCS12 [COSMIC Software]
   2                     ; Parser V4.11.9 - 08 Feb 2017
   3                     ; Generator V4.8.12 - 22 Feb 2017
   4                     ; Optimizer V4.7.11 - 22 Feb 2017
4504                     ; 60 _NEAR INT8U  OSTaskChangePrio (INT8U  oldprio,
4504                     ; 61                               INT8U  newprio)
4504                     ; 62 {
4505                     	switch	.text
4506 fa7ab               _OSTaskChangePrio:
4508 fa7ab 3b            	pshd	
4509 fa7ac 1b92          	leas	-14,s
4510       0000000e      OFST:	set	14
4513                     ; 78     OS_CPU_SR  cpu_sr = 0u;                                 /* Storage for CPU status register         */
4515                     ; 83     if (oldprio >= OS_LOWEST_PRIO) {
4517 fa7ae c13f          	cmpb	#63
4518 fa7b0 2503          	blo	L1513
4519                     ; 84         if (oldprio != OS_PRIO_SELF) {
4521 fa7b2 52            	incb	
4522                     ; 85             return (OS_ERR_PRIO_INVALID);
4525 fa7b3 2607          	bne	LC001
4526 fa7b5               L1513:
4527                     ; 88     if (newprio >= OS_LOWEST_PRIO) {
4529 fa7b5 e6f013        	ldab	OFST+5,s
4530 fa7b8 c13f          	cmpb	#63
4531 fa7ba 2506          	blo	L5513
4532                     ; 89         return (OS_ERR_PRIO_INVALID);
4534 fa7bc               LC001:
4535 fa7bc c62a          	ldab	#42
4537 fa7be               L61:
4539 fa7be 1bf010        	leas	16,s
4540 fa7c1 3d            	rts	
4541 fa7c2               L5513:
4542                     ; 92     OS_ENTER_CRITICAL();
4544 fa7c2 164b4f        	jsr	_OS_CPU_SR_Save
4546 fa7c5 6b8c          	stab	OFST-2,s
4547                     ; 93     if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
4549 fa7c7 e6f013        	ldab	OFST+5,s
4550 fa7ca 87            	clra	
4551 fa7cb 59            	lsld	
4552 fa7cc b746          	tfr	d,y
4553 fa7ce ecea1502      	ldd	_OSTCBPrioTbl,y
4554 fa7d2 270a          	beq	L7513
4555                     ; 94         OS_EXIT_CRITICAL();
4557 fa7d4 e68c          	ldab	OFST-2,s
4558 fa7d6 87            	clra	
4559 fa7d7 164b54        	jsr	_OS_CPU_SR_Restore
4561                     ; 95         return (OS_ERR_PRIO_EXIST);
4563 fa7da c628          	ldab	#40
4565 fa7dc 20e0          	bra	L61
4566 fa7de               L7513:
4567                     ; 97     if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
4569 fa7de e68f          	ldab	OFST+1,s
4570 fa7e0 c1ff          	cmpb	#255
4571 fa7e2 2608          	bne	L1613
4572                     ; 98         oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
4574 fa7e4 fd1588        	ldy	_OSTCBCur
4575 fa7e7 e6e824        	ldab	36,y
4576 fa7ea 6b8f          	stab	OFST+1,s
4577 fa7ec               L1613:
4578                     ; 100     ptcb = OSTCBPrioTbl[oldprio];
4580 fa7ec 87            	clra	
4581 fa7ed 59            	lsld	
4582 fa7ee b746          	tfr	d,y
4583 fa7f0 ecea1502      	ldd	_OSTCBPrioTbl,y
4584 fa7f4 6c82          	std	OFST-12,s
4585                     ; 101     if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
4587 fa7f6 2609          	bne	L3613
4588                     ; 102         OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
4590 fa7f8 e68c          	ldab	OFST-2,s
4591 fa7fa 164b54        	jsr	_OS_CPU_SR_Restore
4593                     ; 103         return (OS_ERR_PRIO);
4595 fa7fd c629          	ldab	#41
4597 fa7ff 20bd          	bra	L61
4598 fa801               L3613:
4599                     ; 105     if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
4601 fa801 042409        	dbne	d,L5613
4602                     ; 106         OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
4604 fa804 e68c          	ldab	OFST-2,s
4605 fa806 164b54        	jsr	_OS_CPU_SR_Restore
4607                     ; 107         return (OS_ERR_TASK_NOT_EXIST);
4609 fa809 c643          	ldab	#67
4611 fa80b 20b1          	bra	L61
4612 fa80d               L5613:
4613                     ; 110     y_new                 = (INT8U)(newprio >> 3u);         /* Yes, compute new TCB fields             */
4615 fa80d e6f013        	ldab	OFST+5,s
4616 fa810 54            	lsrb	
4617 fa811 54            	lsrb	
4618 fa812 54            	lsrb	
4619 fa813 6b87          	stab	OFST-7,s
4620                     ; 111     x_new                 = (INT8U)(newprio & 0x07u);
4622 fa815 e6f013        	ldab	OFST+5,s
4623 fa818 c407          	andb	#7
4624 fa81a 6b8d          	stab	OFST-1,s
4625                     ; 116     bity_new              = (OS_PRIO)(1uL << y_new);
4627 fa81c c601          	ldab	#1
4628 fa81e a687          	ldaa	OFST-7,s
4629 fa820 2704          	beq	L6
4630 fa822               L01:
4631 fa822 58            	lslb	
4632 fa823 0430fc        	dbne	a,L01
4633 fa826               L6:
4634 fa826 6b88          	stab	OFST-6,s
4635                     ; 117     bitx_new              = (OS_PRIO)(1uL << x_new);
4637 fa828 c601          	ldab	#1
4638 fa82a a68d          	ldaa	OFST-1,s
4639 fa82c 2704          	beq	L21
4640 fa82e               L41:
4641 fa82e 58            	lslb	
4642 fa82f 0430fc        	dbne	a,L41
4643 fa832               L21:
4644 fa832 6b89          	stab	OFST-5,s
4645                     ; 119     OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
4647 fa834 e68f          	ldab	OFST+1,s
4648 fa836 87            	clra	
4649 fa837 59            	lsld	
4650 fa838 b746          	tfr	d,y
4651 fa83a 87            	clra	
4652 fa83b c7            	clrb	
4653 fa83c 6cea1502      	std	_OSTCBPrioTbl,y
4654                     ; 120     OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
4656 fa840 e6f013        	ldab	OFST+5,s
4657 fa843 59            	lsld	
4658 fa844 b746          	tfr	d,y
4659 fa846 ec82          	ldd	OFST-12,s
4660 fa848 6cea1502      	std	_OSTCBPrioTbl,y
4661                     ; 121     y_old                 =  ptcb->OSTCBY;
4663 fa84c b746          	tfr	d,y
4664 fa84e e6e826        	ldab	38,y
4665 fa851 6b84          	stab	OFST-10,s
4666                     ; 122     bity_old              =  ptcb->OSTCBBitY;
4668 fa853 e6e828        	ldab	40,y
4669 fa856 6b8b          	stab	OFST-3,s
4670                     ; 123     bitx_old              =  ptcb->OSTCBBitX;
4672 fa858 e6e827        	ldab	39,y
4673 fa85b 6b8a          	stab	OFST-4,s
4674                     ; 124     if ((OSRdyTbl[y_old] &   bitx_old) != 0u) {             /* If task is ready make it not            */
4676 fa85d e684          	ldab	OFST-10,s
4677 fa85f b796          	exg	b,y
4678 fa861 e6ea1630      	ldab	_OSRdyTbl,y
4679 fa865 e48a          	andb	OFST-4,s
4680 fa867 272c          	beq	L7613
4681                     ; 125          OSRdyTbl[y_old] &= (OS_PRIO)~bitx_old;
4683 fa869 e68a          	ldab	OFST-4,s
4684 fa86b 51            	comb	
4685 fa86c e4ea1630      	andb	_OSRdyTbl,y
4686 fa870 6bea1630      	stab	_OSRdyTbl,y
4687                     ; 126          if (OSRdyTbl[y_old] == 0u) {
4689 fa874 2609          	bne	L1713
4690                     ; 127              OSRdyGrp &= (OS_PRIO)~bity_old;
4692 fa876 e68b          	ldab	OFST-3,s
4693 fa878 51            	comb	
4694 fa879 f41638        	andb	_OSRdyGrp
4695 fa87c 7b1638        	stab	_OSRdyGrp
4696 fa87f               L1713:
4697                     ; 129          OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
4699 fa87f e688          	ldab	OFST-6,s
4700 fa881 fa1638        	orab	_OSRdyGrp
4701 fa884 7b1638        	stab	_OSRdyGrp
4702                     ; 130          OSRdyTbl[y_new] |= bitx_new;
4704 fa887 e687          	ldab	OFST-7,s
4705 fa889 b796          	exg	b,y
4706 fa88b e689          	ldab	OFST-5,s
4707 fa88d eaea1630      	orab	_OSRdyTbl,y
4708 fa891 6bea1630      	stab	_OSRdyTbl,y
4710 fa895               L7613:
4711                     ; 135     pevent = ptcb->OSTCBEventPtr;
4713 fa895 ed82          	ldy	OFST-12,s
4714 fa897 ede812        	ldy	18,y
4715 fa89a 6d80          	sty	OFST-14,s
4716                     ; 136     if (pevent != (OS_EVENT *)0) {
4718 fa89c 2730          	beq	L3713
4719                     ; 137         pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;    /* Remove old task prio from wait list     */
4721 fa89e e684          	ldab	OFST-10,s
4722 fa8a0 19ed          	leay	b,y
4723 fa8a2 e68a          	ldab	OFST-4,s
4724 fa8a4 51            	comb	
4725 fa8a5 e446          	andb	6,y
4726 fa8a7 6b46          	stab	6,y
4727                     ; 138         if (pevent->OSEventTbl[y_old] == 0u) {
4729 fa8a9 ed80          	ldy	OFST-14,s
4730 fa8ab e684          	ldab	OFST-10,s
4731 fa8ad 19ed          	leay	b,y
4732 fa8af e646          	ldab	6,y
4733 fa8b1 2609          	bne	L5713
4734                     ; 139             pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
4736 fa8b3 ed80          	ldy	OFST-14,s
4737 fa8b5 e68b          	ldab	OFST-3,s
4738 fa8b7 51            	comb	
4739 fa8b8 e445          	andb	5,y
4740 fa8ba 6b45          	stab	5,y
4741 fa8bc               L5713:
4742                     ; 141         pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
4744 fa8bc ed80          	ldy	OFST-14,s
4745 fa8be e688          	ldab	OFST-6,s
4746 fa8c0 ea45          	orab	5,y
4747 fa8c2 6b45          	stab	5,y
4748                     ; 142         pevent->OSEventTbl[y_new] |= bitx_new;
4750 fa8c4 e687          	ldab	OFST-7,s
4751 fa8c6 19ed          	leay	b,y
4752 fa8c8 e689          	ldab	OFST-5,s
4753 fa8ca ea46          	orab	6,y
4754 fa8cc 6b46          	stab	6,y
4755 fa8ce               L3713:
4756                     ; 145     if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
4758 fa8ce ed82          	ldy	OFST-12,s
4759 fa8d0 ece814        	ldd	20,y
4760 fa8d3 273e          	beq	L7713
4761                     ; 146         pevents =  ptcb->OSTCBEventMultiPtr;
4763 fa8d5 6c85          	std	OFST-9,s
4764                     ; 147         pevent  = *pevents;
4766 fa8d7 ecf30005      	ldd	[OFST-9,s]
4768 fa8db 202e          	bra	L5023
4769 fa8dd               L1023:
4770                     ; 149             pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;   /* Remove old task prio from wait lists */
4772 fa8dd e684          	ldab	OFST-10,s
4773 fa8df 19ed          	leay	b,y
4774 fa8e1 e68a          	ldab	OFST-4,s
4775 fa8e3 51            	comb	
4776 fa8e4 e446          	andb	6,y
4777 fa8e6 6b46          	stab	6,y
4778                     ; 150             if (pevent->OSEventTbl[y_old] == 0u) {
4780 fa8e8 2609          	bne	L1123
4781                     ; 151                 pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
4783 fa8ea ed80          	ldy	OFST-14,s
4784 fa8ec e68b          	ldab	OFST-3,s
4785 fa8ee 51            	comb	
4786 fa8ef e445          	andb	5,y
4787 fa8f1 6b45          	stab	5,y
4788 fa8f3               L1123:
4789                     ; 153             pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
4791 fa8f3 ed80          	ldy	OFST-14,s
4792 fa8f5 e688          	ldab	OFST-6,s
4793 fa8f7 ea45          	orab	5,y
4794 fa8f9 6b45          	stab	5,y
4795                     ; 154             pevent->OSEventTbl[y_new] |= bitx_new;
4797 fa8fb e687          	ldab	OFST-7,s
4798 fa8fd 19ed          	leay	b,y
4799 fa8ff e689          	ldab	OFST-5,s
4800 fa901 ea46          	orab	6,y
4801 fa903 6b46          	stab	6,y
4802                     ; 155             pevents++;
4804 fa905 ed85          	ldy	OFST-9,s
4805                     ; 156             pevent                     = *pevents;
4807 fa907 ec61          	ldd	2,+y
4808 fa909 6d85          	sty	OFST-9,s
4809 fa90b               L5023:
4810 fa90b 6c80          	std	OFST-14,s
4811                     ; 148         while (pevent != (OS_EVENT *)0) {
4813 fa90d ed80          	ldy	OFST-14,s
4814 fa90f 26cc          	bne	L1023
4815 fa911 ed82          	ldy	OFST-12,s
4816 fa913               L7713:
4817                     ; 162     ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
4819 fa913 e6f013        	ldab	OFST+5,s
4820 fa916 6be824        	stab	36,y
4821                     ; 163     ptcb->OSTCBY    = y_new;
4823 fa919 e687          	ldab	OFST-7,s
4824 fa91b 6be826        	stab	38,y
4825                     ; 164     ptcb->OSTCBX    = x_new;
4827 fa91e e68d          	ldab	OFST-1,s
4828 fa920 6be825        	stab	37,y
4829                     ; 165     ptcb->OSTCBBitY = bity_new;
4831 fa923 e688          	ldab	OFST-6,s
4832 fa925 6be828        	stab	40,y
4833                     ; 166     ptcb->OSTCBBitX = bitx_new;
4835 fa928 e689          	ldab	OFST-5,s
4836 fa92a 6be827        	stab	39,y
4837                     ; 167     OS_EXIT_CRITICAL();
4839 fa92d e68c          	ldab	OFST-2,s
4840 fa92f 87            	clra	
4841 fa930 164b54        	jsr	_OS_CPU_SR_Restore
4843                     ; 168     if (OSRunning == OS_TRUE) {
4845 fa933 f6162f        	ldab	_OSRunning
4846 fa936 042103        	dbne	b,L3123
4847                     ; 169         OS_Sched();                                         /* Find new highest priority task          */
4849 fa939 164933        	jsr	_OS_Sched
4851 fa93c               L3123:
4852                     ; 171     return (OS_ERR_NONE);
4854 fa93c c7            	clrb	
4856 fa93d 0667be        	bra	L61
4950                     ; 219 _NEAR INT8U  OSTaskCreate (void   (*task)(void *p_arg),
4950                     ; 220                           void    *p_arg,
4950                     ; 221                           OS_STK  *ptos,
4950                     ; 222                           INT8U    prio)
4950                     ; 223 {
4951                     	switch	.text
4952 fa940               _OSTaskCreate:
4954 fa940 3b            	pshd	
4955 fa941 1b9c          	leas	-4,s
4956       00000004      OFST:	set	4
4959                     ; 227     OS_CPU_SR   cpu_sr = 0u;
4961                     ; 240     if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
4963 fa943 e68d          	ldab	OFST+9,s
4964 fa945 c13f          	cmpb	#63
4965 fa947 2304          	bls	L5523
4966                     ; 241         return (OS_ERR_PRIO_INVALID);
4968 fa949 c62a          	ldab	#42
4970 fa94b 2010          	bra	L22
4971 fa94d               L5523:
4972                     ; 244     OS_ENTER_CRITICAL();
4974 fa94d 164b4f        	jsr	_OS_CPU_SR_Save
4976 fa950 6b80          	stab	OFST-4,s
4977                     ; 245     if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
4979 fa952 b6163c        	ldaa	_OSIntNesting
4980 fa955 2709          	beq	L7523
4981                     ; 246         OS_EXIT_CRITICAL();
4983 fa957 87            	clra	
4984 fa958 164b54        	jsr	_OS_CPU_SR_Restore
4986                     ; 247         return (OS_ERR_TASK_CREATE_ISR);
4988 fa95b c63c          	ldab	#60
4990 fa95d               L22:
4992 fa95d 1b86          	leas	6,s
4993 fa95f 3d            	rts	
4994 fa960               L7523:
4995                     ; 249     if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
4997 fa960 e68d          	ldab	OFST+9,s
4998 fa962 59            	lsld	
4999 fa963 b746          	tfr	d,y
5000 fa965 ecea1502      	ldd	_OSTCBPrioTbl,y
5001 fa969 265b          	bne	L1623
5002                     ; 250         OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
5004 fa96b cc0001        	ldd	#1
5005 fa96e 6cea1502      	std	_OSTCBPrioTbl,y
5006                     ; 252         OS_EXIT_CRITICAL();
5008 fa972 e680          	ldab	OFST-4,s
5009 fa974 164b54        	jsr	_OS_CPU_SR_Restore
5011                     ; 253         psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
5013 fa977 87            	clra	
5014 fa978 c7            	clrb	
5015 fa979 3b            	pshd	
5016 fa97a ec8c          	ldd	OFST+8,s
5017 fa97c 3b            	pshd	
5018 fa97d ec8c          	ldd	OFST+8,s
5019 fa97f 3b            	pshd	
5020 fa980 ec8a          	ldd	OFST+6,s
5021 fa982 164bc5        	jsr	_OSTaskStkInit
5023 fa985 1b86          	leas	6,s
5024 fa987 6c82          	std	OFST-2,s
5025                     ; 254         err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
5027 fa989 87            	clra	
5028 fa98a c7            	clrb	
5029 fa98b 3b            	pshd	
5030 fa98c 3b            	pshd	
5031 fa98d 3b            	pshd	
5032 fa98e 3b            	pshd	
5033 fa98f 3b            	pshd	
5034 fa990 3b            	pshd	
5035 fa991 ec8e          	ldd	OFST+10,s
5036 fa993 3b            	pshd	
5037 fa994 e6f01b        	ldab	OFST+23,s
5038 fa997 87            	clra	
5039 fa998 164a31        	jsr	_OS_TCBInit
5041 fa99b 1b8e          	leas	14,s
5042 fa99d 6b81          	stab	OFST-3,s
5043                     ; 255         if (err == OS_ERR_NONE) {
5045 fa99f 260b          	bne	L3623
5046                     ; 257             if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
5049 fa9a1 f6162f        	ldab	_OSRunning
5050 fa9a4 04211b        	dbne	b,L7623
5051                     ; 258                 OS_Sched();
5053 fa9a7 164933        	jsr	_OS_Sched
5055 fa9aa 2016          	bra	L7623
5056 fa9ac               L3623:
5057                     ; 262             OS_ENTER_CRITICAL();
5060 fa9ac 164b4f        	jsr	_OS_CPU_SR_Save
5062 fa9af 6b80          	stab	OFST-4,s
5063                     ; 263             OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
5065 fa9b1 e68d          	ldab	OFST+9,s
5066 fa9b3 87            	clra	
5067 fa9b4 59            	lsld	
5068 fa9b5 b746          	tfr	d,y
5069 fa9b7 87            	clra	
5070 fa9b8 c7            	clrb	
5071 fa9b9 6cea1502      	std	_OSTCBPrioTbl,y
5072                     ; 264             OS_EXIT_CRITICAL();
5074 fa9bd e680          	ldab	OFST-4,s
5075 fa9bf 164b54        	jsr	_OS_CPU_SR_Restore
5077 fa9c2               L7623:
5078                     ; 266         return (err);
5080 fa9c2 e681          	ldab	OFST-3,s
5082 fa9c4 2008          	bra	L42
5083 fa9c6               L1623:
5084                     ; 268     OS_EXIT_CRITICAL();
5086 fa9c6 e680          	ldab	OFST-4,s
5087 fa9c8 87            	clra	
5088 fa9c9 164b54        	jsr	_OS_CPU_SR_Restore
5090                     ; 269     return (OS_ERR_PRIO_EXIST);
5092 fa9cc c628          	ldab	#40
5094 fa9ce               L42:
5096 fa9ce 1b86          	leas	6,s
5097 fa9d0 3d            	rts	
5233                     ; 347 _NEAR INT8U  OSTaskCreateExt (void   (*task)(void *p_arg),
5233                     ; 348                              void    *p_arg,
5233                     ; 349                              OS_STK  *ptos,
5233                     ; 350                              INT8U    prio,
5233                     ; 351                              INT16U   id,
5233                     ; 352                              OS_STK  *pbos,
5233                     ; 353                              INT32U   stk_size,
5233                     ; 354                              void    *pext,
5233                     ; 355                              INT16U   opt)
5233                     ; 356 {
5234                     	switch	.text
5235 fa9d1               _OSTaskCreateExt:
5237 fa9d1 3b            	pshd	
5238 fa9d2 1b9c          	leas	-4,s
5239       00000004      OFST:	set	4
5242                     ; 360     OS_CPU_SR   cpu_sr = 0u;
5244                     ; 373     if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
5246 fa9d4 e68d          	ldab	OFST+9,s
5247 fa9d6 c13f          	cmpb	#63
5248 fa9d8 2304          	bls	L7433
5249                     ; 374         return (OS_ERR_PRIO_INVALID);
5251 fa9da c62a          	ldab	#42
5253 fa9dc 2010          	bra	L03
5254 fa9de               L7433:
5255                     ; 377     OS_ENTER_CRITICAL();
5257 fa9de 164b4f        	jsr	_OS_CPU_SR_Save
5259 fa9e1 6b80          	stab	OFST-4,s
5260                     ; 378     if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
5262 fa9e3 b6163c        	ldaa	_OSIntNesting
5263 fa9e6 2709          	beq	L1533
5264                     ; 379         OS_EXIT_CRITICAL();
5266 fa9e8 87            	clra	
5267 fa9e9 164b54        	jsr	_OS_CPU_SR_Restore
5269                     ; 380         return (OS_ERR_TASK_CREATE_ISR);
5271 fa9ec c63c          	ldab	#60
5273 fa9ee               L03:
5275 fa9ee 1b86          	leas	6,s
5276 fa9f0 3d            	rts	
5277 fa9f1               L1533:
5278                     ; 382     if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
5280 fa9f1 e68d          	ldab	OFST+9,s
5281 fa9f3 59            	lsld	
5282 fa9f4 b746          	tfr	d,y
5283 fa9f6 ecea1502      	ldd	_OSTCBPrioTbl,y
5284 fa9fa 18260080      	bne	L3533
5285                     ; 383         OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
5287 fa9fe cc0001        	ldd	#1
5288 faa01 6cea1502      	std	_OSTCBPrioTbl,y
5289                     ; 385         OS_EXIT_CRITICAL();
5291 faa05 e680          	ldab	OFST-4,s
5292 faa07 164b54        	jsr	_OS_CPU_SR_Restore
5294                     ; 388         OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
5296 faa0a ecf018        	ldd	OFST+20,s
5297 faa0d 3b            	pshd	
5298 faa0e ecf016        	ldd	OFST+18,s
5299 faa11 3b            	pshd	
5300 faa12 ecf016        	ldd	OFST+18,s
5301 faa15 3b            	pshd	
5302 faa16 ecf016        	ldd	OFST+18,s
5303 faa19 166f4e        	jsr	_OS_TaskStkClr
5305 faa1c 1b86          	leas	6,s
5306                     ; 391         psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
5308 faa1e ecf018        	ldd	OFST+20,s
5309 faa21 3b            	pshd	
5310 faa22 ec8c          	ldd	OFST+8,s
5311 faa24 3b            	pshd	
5312 faa25 ec8c          	ldd	OFST+8,s
5313 faa27 3b            	pshd	
5314 faa28 ec8a          	ldd	OFST+6,s
5315 faa2a 164bc5        	jsr	_OSTaskStkInit
5317 faa2d 1b86          	leas	6,s
5318 faa2f 6c82          	std	OFST-2,s
5319                     ; 392         err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
5321 faa31 ecf018        	ldd	OFST+20,s
5322 faa34 3b            	pshd	
5323 faa35 ecf018        	ldd	OFST+20,s
5324 faa38 3b            	pshd	
5325 faa39 ecf018        	ldd	OFST+20,s
5326 faa3c 3b            	pshd	
5327 faa3d ecf018        	ldd	OFST+20,s
5328 faa40 3b            	pshd	
5329 faa41 ecf016        	ldd	OFST+18,s
5330 faa44 3b            	pshd	
5331 faa45 ecf01a        	ldd	OFST+22,s
5332 faa48 3b            	pshd	
5333 faa49 ec8e          	ldd	OFST+10,s
5334 faa4b 3b            	pshd	
5335 faa4c e6f01b        	ldab	OFST+23,s
5336 faa4f 87            	clra	
5337 faa50 164a31        	jsr	_OS_TCBInit
5339 faa53 1b8e          	leas	14,s
5340 faa55 6b81          	stab	OFST-3,s
5341                     ; 393         if (err == OS_ERR_NONE) {
5343 faa57 260b          	bne	L5533
5344                     ; 395             if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
5347 faa59 f6162f        	ldab	_OSRunning
5348 faa5c 04211b        	dbne	b,L1633
5349                     ; 396                 OS_Sched();
5351 faa5f 164933        	jsr	_OS_Sched
5353 faa62 2016          	bra	L1633
5354 faa64               L5533:
5355                     ; 399             OS_ENTER_CRITICAL();
5357 faa64 164b4f        	jsr	_OS_CPU_SR_Save
5359 faa67 6b80          	stab	OFST-4,s
5360                     ; 400             OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
5362 faa69 e68d          	ldab	OFST+9,s
5363 faa6b 87            	clra	
5364 faa6c 59            	lsld	
5365 faa6d b746          	tfr	d,y
5366 faa6f 87            	clra	
5367 faa70 c7            	clrb	
5368 faa71 6cea1502      	std	_OSTCBPrioTbl,y
5369                     ; 401             OS_EXIT_CRITICAL();
5371 faa75 e680          	ldab	OFST-4,s
5372 faa77 164b54        	jsr	_OS_CPU_SR_Restore
5374 faa7a               L1633:
5375                     ; 403         return (err);
5377 faa7a e681          	ldab	OFST-3,s
5379 faa7c 2008          	bra	L23
5380 faa7e               L3533:
5381                     ; 405     OS_EXIT_CRITICAL();
5383 faa7e e680          	ldab	OFST-4,s
5384 faa80 87            	clra	
5385 faa81 164b54        	jsr	_OS_CPU_SR_Restore
5387                     ; 406     return (OS_ERR_PRIO_EXIST);
5389 faa84 c628          	ldab	#40
5391 faa86               L23:
5393 faa86 1b86          	leas	6,s
5394 faa88 3d            	rts	
5474                     ; 450 _NEAR INT8U  OSTaskDel (INT8U prio)
5474                     ; 451 {
5475                     	switch	.text
5476 faa89               _OSTaskDel:
5478 faa89 3b            	pshd	
5479 faa8a 1b9b          	leas	-5,s
5480       00000005      OFST:	set	5
5483                     ; 457     OS_CPU_SR     cpu_sr = 0u;
5485                     ; 469     if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
5487 faa8c f6163c        	ldab	_OSIntNesting
5488 faa8f 2704          	beq	L5143
5489                     ; 470         return (OS_ERR_TASK_DEL_ISR);
5491 faa91 c640          	ldab	#64
5493 faa93 2008          	bra	L63
5494 faa95               L5143:
5495                     ; 472     if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
5497 faa95 e686          	ldab	OFST+1,s
5498 faa97 c13f          	cmpb	#63
5499 faa99 2605          	bne	L7143
5500                     ; 473         return (OS_ERR_TASK_DEL_IDLE);
5502 faa9b c63e          	ldab	#62
5504 faa9d               L63:
5506 faa9d 1b87          	leas	7,s
5507 faa9f 3d            	rts	
5508 faaa0               L7143:
5509                     ; 476     if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
5511 faaa0 2507          	blo	L1243
5512                     ; 477         if (prio != OS_PRIO_SELF) {
5514 faaa2 048104        	ibeq	b,L1243
5515                     ; 478             return (OS_ERR_PRIO_INVALID);
5517 faaa5 c62a          	ldab	#42
5519 faaa7 20f4          	bra	L63
5520 faaa9               L1243:
5521                     ; 483     OS_ENTER_CRITICAL();
5523 faaa9 164b4f        	jsr	_OS_CPU_SR_Save
5525 faaac 6b82          	stab	OFST-3,s
5526                     ; 484     if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
5528 faaae e686          	ldab	OFST+1,s
5529 faab0 c1ff          	cmpb	#255
5530 faab2 2608          	bne	L5243
5531                     ; 485         prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
5533 faab4 fd1588        	ldy	_OSTCBCur
5534 faab7 e6e824        	ldab	36,y
5535 faaba 6b86          	stab	OFST+1,s
5536 faabc               L5243:
5537                     ; 487     ptcb = OSTCBPrioTbl[prio];
5539 faabc 87            	clra	
5540 faabd 59            	lsld	
5541 faabe b746          	tfr	d,y
5542 faac0 ecea1502      	ldd	_OSTCBPrioTbl,y
5543 faac4 6c80          	std	OFST-5,s
5544                     ; 488     if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
5546 faac6 2609          	bne	L7243
5547                     ; 489         OS_EXIT_CRITICAL();
5549 faac8 e682          	ldab	OFST-3,s
5550 faaca 164b54        	jsr	_OS_CPU_SR_Restore
5552                     ; 490         return (OS_ERR_TASK_NOT_EXIST);
5554 faacd c643          	ldab	#67
5556 faacf 20cc          	bra	L63
5557 faad1               L7243:
5558                     ; 492     if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
5560 faad1 8c0001        	cpd	#1
5561 faad4 260a          	bne	L1343
5562                     ; 493         OS_EXIT_CRITICAL();
5564 faad6 e682          	ldab	OFST-3,s
5565 faad8 87            	clra	
5566 faad9 164b54        	jsr	_OS_CPU_SR_Restore
5568                     ; 494         return (OS_ERR_TASK_DEL);
5570 faadc c63d          	ldab	#61
5572 faade 20bd          	bra	L63
5573 faae0               L1343:
5574                     ; 497     OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
5576 faae0 b746          	tfr	d,y
5577 faae2 e6e826        	ldab	38,y
5578 faae5 b796          	exg	b,y
5579 faae7 ee80          	ldx	OFST-5,s
5580 faae9 e6e027        	ldab	39,x
5581 faaec 51            	comb	
5582 faaed e4ea1630      	andb	_OSRdyTbl,y
5583 faaf1 6bea1630      	stab	_OSRdyTbl,y
5584                     ; 499     if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
5587 faaf5 260c          	bne	L3343
5588                     ; 500         OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
5590 faaf7 b756          	tfr	x,y
5591 faaf9 e6e828        	ldab	40,y
5592 faafc 51            	comb	
5593 faafd f41638        	andb	_OSRdyGrp
5594 fab00 7b1638        	stab	_OSRdyGrp
5595 fab03               L3343:
5596                     ; 504     if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
5598 fab03 b756          	tfr	x,y
5599 fab05 ece812        	ldd	18,y
5600 fab08 270a          	beq	L5343
5601                     ; 505         OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
5603 fab0a 3b            	pshd	
5604 fab0b b754          	tfr	x,d
5605 fab0d 164737        	jsr	_OS_EventTaskRemove
5607 fab10 1b82          	leas	2,s
5608 fab12 ed80          	ldy	OFST-5,s
5609 fab14               L5343:
5610                     ; 508     if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
5612 fab14 ece814        	ldd	20,y
5613 fab17 270a          	beq	L7343
5614                     ; 509         OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
5616 fab19 3b            	pshd	
5617 fab1a ec82          	ldd	OFST-3,s
5618 fab1c 164764        	jsr	_OS_EventTaskRemoveMulti
5620 fab1f 1b82          	leas	2,s
5621 fab21 ed80          	ldy	OFST-5,s
5622 fab23               L7343:
5623                     ; 515     pnode = ptcb->OSTCBFlagNode;
5625 fab23 ece81a        	ldd	26,y
5626 fab26 6c83          	std	OFST-2,s
5627                     ; 516     if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
5629 fab28 2705          	beq	L1443
5630                     ; 517         OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
5632 fab2a 16528b        	jsr	_OS_FlagUnlink
5634 fab2d ed80          	ldy	OFST-5,s
5635 fab2f               L1443:
5636                     ; 521     ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
5638 fab2f 87            	clra	
5639 fab30 c7            	clrb	
5640 fab31 6ce820        	std	32,y
5641 fab34 6ce81e        	std	30,y
5642                     ; 522     ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
5644                     ; 523     ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
5646 fab37 6ce822        	std	34,y
5647                     ; 524     if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
5649 fab3a f6163b        	ldab	_OSLockNesting
5650 fab3d c1ff          	cmpb	#255
5651 fab3f 2403          	bhs	L3443
5652                     ; 525         OSLockNesting++;
5654 fab41 72163b        	inc	_OSLockNesting
5655 fab44               L3443:
5656                     ; 527     OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
5658 fab44 e682          	ldab	OFST-3,s
5659 fab46 87            	clra	
5660 fab47 164b54        	jsr	_OS_CPU_SR_Restore
5662                     ; 528     OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
5664 fab4a 1645fb        	jsr	_OS_Dummy
5666                     ; 529     OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
5668 fab4d 164b4f        	jsr	_OS_CPU_SR_Save
5670 fab50 6b82          	stab	OFST-3,s
5671                     ; 530     if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
5673 fab52 f7163b        	tst	_OSLockNesting
5674 fab55 2703          	beq	L5443
5675                     ; 531         OSLockNesting--;
5677 fab57 73163b        	dec	_OSLockNesting
5678 fab5a               L5443:
5679                     ; 533     OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
5681 fab5a ec80          	ldd	OFST-5,s
5682 fab5c 164bc1        	jsr	_OSTaskDelHook
5684                     ; 541     OSTaskCtr--;                                        /* One less task being managed                 */
5686 fab5f 73162e        	dec	_OSTaskCtr
5687                     ; 542     OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
5689 fab62 e686          	ldab	OFST+1,s
5690 fab64 87            	clra	
5691 fab65 59            	lsld	
5692 fab66 b746          	tfr	d,y
5693 fab68 87            	clra	
5694 fab69 c7            	clrb	
5695 fab6a 6cea1502      	std	_OSTCBPrioTbl,y
5696                     ; 543     if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
5698 fab6e ed80          	ldy	OFST-5,s
5699 fab70 eee810        	ldx	16,y
5700 fab73 260e          	bne	L7443
5701                     ; 544         ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
5703 fab75 ed4e          	ldy	14,y
5704 fab77 6ce810        	std	16,y
5705                     ; 545         OSTCBList                  = ptcb->OSTCBNext;
5707 fab7a ed80          	ldy	OFST-5,s
5708 fab7c 18054e1582    	movw	14,y,_OSTCBList
5710 fab81 2012          	bra	L1543
5711 fab83               L7443:
5712                     ; 547         ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
5714 fab83 18024e0e      	movw	14,y,14,x
5715                     ; 548         ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
5717 fab87 ee4e          	ldx	14,y
5718 fab89 1ae010        	leax	16,x
5719 fab8c 19e810        	leay	16,y
5720 fab8f 18024000      	movw	0,y,0,x
5721 fab93 ed80          	ldy	OFST-5,s
5722 fab95               L1543:
5723                     ; 550     ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
5725 fab95 18014e1586    	movw	_OSTCBFreeList,14,y
5726                     ; 551     OSTCBFreeList       = ptcb;
5728 fab9a 7d1586        	sty	_OSTCBFreeList
5729                     ; 553     ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
5731 fab9d cc7743        	ldd	#L3543
5732 faba0 6ce83c        	std	60,y
5733                     ; 555     OS_EXIT_CRITICAL();
5735 faba3 e682          	ldab	OFST-3,s
5736 faba5 87            	clra	
5737 faba6 164b54        	jsr	_OS_CPU_SR_Restore
5739                     ; 556     if (OSRunning == OS_TRUE) {
5741 faba9 f6162f        	ldab	_OSRunning
5742 fabac 042103        	dbne	b,L5543
5743                     ; 557         OS_Sched();                                     /* Find new highest priority task              */
5745 fabaf 164933        	jsr	_OS_Sched
5747 fabb2               L5543:
5748                     ; 559     return (OS_ERR_NONE);
5750 fabb2 c7            	clrb	
5753 fabb3 1b87          	leas	7,s
5754 fabb5 3d            	rts	
5815                     ; 613 _NEAR INT8U  OSTaskDelReq (INT8U prio)
5815                     ; 614 {
5816                     	switch	.text
5817 fabb6               _OSTaskDelReq:
5819 fabb6 3b            	pshd	
5820 fabb7 1b9c          	leas	-4,s
5821       00000004      OFST:	set	4
5824                     ; 618     OS_CPU_SR  cpu_sr = 0u;
5826                     ; 630     if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
5828 fabb9 c13f          	cmpb	#63
5829 fabbb 2604          	bne	L5053
5830                     ; 631         return (OS_ERR_TASK_DEL_IDLE);
5832 fabbd c63e          	ldab	#62
5834 fabbf 200c          	bra	L24
5835 fabc1               L5053:
5836                     ; 634     if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
5838 fabc1 e685          	ldab	OFST+1,s
5839 fabc3 c13f          	cmpb	#63
5840 fabc5 2509          	blo	L7053
5841                     ; 635         if (prio != OS_PRIO_SELF) {
5843 fabc7 c1ff          	cmpb	#255
5844 fabc9 2705          	beq	L7053
5845                     ; 636             return (OS_ERR_PRIO_INVALID);
5847 fabcb c62a          	ldab	#42
5849 fabcd               L24:
5851 fabcd 1b86          	leas	6,s
5852 fabcf 3d            	rts	
5853 fabd0               L7053:
5854                     ; 640     if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
5856 fabd0 04a117        	ibne	b,L3153
5857                     ; 641         OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
5859 fabd3 164b4f        	jsr	_OS_CPU_SR_Save
5861 fabd6 6b80          	stab	OFST-4,s
5862                     ; 642         stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
5864 fabd8 fd1588        	ldy	_OSTCBCur
5865 fabdb e6e829        	ldab	41,y
5866 fabde 6b83          	stab	OFST-1,s
5867                     ; 643         OS_EXIT_CRITICAL();
5869 fabe0 e680          	ldab	OFST-4,s
5870 fabe2 87            	clra	
5871 fabe3 164b54        	jsr	_OS_CPU_SR_Restore
5873                     ; 644         return (stat);
5875 fabe6 e683          	ldab	OFST-1,s
5877 fabe8 20e3          	bra	L24
5878 fabea               L3153:
5879                     ; 646     OS_ENTER_CRITICAL();
5881 fabea 164b4f        	jsr	_OS_CPU_SR_Save
5883 fabed 6b80          	stab	OFST-4,s
5884                     ; 647     ptcb = OSTCBPrioTbl[prio];
5886 fabef e685          	ldab	OFST+1,s
5887 fabf1 87            	clra	
5888 fabf2 59            	lsld	
5889 fabf3 b746          	tfr	d,y
5890 fabf5 ecea1502      	ldd	_OSTCBPrioTbl,y
5891 fabf9 6c81          	std	OFST-3,s
5892                     ; 648     if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
5894 fabfb 2609          	bne	L5153
5895                     ; 649         OS_EXIT_CRITICAL();
5897 fabfd e680          	ldab	OFST-4,s
5898 fabff 164b54        	jsr	_OS_CPU_SR_Restore
5900                     ; 650         return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
5902 fac02 c643          	ldab	#67
5904 fac04 20c7          	bra	L24
5905 fac06               L5153:
5906                     ; 652     if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
5908 fac06 042409        	dbne	d,L7153
5909                     ; 653         OS_EXIT_CRITICAL();
5911 fac09 e680          	ldab	OFST-4,s
5912 fac0b 164b54        	jsr	_OS_CPU_SR_Restore
5914                     ; 654         return (OS_ERR_TASK_DEL);
5916 fac0e c63d          	ldab	#61
5918 fac10 20bb          	bra	L24
5919 fac12               L7153:
5920                     ; 656     ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
5922 fac12 c63f          	ldab	#63
5923 fac14 ee81          	ldx	OFST-3,s
5924 fac16 6be029        	stab	41,x
5925                     ; 657     OS_EXIT_CRITICAL();
5927 fac19 e680          	ldab	OFST-4,s
5928 fac1b 87            	clra	
5929 fac1c 164b54        	jsr	_OS_CPU_SR_Restore
5931                     ; 658     return (OS_ERR_NONE);
5933 fac1f c7            	clrb	
5935 fac20 20ab          	bra	L24
6019                     ; 688 _NEAR INT8U  OSTaskNameGet (INT8U    prio,
6019                     ; 689                            INT8U  **pname,
6019                     ; 690                            INT8U   *perr)
6019                     ; 691 {
6020                     	switch	.text
6021 fac22               _OSTaskNameGet:
6023 fac22 3b            	pshd	
6024 fac23 1b9c          	leas	-4,s
6025       00000004      OFST:	set	4
6028                     ; 695     OS_CPU_SR  cpu_sr = 0u;
6030                     ; 708     if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
6032 fac25 c13f          	cmpb	#63
6033 fac27 2307          	bls	L7553
6034                     ; 709         if (prio != OS_PRIO_SELF) {
6036 fac29 048104        	ibeq	b,L7553
6037                     ; 710             *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
6039 fac2c c62a          	ldab	#42
6040                     ; 711             return (0u);
6043 fac2e 2006          	bra	LC002
6044 fac30               L7553:
6045                     ; 714     if (pname == (INT8U **)0) {                          /* Is 'pname' a NULL pointer?                 */
6047 fac30 ec88          	ldd	OFST+4,s
6048 fac32 260a          	bne	L3653
6049                     ; 715         *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
6051 fac34 c60c          	ldab	#12
6052                     ; 716         return (0u);
6054 fac36               LC002:
6055 fac36 6bf3000a      	stab	[OFST+6,s]
6056 fac3a c7            	clrb	
6058 fac3b               L64:
6060 fac3b 1b86          	leas	6,s
6061 fac3d 3d            	rts	
6062 fac3e               L3653:
6063                     ; 719     if (OSIntNesting > 0u) {                              /* See if trying to call from an ISR          */
6065 fac3e f6163c        	ldab	_OSIntNesting
6066 fac41 2704          	beq	L5653
6067                     ; 720         *perr = OS_ERR_NAME_GET_ISR;
6069 fac43 c611          	ldab	#17
6070                     ; 721         return (0u);
6073 fac45 20ef          	bra	LC002
6074 fac47               L5653:
6075                     ; 723     OS_ENTER_CRITICAL();
6077 fac47 164b4f        	jsr	_OS_CPU_SR_Save
6079 fac4a 6b80          	stab	OFST-4,s
6080                     ; 724     if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
6082 fac4c e685          	ldab	OFST+1,s
6083 fac4e c1ff          	cmpb	#255
6084 fac50 2608          	bne	L7653
6085                     ; 725         prio = OSTCBCur->OSTCBPrio;
6087 fac52 fd1588        	ldy	_OSTCBCur
6088 fac55 e6e824        	ldab	36,y
6089 fac58 6b85          	stab	OFST+1,s
6090 fac5a               L7653:
6091                     ; 727     ptcb = OSTCBPrioTbl[prio];
6093 fac5a 87            	clra	
6094 fac5b 59            	lsld	
6095 fac5c b746          	tfr	d,y
6096 fac5e ecea1502      	ldd	_OSTCBPrioTbl,y
6097 fac62 6c81          	std	OFST-3,s
6098                     ; 728     if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
6100 fac64 260a          	bne	L1753
6101                     ; 729         OS_EXIT_CRITICAL();                              /* No                                         */
6104                     ; 730         *perr = OS_ERR_TASK_NOT_EXIST;
6106 fac66               LC003:
6107 fac66 e680          	ldab	OFST-4,s
6108 fac68 87            	clra	
6109 fac69 164b54        	jsr	_OS_CPU_SR_Restore
6110 fac6c c643          	ldab	#67
6111                     ; 731         return (0u);
6114 fac6e 20c6          	bra	LC002
6115 fac70               L1753:
6116                     ; 733     if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
6118 fac70 8c0001        	cpd	#1
6119                     ; 734         OS_EXIT_CRITICAL();                              /* Yes                                        */
6122                     ; 735         *perr = OS_ERR_TASK_NOT_EXIST;
6124                     ; 736         return (0u);
6127 fac73 27f1          	beq	LC003
6128                     ; 738     *pname = ptcb->OSTCBTaskName;
6130 fac75 b746          	tfr	d,y
6131 fac77 ece83c        	ldd	60,y
6132 fac7a ee88          	ldx	OFST+4,s
6133 fac7c 6c00          	std	0,x
6134                     ; 739     len    = OS_StrLen(*pname);
6136 fac7e 1649af        	jsr	_OS_StrLen
6138 fac81 6b83          	stab	OFST-1,s
6139                     ; 740     OS_EXIT_CRITICAL();
6141 fac83 e680          	ldab	OFST-4,s
6142 fac85 87            	clra	
6143 fac86 164b54        	jsr	_OS_CPU_SR_Restore
6145                     ; 741     *perr  = OS_ERR_NONE;
6147 fac89 69f3000a      	clr	[OFST+6,s]
6148                     ; 742     return (len);
6150 fac8d e683          	ldab	OFST-1,s
6152 fac8f 20aa          	bra	L64
6227                     ; 770 _NEAR void  OSTaskNameSet (INT8U   prio,
6227                     ; 771                           INT8U  *pname,
6227                     ; 772                           INT8U  *perr)
6227                     ; 773 {
6228                     	switch	.text
6229 fac91               _OSTaskNameSet:
6231 fac91 3b            	pshd	
6232 fac92 1b9d          	leas	-3,s
6233       00000003      OFST:	set	3
6236                     ; 776     OS_CPU_SR  cpu_sr = 0u;
6238                     ; 789     if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
6240 fac94 c13f          	cmpb	#63
6241 fac96 2307          	bls	L1363
6242                     ; 790         if (prio != OS_PRIO_SELF) {
6244 fac98 048104        	ibeq	b,L1363
6245                     ; 791             *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
6247 fac9b c62a          	ldab	#42
6248                     ; 792             return;
6250 fac9d 2006          	bra	LC004
6251 fac9f               L1363:
6252                     ; 795     if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
6254 fac9f ec87          	ldd	OFST+4,s
6255 faca1 2609          	bne	L5363
6256                     ; 796         *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
6258 faca3 c60c          	ldab	#12
6259 faca5               LC004:
6260 faca5 6bf30009      	stab	[OFST+6,s]
6261                     ; 797         return;
6262 faca9               L25:
6265 faca9 1b85          	leas	5,s
6266 facab 3d            	rts	
6267 facac               L5363:
6268                     ; 800     if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
6270 facac f6163c        	ldab	_OSIntNesting
6271 facaf 2704          	beq	L7363
6272                     ; 801         *perr = OS_ERR_NAME_SET_ISR;
6274 facb1 c612          	ldab	#18
6275                     ; 802         return;
6277 facb3 20f0          	bra	LC004
6278 facb5               L7363:
6279                     ; 804     OS_ENTER_CRITICAL();
6281 facb5 164b4f        	jsr	_OS_CPU_SR_Save
6283 facb8 6b80          	stab	OFST-3,s
6284                     ; 805     if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
6286 facba e684          	ldab	OFST+1,s
6287 facbc c1ff          	cmpb	#255
6288 facbe 2608          	bne	L1463
6289                     ; 806         prio = OSTCBCur->OSTCBPrio;
6291 facc0 fd1588        	ldy	_OSTCBCur
6292 facc3 e6e824        	ldab	36,y
6293 facc6 6b84          	stab	OFST+1,s
6294 facc8               L1463:
6295                     ; 808     ptcb = OSTCBPrioTbl[prio];
6297 facc8 87            	clra	
6298 facc9 59            	lsld	
6299 facca b746          	tfr	d,y
6300 faccc ecea1502      	ldd	_OSTCBPrioTbl,y
6301 facd0 6c81          	std	OFST-2,s
6302                     ; 809     if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
6304 facd2 260a          	bne	L3463
6305                     ; 810         OS_EXIT_CRITICAL();                          /* No                                             */
6308                     ; 811         *perr = OS_ERR_TASK_NOT_EXIST;
6310 facd4               LC005:
6311 facd4 e680          	ldab	OFST-3,s
6312 facd6 87            	clra	
6313 facd7 164b54        	jsr	_OS_CPU_SR_Restore
6314 facda c643          	ldab	#67
6315                     ; 812         return;
6317 facdc 20c7          	bra	LC004
6318 facde               L3463:
6319                     ; 814     if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
6321 facde 8c0001        	cpd	#1
6322                     ; 815         OS_EXIT_CRITICAL();                          /* Yes                                            */
6325                     ; 816         *perr = OS_ERR_TASK_NOT_EXIST;
6327                     ; 817         return;
6329 face1 27f1          	beq	LC005
6330                     ; 819     ptcb->OSTCBTaskName = pname;
6332 face3 ec87          	ldd	OFST+4,s
6333 face5 ee81          	ldx	OFST-2,s
6334 face7 6ce03c        	std	60,x
6335                     ; 821     OS_EXIT_CRITICAL();
6338 facea e680          	ldab	OFST-3,s
6339 facec 87            	clra	
6340 faced 164b54        	jsr	_OS_CPU_SR_Restore
6342                     ; 822     *perr               = OS_ERR_NONE;
6344 facf0 69f30009      	clr	[OFST+6,s]
6345                     ; 823 }
6347 facf4 20b3          	bra	L25
6404                     ; 846 _NEAR INT8U  OSTaskResume (INT8U prio)
6404                     ; 847 {
6405                     	switch	.text
6406 facf6               _OSTaskResume:
6408 facf6 3b            	pshd	
6409 facf7 1b9d          	leas	-3,s
6410       00000003      OFST:	set	3
6413                     ; 850     OS_CPU_SR  cpu_sr = 0u;
6415                     ; 856     if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
6417 facf9 c13f          	cmpb	#63
6418 facfb 2504          	blo	L3763
6419                     ; 857         return (OS_ERR_PRIO_INVALID);
6421 facfd c62a          	ldab	#42
6423 facff 201a          	bra	L06
6424 fad01               L3763:
6425                     ; 860     OS_ENTER_CRITICAL();
6427 fad01 164b4f        	jsr	_OS_CPU_SR_Save
6429 fad04 6b82          	stab	OFST-1,s
6430                     ; 861     ptcb = OSTCBPrioTbl[prio];
6432 fad06 e684          	ldab	OFST+1,s
6433 fad08 87            	clra	
6434 fad09 59            	lsld	
6435 fad0a b746          	tfr	d,y
6436 fad0c ecea1502      	ldd	_OSTCBPrioTbl,y
6437 fad10 6c80          	std	OFST-3,s
6438                     ; 862     if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
6440 fad12 260a          	bne	L5763
6441                     ; 863         OS_EXIT_CRITICAL();
6443 fad14 e682          	ldab	OFST-1,s
6444 fad16 164b54        	jsr	_OS_CPU_SR_Restore
6446                     ; 864         return (OS_ERR_TASK_RESUME_PRIO);
6448 fad19 c646          	ldab	#70
6450 fad1b               L06:
6452 fad1b 1b85          	leas	5,s
6453 fad1d 3d            	rts	
6454 fad1e               L5763:
6455                     ; 866     if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
6457 fad1e 8c0001        	cpd	#1
6458 fad21 260a          	bne	L7763
6459                     ; 867         OS_EXIT_CRITICAL();
6461 fad23 e682          	ldab	OFST-1,s
6462 fad25 87            	clra	
6463 fad26 164b54        	jsr	_OS_CPU_SR_Restore
6465                     ; 868         return (OS_ERR_TASK_NOT_EXIST);
6467 fad29 c643          	ldab	#67
6469 fad2b 20ee          	bra	L06
6470 fad2d               L7763:
6471                     ; 870     if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
6473 fad2d b746          	tfr	d,y
6474 fad2f 0fe8220849    	brclr	34,y,8,L1073
6475                     ; 871         ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
6477 fad34 0de82208      	bclr	34,y,8
6478                     ; 872         if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) == OS_STAT_RDY) { /* See if task is now ready         */
6480 fad38 e6e822        	ldab	34,y
6481 fad3b c537          	bitb	#55
6482 fad3d 2635          	bne	L5073
6483                     ; 873             if (ptcb->OSTCBDly == 0u) {
6485 fad3f ece81e        	ldd	30,y
6486 fad42 2630          	bne	L5073
6487 fad44 ece820        	ldd	32,y
6488 fad47 262b          	bne	L5073
6489                     ; 874                 OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
6491 fad49 e6e828        	ldab	40,y
6492 fad4c fa1638        	orab	_OSRdyGrp
6493 fad4f 7b1638        	stab	_OSRdyGrp
6494                     ; 875                 OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
6496 fad52 e6e826        	ldab	38,y
6497 fad55 b746          	tfr	d,y
6498 fad57 ee80          	ldx	OFST-3,s
6499 fad59 e6e027        	ldab	39,x
6500 fad5c eaea1630      	orab	_OSRdyTbl,y
6501 fad60 6bea1630      	stab	_OSRdyTbl,y
6502                     ; 877                 OS_EXIT_CRITICAL();
6505 fad64 e682          	ldab	OFST-1,s
6506 fad66 164b54        	jsr	_OS_CPU_SR_Restore
6508                     ; 878                 if (OSRunning == OS_TRUE) {
6510 fad69 f6162f        	ldab	_OSRunning
6511 fad6c 04210b        	dbne	b,L3173
6512                     ; 880                     OS_Sched();                               /* Find new highest priority task        */
6515 fad6f 164933        	jsr	_OS_Sched
6517 fad72 2006          	bra	L3173
6518 fad74               L5073:
6519                     ; 883                 OS_EXIT_CRITICAL();
6522                     ; 886             OS_EXIT_CRITICAL();
6524 fad74 e682          	ldab	OFST-1,s
6525 fad76 87            	clra	
6526 fad77 164b54        	jsr	_OS_CPU_SR_Restore
6528 fad7a               L3173:
6529                     ; 888         return (OS_ERR_NONE);
6531 fad7a c7            	clrb	
6533 fad7b 2008          	bra	L26
6534 fad7d               L1073:
6535                     ; 890     OS_EXIT_CRITICAL();
6537 fad7d e682          	ldab	OFST-1,s
6538 fad7f 87            	clra	
6539 fad80 164b54        	jsr	_OS_CPU_SR_Restore
6541                     ; 891     return (OS_ERR_TASK_NOT_SUSPENDED);
6543 fad83 c644          	ldab	#68
6545 fad85               L26:
6547 fad85 1b85          	leas	5,s
6548 fad87 3d            	rts	
6659                     ; 916 _NEAR INT8U  OSTaskStkChk (INT8U         prio,
6659                     ; 917                           OS_STK_DATA  *p_stk_data)
6659                     ; 918 {
6660                     	switch	.text
6661 fad88               _OSTaskStkChk:
6663 fad88 3b            	pshd	
6664 fad89 1b95          	leas	-11,s
6665       0000000b      OFST:	set	11
6668                     ; 924     OS_CPU_SR  cpu_sr = 0u;
6670                     ; 930     if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
6672 fad8b c13f          	cmpb	#63
6673 fad8d 2307          	bls	L7673
6674                     ; 931         if (prio != OS_PRIO_SELF) {
6676 fad8f 048104        	ibeq	b,L7673
6677                     ; 932             return (OS_ERR_PRIO_INVALID);
6679 fad92 c62a          	ldab	#42
6681 fad94 2006          	bra	L07
6682 fad96               L7673:
6683                     ; 935     if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
6685 fad96 ed8f          	ldy	OFST+4,s
6686 fad98 2605          	bne	L3773
6687                     ; 936         return (OS_ERR_PDATA_NULL);
6689 fad9a c609          	ldab	#9
6691 fad9c               L07:
6693 fad9c 1b8d          	leas	13,s
6694 fad9e 3d            	rts	
6695 fad9f               L3773:
6696                     ; 939     p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
6698 fad9f 87            	clra	
6699 fada0 c7            	clrb	
6700 fada1 6c42          	std	2,y
6701 fada3 6c40          	std	0,y
6702                     ; 940     p_stk_data->OSUsed = 0u;
6704 fada5 6c46          	std	6,y
6705 fada7 6c44          	std	4,y
6706                     ; 941     OS_ENTER_CRITICAL();
6708 fada9 164b4f        	jsr	_OS_CPU_SR_Save
6710 fadac 6b86          	stab	OFST-5,s
6711                     ; 942     if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
6713 fadae e68c          	ldab	OFST+1,s
6714 fadb0 c1ff          	cmpb	#255
6715 fadb2 2608          	bne	L5773
6716                     ; 943         prio = OSTCBCur->OSTCBPrio;
6718 fadb4 fd1588        	ldy	_OSTCBCur
6719 fadb7 e6e824        	ldab	36,y
6720 fadba 6b8c          	stab	OFST+1,s
6721 fadbc               L5773:
6722                     ; 945     ptcb = OSTCBPrioTbl[prio];
6724 fadbc 87            	clra	
6725 fadbd 59            	lsld	
6726 fadbe b746          	tfr	d,y
6727 fadc0 ecea1502      	ldd	_OSTCBPrioTbl,y
6728 fadc4 6c80          	std	OFST-11,s
6729                     ; 946     if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
6731 fadc6 2609          	bne	L7773
6732                     ; 947         OS_EXIT_CRITICAL();
6734 fadc8 e686          	ldab	OFST-5,s
6735 fadca 164b54        	jsr	_OS_CPU_SR_Restore
6737                     ; 948         return (OS_ERR_TASK_NOT_EXIST);
6739 fadcd c643          	ldab	#67
6741 fadcf 20cb          	bra	L07
6742 fadd1               L7773:
6743                     ; 950     if (ptcb == OS_TCB_RESERVED) {
6745 fadd1 8c0001        	cpd	#1
6746 fadd4 260a          	bne	L1004
6747                     ; 951         OS_EXIT_CRITICAL();
6749 fadd6 e686          	ldab	OFST-5,s
6750 fadd8 87            	clra	
6751 fadd9 164b54        	jsr	_OS_CPU_SR_Restore
6753                     ; 952         return (OS_ERR_TASK_NOT_EXIST);
6755 faddc c643          	ldab	#67
6757 fadde 20bc          	bra	L07
6758 fade0               L1004:
6759                     ; 954     if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
6761 fade0 b746          	tfr	d,y
6762 fade2 0e4b010a      	brset	11,y,1,L3004
6763                     ; 955         OS_EXIT_CRITICAL();
6765 fade6 e686          	ldab	OFST-5,s
6766 fade8 87            	clra	
6767 fade9 164b54        	jsr	_OS_CPU_SR_Restore
6769                     ; 956         return (OS_ERR_TASK_OPT);
6771 fadec c645          	ldab	#69
6773 fadee 20ac          	bra	L07
6774 fadf0               L3004:
6775                     ; 958     nfree = 0u;
6777 fadf0 87            	clra	
6778 fadf1 c7            	clrb	
6779 fadf2 6c84          	std	OFST-7,s
6780 fadf4 6c82          	std	OFST-9,s
6781                     ; 959     size  = ptcb->OSTCBStkSize;
6783 fadf6 18024889      	movw	8,y,OFST-2,s
6784 fadfa 18024687      	movw	6,y,OFST-4,s
6785                     ; 960     pchk  = ptcb->OSTCBStkBottom;
6787 fadfe 18024480      	movw	4,y,OFST-11,s
6788                     ; 961     OS_EXIT_CRITICAL();
6790 fae02 e686          	ldab	OFST-5,s
6791 fae04 164b54        	jsr	_OS_CPU_SR_Restore
6794 fae07 ed80          	ldy	OFST-11,s
6795 fae09 200f          	bra	L66
6796 fae0b               L5004:
6797                     ; 964         nfree++;
6799 fae0b ec84          	ldd	OFST-7,s
6800 fae0d c30001        	addd	#1
6801 fae10 6c84          	std	OFST-7,s
6802 fae12 2406          	bcc	L66
6803 fae14 6283          	inc	OFST-8,s
6804 fae16 2602          	bne	L66
6805 fae18 6282          	inc	OFST-9,s
6806 fae1a               L66:
6807                     ; 963     while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
6809 fae1a e670          	ldab	1,y+
6810 fae1c 6d80          	sty	OFST-11,s
6811 fae1e 0451ea        	tbeq	b,L5004
6812                     ; 971     p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
6814 fae21 ed8f          	ldy	OFST+4,s
6815 fae23 18028442      	movw	OFST-7,s,2,y
6816 fae27 18028240      	movw	OFST-9,s,0,y
6817                     ; 972     p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
6819 fae2b ec89          	ldd	OFST-2,s
6820 fae2d ee87          	ldx	OFST-4,s
6821 fae2f 1982          	leay	OFST-9,s
6822 fae31 16c0fe        	jsr	c_lsub
6824 fae34 ed8f          	ldy	OFST+4,s
6825 fae36 6c46          	std	6,y
6826 fae38 6e44          	stx	4,y
6827                     ; 973     return (OS_ERR_NONE);
6829 fae3a c7            	clrb	
6832 fae3b 1b8d          	leas	13,s
6833 fae3d 3d            	rts	
6904                     ; 1002 _NEAR INT8U  OSTaskSuspend (INT8U prio)
6904                     ; 1003 {
6905                     	switch	.text
6906 fae3e               _OSTaskSuspend:
6908 fae3e 3b            	pshd	
6909 fae3f 1b9b          	leas	-5,s
6910       00000005      OFST:	set	5
6913                     ; 1008     OS_CPU_SR  cpu_sr = 0u;
6915                     ; 1014     if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
6917 fae41 c13f          	cmpb	#63
6918 fae43 2604          	bne	L3404
6919                     ; 1015         return (OS_ERR_TASK_SUSPEND_IDLE);
6921 fae45 c647          	ldab	#71
6923 fae47 200b          	bra	L47
6924 fae49               L3404:
6925                     ; 1017     if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
6927 fae49 e686          	ldab	OFST+1,s
6928 fae4b c13f          	cmpb	#63
6929 fae4d 2508          	blo	L5404
6930                     ; 1018         if (prio != OS_PRIO_SELF) {
6932 fae4f 048105        	ibeq	b,L5404
6933                     ; 1019             return (OS_ERR_PRIO_INVALID);
6935 fae52 c62a          	ldab	#42
6937 fae54               L47:
6939 fae54 1b87          	leas	7,s
6940 fae56 3d            	rts	
6941 fae57               L5404:
6942                     ; 1023     OS_ENTER_CRITICAL();
6944 fae57 164b4f        	jsr	_OS_CPU_SR_Save
6946 fae5a 6b82          	stab	OFST-3,s
6947                     ; 1024     if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
6949 fae5c e686          	ldab	OFST+1,s
6950 fae5e c1ff          	cmpb	#255
6951 fae60 260a          	bne	L1504
6952                     ; 1025         prio = OSTCBCur->OSTCBPrio;
6954 fae62 fd1588        	ldy	_OSTCBCur
6955 fae65 e6e824        	ldab	36,y
6956 fae68 6b86          	stab	OFST+1,s
6957                     ; 1026         self = OS_TRUE;
6960 fae6a 2008          	bra	LC007
6961 fae6c               L1504:
6962                     ; 1027     } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
6964 fae6c fd1588        	ldy	_OSTCBCur
6965 fae6f e1e824        	cmpb	36,y
6966 fae72 2608          	bne	L5504
6967                     ; 1028         self = OS_TRUE;
6969 fae74               LC007:
6970 fae74 c601          	ldab	#1
6971 fae76 6b83          	stab	OFST-2,s
6973 fae78 e686          	ldab	OFST+1,s
6974 fae7a 2002          	bra	L3504
6975 fae7c               L5504:
6976                     ; 1030         self = OS_FALSE;                                        /* No suspending another task          */
6978 fae7c 6983          	clr	OFST-2,s
6979 fae7e               L3504:
6980                     ; 1032     ptcb = OSTCBPrioTbl[prio];
6982 fae7e 87            	clra	
6983 fae7f 59            	lsld	
6984 fae80 b746          	tfr	d,y
6985 fae82 ecea1502      	ldd	_OSTCBPrioTbl,y
6986 fae86 6c80          	std	OFST-5,s
6987                     ; 1033     if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
6989 fae88 2609          	bne	L1604
6990                     ; 1034         OS_EXIT_CRITICAL();
6992 fae8a e682          	ldab	OFST-3,s
6993 fae8c 164b54        	jsr	_OS_CPU_SR_Restore
6995                     ; 1035         return (OS_ERR_TASK_SUSPEND_PRIO);
6997 fae8f c648          	ldab	#72
6999 fae91 20c1          	bra	L47
7000 fae93               L1604:
7001                     ; 1037     if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
7003 fae93 8c0001        	cpd	#1
7004 fae96 260a          	bne	L3604
7005                     ; 1038         OS_EXIT_CRITICAL();
7007 fae98 e682          	ldab	OFST-3,s
7008 fae9a 87            	clra	
7009 fae9b 164b54        	jsr	_OS_CPU_SR_Restore
7011                     ; 1039         return (OS_ERR_TASK_NOT_EXIST);
7013 fae9e c643          	ldab	#67
7015 faea0 20b2          	bra	L47
7016 faea2               L3604:
7017                     ; 1041     y            = ptcb->OSTCBY;
7019 faea2 b746          	tfr	d,y
7020 faea4 e6e826        	ldab	38,y
7021 faea7 6b84          	stab	OFST-1,s
7022                     ; 1042     OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
7024 faea9 b796          	exg	b,y
7025 faeab ee80          	ldx	OFST-5,s
7026 faead e6e027        	ldab	39,x
7027 faeb0 51            	comb	
7028 faeb1 e4ea1630      	andb	_OSRdyTbl,y
7029 faeb5 6bea1630      	stab	_OSRdyTbl,y
7030                     ; 1043     if (OSRdyTbl[y] == 0u) {
7032 faeb9 260c          	bne	L5604
7033                     ; 1044         OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
7035 faebb b756          	tfr	x,y
7036 faebd e6e828        	ldab	40,y
7037 faec0 51            	comb	
7038 faec1 f41638        	andb	_OSRdyGrp
7039 faec4 7b1638        	stab	_OSRdyGrp
7040 faec7               L5604:
7041                     ; 1046     ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
7043 faec7 b756          	tfr	x,y
7044 faec9 0ce82208      	bset	34,y,8
7045                     ; 1047     OS_EXIT_CRITICAL();
7047 faecd e682          	ldab	OFST-3,s
7048 faecf 87            	clra	
7049 faed0 164b54        	jsr	_OS_CPU_SR_Restore
7051                     ; 1050     if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
7055 faed3 e683          	ldab	OFST-2,s
7056 faed5 042103        	dbne	b,L7604
7057                     ; 1051         OS_Sched();                                             /* Find new highest priority task      */
7059 faed8 164933        	jsr	_OS_Sched
7061 faedb               L7604:
7062                     ; 1053     return (OS_ERR_NONE);
7064 faedb c7            	clrb	
7067 faedc 1b87          	leas	7,s
7068 faede 3d            	rts	
7135                     ; 1078 _NEAR INT8U  OSTaskQuery (INT8U    prio,
7135                     ; 1079                          OS_TCB  *p_task_data)
7135                     ; 1080 {
7136                     	switch	.text
7137 faedf               _OSTaskQuery:
7139 faedf 3b            	pshd	
7140 faee0 1b9d          	leas	-3,s
7141       00000003      OFST:	set	3
7144                     ; 1083     OS_CPU_SR  cpu_sr = 0u;
7146                     ; 1089     if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
7148 faee2 c13f          	cmpb	#63
7149 faee4 2307          	bls	L3214
7150                     ; 1090         if (prio != OS_PRIO_SELF) {
7152 faee6 048104        	ibeq	b,L3214
7153                     ; 1091             return (OS_ERR_PRIO_INVALID);
7155 faee9 c62a          	ldab	#42
7157 faeeb 2006          	bra	L001
7158 faeed               L3214:
7159                     ; 1094     if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
7161 faeed ec87          	ldd	OFST+4,s
7162 faeef 2605          	bne	L7214
7163                     ; 1095         return (OS_ERR_PDATA_NULL);
7165 faef1 c609          	ldab	#9
7167 faef3               L001:
7169 faef3 1b85          	leas	5,s
7170 faef5 3d            	rts	
7171 faef6               L7214:
7172                     ; 1098     OS_ENTER_CRITICAL();
7174 faef6 164b4f        	jsr	_OS_CPU_SR_Save
7176 faef9 6b80          	stab	OFST-3,s
7177                     ; 1099     if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
7179 faefb e684          	ldab	OFST+1,s
7180 faefd c1ff          	cmpb	#255
7181 faeff 2608          	bne	L1314
7182                     ; 1100         prio = OSTCBCur->OSTCBPrio;
7184 faf01 fd1588        	ldy	_OSTCBCur
7185 faf04 e6e824        	ldab	36,y
7186 faf07 6b84          	stab	OFST+1,s
7187 faf09               L1314:
7188                     ; 1102     ptcb = OSTCBPrioTbl[prio];
7190 faf09 87            	clra	
7191 faf0a 59            	lsld	
7192 faf0b b746          	tfr	d,y
7193 faf0d ecea1502      	ldd	_OSTCBPrioTbl,y
7194 faf11 6c81          	std	OFST-2,s
7195                     ; 1103     if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
7197 faf13 2609          	bne	L3314
7198                     ; 1104         OS_EXIT_CRITICAL();
7200 faf15 e680          	ldab	OFST-3,s
7201 faf17 164b54        	jsr	_OS_CPU_SR_Restore
7203                     ; 1105         return (OS_ERR_PRIO);
7205 faf1a c629          	ldab	#41
7207 faf1c 20d5          	bra	L001
7208 faf1e               L3314:
7209                     ; 1107     if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
7211 faf1e 042409        	dbne	d,L5314
7212                     ; 1108         OS_EXIT_CRITICAL();
7214 faf21 e680          	ldab	OFST-3,s
7215 faf23 164b54        	jsr	_OS_CPU_SR_Restore
7217                     ; 1109         return (OS_ERR_TASK_NOT_EXIST);
7219 faf26 c643          	ldab	#67
7221 faf28 20c9          	bra	L001
7222 faf2a               L5314:
7223                     ; 1112     OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
7225 faf2a cc003e        	ldd	#62
7226 faf2d 3b            	pshd	
7227 faf2e ec83          	ldd	OFST+0,s
7228 faf30 3b            	pshd	
7229 faf31 ec8b          	ldd	OFST+8,s
7230 faf33 16491b        	jsr	_OS_MemCopy
7232 faf36 1b84          	leas	4,s
7233                     ; 1113     OS_EXIT_CRITICAL();
7235 faf38 e680          	ldab	OFST-3,s
7236 faf3a 87            	clra	
7237 faf3b 164b54        	jsr	_OS_CPU_SR_Restore
7239                     ; 1114     return (OS_ERR_NONE);
7241 faf3e c7            	clrb	
7243 faf3f 20b2          	bra	L001
7268                     ; 1327 _NEAR void  OS_TaskReturn (void)
7268                     ; 1328 {
7269                     	switch	.text
7270 faf41               _OS_TaskReturn:
7274                     ; 1329     OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
7276 faf41 fc1588        	ldd	_OSTCBCur
7277 faf44 164bc3        	jsr	_OSTaskReturnHook
7279                     ; 1332     (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
7281 faf47 cc00ff        	ldd	#255
7282 faf4a 166a89        	jsr	_OSTaskDel
7284                     ; 1338 }
7287 faf4d 3d            	rts	
7335                     ; 1364 _NEAR void  OS_TaskStkClr (OS_STK  *pbos,
7335                     ; 1365                      INT32U   size,
7335                     ; 1366                      INT16U   opt)
7335                     ; 1367 {
7336                     	switch	.text
7337 faf4e               _OS_TaskStkClr:
7339 faf4e 3b            	pshd	
7340       00000000      OFST:	set	0
7343                     ; 1368     if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
7345 faf4f e689          	ldab	OFST+9,s
7346 faf51 c501          	bitb	#1
7347 faf53 2723          	beq	L1714
7348                     ; 1369         if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
7350 faf55 c502          	bitb	#2
7351 faf57 271f          	beq	L1714
7353 faf59 2015          	bra	L7714
7354 faf5b               L5714:
7355                     ; 1372                 size--;
7357 faf5b ec86          	ldd	OFST+6,s
7358 faf5d 830001        	subd	#1
7359 faf60 6c86          	std	OFST+6,s
7360 faf62 ec84          	ldd	OFST+4,s
7361 faf64 c200          	sbcb	#0
7362 faf66 8200          	sbca	#0
7363 faf68 6c84          	std	OFST+4,s
7364                     ; 1373                 *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
7366 faf6a ed80          	ldy	OFST+0,s
7367 faf6c 6970          	clr	1,y+
7368 faf6e 6d80          	sty	OFST+0,s
7369 faf70               L7714:
7370                     ; 1371             while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
7372 faf70 ec84          	ldd	OFST+4,s
7373 faf72 26e7          	bne	L5714
7374 faf74 ec86          	ldd	OFST+6,s
7375 faf76 26e3          	bne	L5714
7376 faf78               L1714:
7377                     ; 1383 }
7380 faf78 31            	puly	
7381 faf79 3d            	rts	
7393                     	xref	_OSTaskStkInit
7394                     	xref	_OSTaskReturnHook
7395                     	xref	_OSTaskDelHook
7396                     	xref	_OS_TCBInit
7397                     	xdef	_OS_TaskStkClr
7398                     	xdef	_OS_TaskReturn
7399                     	xref	_OS_StrLen
7400                     	xref	_OS_Sched
7401                     	xref	_OS_MemCopy
7402                     	xref	_OS_FlagUnlink
7403                     	xref	_OS_EventTaskRemoveMulti
7404                     	xref	_OS_EventTaskRemove
7405                     	xref	_OS_Dummy
7406                     	xdef	_OSTaskQuery
7407                     	xdef	_OSTaskStkChk
7408                     	xdef	_OSTaskSuspend
7409                     	xdef	_OSTaskResume
7410                     	xdef	_OSTaskNameSet
7411                     	xdef	_OSTaskNameGet
7412                     	xdef	_OSTaskDelReq
7413                     	xdef	_OSTaskDel
7414                     	xdef	_OSTaskCreateExt
7415                     	xdef	_OSTaskCreate
7416                     	xdef	_OSTaskChangePrio
7417                     	xref	_OSTCBPrioTbl
7418                     	xref	_OSTCBList
7419                     	xref	_OSTCBFreeList
7420                     	xref	_OSTCBCur
7421                     	xref	_OSTaskCtr
7422                     	xref	_OSRunning
7423                     	xref	_OSRdyTbl
7424                     	xref	_OSRdyGrp
7425                     	xref	_OSLockNesting
7426                     	xref	_OSIntNesting
7427                     	xref	_OS_CPU_SR_Restore
7428                     	xref	_OS_CPU_SR_Save
7429                     .const:	section	.data
7430 fb743               L3543:
7431 fb743 3f00          	dc.b	"?",0
7452                     	xref	c_lsub
7453                     	end
