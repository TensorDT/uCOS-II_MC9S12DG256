   1                     ; C Compiler for 68HCS12 [COSMIC Software]
   2                     ; Parser V4.11.9 - 08 Feb 2017
   3                     ; Generator V4.8.12 - 22 Feb 2017
   4                     ; Optimizer V4.7.11 - 22 Feb 2017
4097                     ; 57 _NEAR INT16U  OSSemAccept (OS_EVENT *pevent)
4097                     ; 58 {
4098                     	switch	.text
4099 fa460               _OSSemAccept:
4101 fa460 3b            	pshd	
4102 fa461 1b9d          	leas	-3,s
4103       00000003      OFST:	set	3
4106                     ; 61     OS_CPU_SR  cpu_sr = 0u;
4108                     ; 67     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
4110 fa463 046402        	tbne	d,L3272
4111                     ; 68         return (0u);
4114 fa466 2008          	bra	LC001
4115 fa468               L3272:
4116                     ; 71     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
4118 fa468 e6f30003      	ldab	[OFST+0,s]
4119 fa46c c103          	cmpb	#3
4120 fa46e 2705          	beq	L5272
4121                     ; 72         return (0u);
4123 fa470               LC001:
4124 fa470 87            	clra	
4125 fa471 c7            	clrb	
4127 fa472               L6:
4129 fa472 1b85          	leas	5,s
4130 fa474 3d            	rts	
4131 fa475               L5272:
4132                     ; 74     OS_ENTER_CRITICAL();
4134 fa475 164b4f        	jsr	_OS_CPU_SR_Save
4136 fa478 6b82          	stab	OFST-1,s
4137                     ; 75     cnt = pevent->OSEventCnt;
4139 fa47a ed83          	ldy	OFST+0,s
4140 fa47c ee43          	ldx	3,y
4141 fa47e 6e80          	stx	OFST-3,s
4142                     ; 76     if (cnt > 0u) {                                   /* See if resource is available                  */
4144 fa480 2703          	beq	L7272
4145                     ; 77         pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
4147 fa482 09            	dex	
4148 fa483 6e43          	stx	3,y
4149 fa485               L7272:
4150                     ; 79     OS_EXIT_CRITICAL();
4152 fa485 87            	clra	
4153 fa486 164b54        	jsr	_OS_CPU_SR_Restore
4155                     ; 80     return (cnt);                                     /* Return semaphore count                        */
4157 fa489 ec80          	ldd	OFST-3,s
4159 fa48b 20e5          	bra	L6
4217                     ; 102 _NEAR OS_EVENT  *OSSemCreate (INT16U cnt)
4217                     ; 103 {
4218                     	switch	.text
4219 fa48d               _OSSemCreate:
4221 fa48d 3b            	pshd	
4222 fa48e 1b9d          	leas	-3,s
4223       00000003      OFST:	set	3
4226                     ; 106     OS_CPU_SR  cpu_sr = 0u;
4228                     ; 117     if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
4230 fa490 f6163c        	ldab	_OSIntNesting
4231 fa493 2704          	beq	L7572
4232                     ; 118         return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
4234 fa495 87            	clra	
4235 fa496 c7            	clrb	
4237 fa497 2031          	bra	L21
4238 fa499               L7572:
4239                     ; 120     OS_ENTER_CRITICAL();
4241 fa499 164b4f        	jsr	_OS_CPU_SR_Save
4243 fa49c 6b82          	stab	OFST-1,s
4244                     ; 121     pevent = OSEventFreeList;                              /* Get next free event control block        */
4246 fa49e fd1702        	ldy	_OSEventFreeList
4247 fa4a1 6d80          	sty	OFST-3,s
4248                     ; 122     if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
4250 fa4a3 2705          	beq	L1672
4251                     ; 123         OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
4253 fa4a5 1805411702    	movw	1,y,_OSEventFreeList
4254 fa4aa               L1672:
4255                     ; 125     OS_EXIT_CRITICAL();
4257 fa4aa 87            	clra	
4258 fa4ab 164b54        	jsr	_OS_CPU_SR_Restore
4260                     ; 126     if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
4262 fa4ae ed80          	ldy	OFST-3,s
4263 fa4b0 2716          	beq	L3672
4264                     ; 127         pevent->OSEventType    = OS_EVENT_TYPE_SEM;
4266 fa4b2 c603          	ldab	#3
4267 fa4b4 6b40          	stab	0,y
4268                     ; 128         pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
4270 fa4b6 18028343      	movw	OFST+0,s,3,y
4271                     ; 129         pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
4273 fa4ba 87            	clra	
4274 fa4bb c7            	clrb	
4275 fa4bc 6c41          	std	1,y
4276                     ; 131         pevent->OSEventName    = (INT8U *)(void *)"?";
4278 fa4be cc7741        	ldd	#L5672
4279 fa4c1 6c4e          	std	14,y
4280                     ; 133         OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
4282 fa4c3 b764          	tfr	y,d
4283 fa4c5 1647a9        	jsr	_OS_EventWaitListInit
4286 fa4c8               L3672:
4287                     ; 137     return (pevent);
4289 fa4c8 ec80          	ldd	OFST-3,s
4291 fa4ca               L21:
4293 fa4ca 1b85          	leas	5,s
4294 fa4cc 3d            	rts	
4382                     ; 185 _NEAR OS_EVENT  *OSSemDel (OS_EVENT  *pevent,
4382                     ; 186                           INT8U      opt,
4382                     ; 187                           INT8U     *perr)
4382                     ; 188 {
4383                     	switch	.text
4384 fa4cd               _OSSemDel:
4386 fa4cd 3b            	pshd	
4387 fa4ce 1b9c          	leas	-4,s
4388       00000004      OFST:	set	4
4391                     ; 192     OS_CPU_SR  cpu_sr = 0u;
4393                     ; 212     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
4395 fa4d0 046404        	tbne	d,L7303
4396                     ; 213         *perr = OS_ERR_PEVENT_NULL;
4398 fa4d3 c604          	ldab	#4
4399                     ; 214         return (pevent);
4402 fa4d5 200a          	bra	L61
4403 fa4d7               L7303:
4404                     ; 220     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
4407 fa4d7 e6f30004      	ldab	[OFST+0,s]
4408 fa4db c103          	cmpb	#3
4409 fa4dd 270b          	beq	L1403
4410                     ; 221         *perr = OS_ERR_EVENT_TYPE;
4412 fa4df c601          	ldab	#1
4413                     ; 223         return (pevent);
4417 fa4e1               L61:
4418 fa4e1 6bf3000a      	stab	[OFST+6,s]
4419 fa4e5 ec84          	ldd	OFST+0,s
4421 fa4e7 1b86          	leas	6,s
4422 fa4e9 3d            	rts	
4423 fa4ea               L1403:
4424                     ; 225     if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
4426 fa4ea f6163c        	ldab	_OSIntNesting
4427 fa4ed 2704          	beq	L3403
4428                     ; 226         *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
4430 fa4ef c60f          	ldab	#15
4431                     ; 228         return (pevent);
4435 fa4f1 20ee          	bra	L61
4436 fa4f3               L3403:
4437                     ; 230     OS_ENTER_CRITICAL();
4439 fa4f3 164b4f        	jsr	_OS_CPU_SR_Save
4441 fa4f6 6b80          	stab	OFST-4,s
4442                     ; 231     if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on semaphore    */
4444 fa4f8 ed84          	ldy	OFST+0,s
4445 fa4fa e645          	ldab	5,y
4446 fa4fc 2706          	beq	L5403
4447                     ; 232         tasks_waiting = OS_TRUE;                           /* Yes                                      */
4449 fa4fe c601          	ldab	#1
4450 fa500 6b83          	stab	OFST-1,s
4452 fa502 2002          	bra	L7403
4453 fa504               L5403:
4454                     ; 234         tasks_waiting = OS_FALSE;                          /* No                                       */
4456 fa504 6983          	clr	OFST-1,s
4457 fa506               L7403:
4458                     ; 236     switch (opt) {
4460 fa506 e689          	ldab	OFST+5,s
4462 fa508 270d          	beq	L7672
4463 fa50a 040153        	dbeq	b,L3603
4464                     ; 275         default:
4464                     ; 276              OS_EXIT_CRITICAL();
4466 fa50d e680          	ldab	OFST-4,s
4467 fa50f 87            	clra	
4468 fa510 164b54        	jsr	_OS_CPU_SR_Restore
4470                     ; 277              *perr                  = OS_ERR_INVALID_OPT;
4472 fa513 c607          	ldab	#7
4473                     ; 278              pevent_return          = pevent;
4475                     ; 279              break;
4477 fa515 202e          	bra	LC003
4478 fa517               L7672:
4479                     ; 237         case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
4479                     ; 238              if (tasks_waiting == OS_FALSE) {
4481 fa517 e683          	ldab	OFST-1,s
4482 fa519 2622          	bne	L5503
4483                     ; 240                  pevent->OSEventName    = (INT8U *)(void *)"?";
4485 fa51b cc7741        	ldd	#L5672
4486 fa51e 6c4e          	std	14,y
4487                     ; 242                  pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
4489 fa520 87            	clra	
4490 fa521 6a40          	staa	0,y
4491                     ; 243                  pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
4493 fa523 1801411702    	movw	_OSEventFreeList,1,y
4494                     ; 244                  pevent->OSEventCnt     = 0u;
4496 fa528 c7            	clrb	
4497 fa529 6c43          	std	3,y
4498                     ; 245                  OSEventFreeList        = pevent;          /* Get next free event control block        */
4500 fa52b 1805841702    	movw	OFST+0,s,_OSEventFreeList
4501                     ; 246                  OS_EXIT_CRITICAL();
4503 fa530 e680          	ldab	OFST-4,s
4504 fa532 164b54        	jsr	_OS_CPU_SR_Restore
4506                     ; 247                  *perr                  = OS_ERR_NONE;
4508 fa535 87            	clra	
4509 fa536 6af3000a      	staa	[OFST+6,s]
4510                     ; 248                  pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
4512 fa53a c7            	clrb	
4514 fa53b 200e          	bra	LC002
4515 fa53d               L5503:
4516                     ; 250                  OS_EXIT_CRITICAL();
4518 fa53d e680          	ldab	OFST-4,s
4519 fa53f 87            	clra	
4520 fa540 164b54        	jsr	_OS_CPU_SR_Restore
4522                     ; 251                  *perr                  = OS_ERR_TASK_WAITING;
4524 fa543 c649          	ldab	#73
4525                     ; 252                  pevent_return          = pevent;
4527 fa545               LC003:
4528 fa545 6bf3000a      	stab	[OFST+6,s]
4529 fa549 ec84          	ldd	OFST+0,s
4530 fa54b               LC002:
4531 fa54b 6c81          	std	OFST-3,s
4532 fa54d 203d          	bra	L3503
4533 fa54f               L1603:
4534                     ; 258                  (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
4536 fa54f cc0002        	ldd	#2
4537 fa552 3b            	pshd	
4538 fa553 53            	decb	
4539 fa554 3b            	pshd	
4540 fa555 c7            	clrb	
4541 fa556 3b            	pshd	
4542 fa557 ec8a          	ldd	OFST+6,s
4543 fa559 1645fc        	jsr	_OS_EventTaskRdy
4545 fa55c 1b86          	leas	6,s
4546 fa55e ed84          	ldy	OFST+0,s
4547 fa560               L3603:
4548                     ; 256         case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
4548                     ; 257              while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for semaphore    */
4550 fa560 e645          	ldab	5,y
4551 fa562 26eb          	bne	L1603
4552                     ; 261              pevent->OSEventName    = (INT8U *)(void *)"?";
4554 fa564 cc7741        	ldd	#L5672
4555 fa567 6c4e          	std	14,y
4556                     ; 263              pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
4558 fa569 87            	clra	
4559 fa56a 6a40          	staa	0,y
4560                     ; 264              pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
4562 fa56c 1801411702    	movw	_OSEventFreeList,1,y
4563                     ; 265              pevent->OSEventCnt     = 0u;
4565 fa571 c7            	clrb	
4566 fa572 6c43          	std	3,y
4567                     ; 266              OSEventFreeList        = pevent;              /* Get next free event control block        */
4569 fa574 1805841702    	movw	OFST+0,s,_OSEventFreeList
4570                     ; 267              OS_EXIT_CRITICAL();
4572 fa579 e680          	ldab	OFST-4,s
4573 fa57b 164b54        	jsr	_OS_CPU_SR_Restore
4575                     ; 268              if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
4577 fa57e e683          	ldab	OFST-1,s
4578 fa580 042103        	dbne	b,L7603
4579                     ; 269                  OS_Sched();                               /* Find highest priority task ready to run  */
4581 fa583 164933        	jsr	_OS_Sched
4583 fa586               L7603:
4584                     ; 271              *perr                  = OS_ERR_NONE;
4586 fa586 87            	clra	
4587 fa587 6af3000a      	staa	[OFST+6,s]
4588                     ; 272              pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
4590 fa58b c7            	clrb	
4591                     ; 273              break;
4593 fa58c               L3503:
4594                     ; 284     return (pevent_return);
4599 fa58c 1b86          	leas	6,s
4600 fa58e 3d            	rts	
4668                     ; 321 _NEAR void  OSSemPend (OS_EVENT  *pevent,
4668                     ; 322                       INT32U     timeout,
4668                     ; 323                       INT8U     *perr)
4668                     ; 324 {
4669                     	switch	.text
4670 fa58f               _OSSemPend:
4672 fa58f 3b            	pshd	
4673 fa590 37            	pshb	
4674       00000001      OFST:	set	1
4677                     ; 326     OS_CPU_SR  cpu_sr = 0u;
4679                     ; 338     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
4681 fa591 046404        	tbne	d,L7213
4682                     ; 339         *perr = OS_ERR_PEVENT_NULL;
4684 fa594 c604          	ldab	#4
4685                     ; 340         return;
4687 fa596 200a          	bra	LC004
4688 fa598               L7213:
4689                     ; 346     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
4692 fa598 e6f30001      	ldab	[OFST+0,s]
4693 fa59c c103          	cmpb	#3
4694 fa59e 2709          	beq	L1313
4695                     ; 347         *perr = OS_ERR_EVENT_TYPE;
4697 fa5a0 c601          	ldab	#1
4698 fa5a2               LC004:
4699 fa5a2 6bf30009      	stab	[OFST+8,s]
4700                     ; 349         return;
4701 fa5a6               L22:
4705 fa5a6 1b83          	leas	3,s
4706 fa5a8 3d            	rts	
4707 fa5a9               L1313:
4708                     ; 351     if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
4710 fa5a9 f6163c        	ldab	_OSIntNesting
4711 fa5ac 2704          	beq	L3313
4712                     ; 352         *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
4714 fa5ae c602          	ldab	#2
4715                     ; 354         return;
4718 fa5b0 20f0          	bra	LC004
4719 fa5b2               L3313:
4720                     ; 356     if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
4722 fa5b2 f6163b        	ldab	_OSLockNesting
4723 fa5b5 2704          	beq	L5313
4724                     ; 357         *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
4726 fa5b7 c60d          	ldab	#13
4727                     ; 359         return;
4730 fa5b9 20e7          	bra	LC004
4731 fa5bb               L5313:
4732                     ; 361     OS_ENTER_CRITICAL();
4734 fa5bb 164b4f        	jsr	_OS_CPU_SR_Save
4736 fa5be 6b80          	stab	OFST-1,s
4737                     ; 362     if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
4739 fa5c0 ed81          	ldy	OFST+0,s
4740 fa5c2 ee43          	ldx	3,y
4741 fa5c4 270d          	beq	L7313
4742                     ; 363         pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
4744 fa5c6 09            	dex	
4745 fa5c7 6e43          	stx	3,y
4746                     ; 364         OS_EXIT_CRITICAL();
4748 fa5c9 87            	clra	
4749 fa5ca 164b54        	jsr	_OS_CPU_SR_Restore
4751                     ; 365         *perr = OS_ERR_NONE;
4753 fa5cd 69f30009      	clr	[OFST+8,s]
4754                     ; 367         return;
4757 fa5d1 20d3          	bra	L22
4758 fa5d3               L7313:
4759                     ; 370     OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
4761 fa5d3 fd1588        	ldy	_OSTCBCur
4762 fa5d6 0ce82201      	bset	34,y,1
4763                     ; 371     OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
4765 fa5da 69e823        	clr	35,y
4766                     ; 372     OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
4768 fa5dd ec87          	ldd	OFST+6,s
4769 fa5df 6ce820        	std	32,y
4770 fa5e2 ec85          	ldd	OFST+4,s
4771 fa5e4 6ce81e        	std	30,y
4772                     ; 373     OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
4774 fa5e7 ec81          	ldd	OFST+0,s
4775 fa5e9 164690        	jsr	_OS_EventTaskWait
4777                     ; 374     OS_EXIT_CRITICAL();
4779 fa5ec e680          	ldab	OFST-1,s
4780 fa5ee 87            	clra	
4781 fa5ef 164b54        	jsr	_OS_CPU_SR_Restore
4783                     ; 375     OS_Sched();                                       /* Find next highest priority task ready         */
4785 fa5f2 164933        	jsr	_OS_Sched
4787                     ; 376     OS_ENTER_CRITICAL();
4789 fa5f5 164b4f        	jsr	_OS_CPU_SR_Save
4791 fa5f8 6b80          	stab	OFST-1,s
4792                     ; 377     switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
4794 fa5fa fd1588        	ldy	_OSTCBCur
4795 fa5fd e6e823        	ldab	35,y
4797 fa600 2708          	beq	L1703
4798 fa602 04010f        	dbeq	b,L5703
4799 fa605 040108        	dbeq	b,L3703
4800 fa608 200a          	bra	L5703
4801 fa60a               L1703:
4802                     ; 378         case OS_STAT_PEND_OK:
4802                     ; 379              *perr = OS_ERR_NONE;
4804 fa60a 69f30009      	clr	[OFST+8,s]
4805                     ; 380              break;
4807 fa60e 2017          	bra	L3413
4808 fa610               L3703:
4809                     ; 382         case OS_STAT_PEND_ABORT:
4809                     ; 383              *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
4811 fa610 c60e          	ldab	#14
4812                     ; 384              break;
4814 fa612 200c          	bra	LC005
4815 fa614               L5703:
4816                     ; 386         case OS_STAT_PEND_TO:
4816                     ; 387         default:
4816                     ; 388              OS_EventTaskRemove(OSTCBCur, pevent);
4818 fa614 ec81          	ldd	OFST+0,s
4819 fa616 3b            	pshd	
4820 fa617 b764          	tfr	y,d
4821 fa619 164737        	jsr	_OS_EventTaskRemove
4823 fa61c 1b82          	leas	2,s
4824                     ; 389              *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
4826 fa61e c60a          	ldab	#10
4827 fa620               LC005:
4828 fa620 6bf30009      	stab	[OFST+8,s]
4829                     ; 390              break;
4831 fa624 fd1588        	ldy	_OSTCBCur
4832 fa627               L3413:
4833                     ; 392     OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
4835 fa627 c7            	clrb	
4836 fa628 6be822        	stab	34,y
4837                     ; 393     OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
4839 fa62b 87            	clra	
4840 fa62c 6ae823        	staa	35,y
4841                     ; 394     OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
4843 fa62f 6ce812        	std	18,y
4844                     ; 396     OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
4846 fa632 6ce814        	std	20,y
4847                     ; 397     OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
4849 fa635 6ce816        	std	22,y
4850                     ; 399     OS_EXIT_CRITICAL();
4852 fa638 e680          	ldab	OFST-1,s
4853 fa63a 164b54        	jsr	_OS_CPU_SR_Restore
4855                     ; 402 }
4859 fa63d 1b83          	leas	3,s
4860 fa63f 3d            	rts	
4931                     ; 439 _NEAR INT8U  OSSemPendAbort (OS_EVENT  *pevent,
4931                     ; 440                             INT8U      opt,
4931                     ; 441                             INT8U     *perr)
4931                     ; 442 {
4932                     	switch	.text
4933 fa640               _OSSemPendAbort:
4935 fa640 3b            	pshd	
4936       00000002      OFST:	set	2
4939                     ; 445     OS_CPU_SR  cpu_sr = 0u;
4941                     ; 457     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
4943 fa641 6cae          	std	2,-s
4944 fa643 2604          	bne	L3023
4945                     ; 458         *perr = OS_ERR_PEVENT_NULL;
4947 fa645 c604          	ldab	#4
4948                     ; 459         return (0u);
4951 fa647 200a          	bra	LC006
4952 fa649               L3023:
4953                     ; 462     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
4955 fa649 e6f30002      	ldab	[OFST+0,s]
4956 fa64d c103          	cmpb	#3
4957 fa64f 270a          	beq	L5023
4958                     ; 463         *perr = OS_ERR_EVENT_TYPE;
4960 fa651 c601          	ldab	#1
4961                     ; 464         return (0u);
4963 fa653               LC006:
4964 fa653 6bf30008      	stab	[OFST+6,s]
4965 fa657 c7            	clrb	
4967 fa658               L62:
4969 fa658 1b84          	leas	4,s
4970 fa65a 3d            	rts	
4971 fa65b               L5023:
4972                     ; 466     OS_ENTER_CRITICAL();
4974 fa65b 164b4f        	jsr	_OS_CPU_SR_Save
4976 fa65e 6b81          	stab	OFST-1,s
4977                     ; 467     if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting on semaphore?         */
4979 fa660 ed82          	ldy	OFST+0,s
4980 fa662 e745          	tst	5,y
4981 fa664 2748          	beq	L7023
4982                     ; 468         nbr_tasks = 0u;
4984 fa666 6980          	clr	OFST-2,s
4985                     ; 469         switch (opt) {
4987 fa668 e687          	ldab	OFST+5,s
4989 fa66a 271e          	beq	L7413
4990 fa66c 040115        	dbeq	b,L7123
4991 fa66f 2019          	bra	L7413
4992 fa671               L5123:
4993                     ; 472                      (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
4995 fa671 cc0002        	ldd	#2
4996 fa674 3b            	pshd	
4997 fa675 53            	decb	
4998 fa676 3b            	pshd	
4999 fa677 c7            	clrb	
5000 fa678 3b            	pshd	
5001 fa679 ec88          	ldd	OFST+6,s
5002 fa67b 1645fc        	jsr	_OS_EventTaskRdy
5004 fa67e 1b86          	leas	6,s
5005                     ; 473                      nbr_tasks++;
5007 fa680 6280          	inc	OFST-2,s
5008 fa682 ed82          	ldy	OFST+0,s
5009 fa684               L7123:
5010                     ; 470             case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
5010                     ; 471                  while (pevent->OSEventGrp != 0u) {   /* Yes, ready ALL tasks waiting on semaphore     */
5012 fa684 e645          	ldab	5,y
5013 fa686 26e9          	bne	L5123
5014                     ; 475                  break;
5016 fa688 2011          	bra	L3123
5017 fa68a               L7413:
5018                     ; 477             case OS_PEND_OPT_NONE:
5018                     ; 478             default:                                  /* No,  ready HPT       waiting on semaphore     */
5018                     ; 479                  (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
5020 fa68a cc0002        	ldd	#2
5021 fa68d 3b            	pshd	
5022 fa68e 53            	decb	
5023 fa68f 3b            	pshd	
5024 fa690 c7            	clrb	
5025 fa691 3b            	pshd	
5026 fa692 b764          	tfr	y,d
5027 fa694 1645fc        	jsr	_OS_EventTaskRdy
5029 fa697 1b86          	leas	6,s
5030                     ; 480                  nbr_tasks++;
5032 fa699 6280          	inc	OFST-2,s
5033                     ; 481                  break;
5035 fa69b               L3123:
5036                     ; 483         OS_EXIT_CRITICAL();
5038 fa69b e681          	ldab	OFST-1,s
5039 fa69d 87            	clra	
5040 fa69e 164b54        	jsr	_OS_CPU_SR_Restore
5042                     ; 484         OS_Sched();                                   /* Find HPT ready to run                         */
5044 fa6a1 164933        	jsr	_OS_Sched
5046                     ; 485         *perr = OS_ERR_PEND_ABORT;
5048 fa6a4 c60e          	ldab	#14
5049 fa6a6 6bf30008      	stab	[OFST+6,s]
5050                     ; 486         return (nbr_tasks);
5052 fa6aa e680          	ldab	OFST-2,s
5054 fa6ac 20aa          	bra	L62
5055 fa6ae               L7023:
5056                     ; 488     OS_EXIT_CRITICAL();
5058 fa6ae 87            	clra	
5059 fa6af 164b54        	jsr	_OS_CPU_SR_Restore
5061                     ; 489     *perr = OS_ERR_NONE;
5063 fa6b2 c7            	clrb	
5064 fa6b3 6bf30008      	stab	[OFST+6,s]
5065                     ; 490     return (0u);                                      /* No tasks waiting on semaphore                 */
5068 fa6b7 209f          	bra	L62
5115                     ; 513 _NEAR INT8U  OSSemPost (OS_EVENT *pevent)
5115                     ; 514 {
5116                     	switch	.text
5117 fa6b9               _OSSemPost:
5119 fa6b9 3b            	pshd	
5120 fa6ba 37            	pshb	
5121       00000001      OFST:	set	1
5124                     ; 516     OS_CPU_SR  cpu_sr = 0u;
5126                     ; 521     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
5128 fa6bb 046404        	tbne	d,L5423
5129                     ; 522         return (OS_ERR_PEVENT_NULL);
5131 fa6be c604          	ldab	#4
5133 fa6c0 200a          	bra	L23
5134 fa6c2               L5423:
5135                     ; 528     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
5138 fa6c2 e6f30001      	ldab	[OFST+0,s]
5139 fa6c6 c103          	cmpb	#3
5140 fa6c8 2705          	beq	L7423
5141                     ; 530         return (OS_ERR_EVENT_TYPE);
5144 fa6ca c601          	ldab	#1
5146 fa6cc               L23:
5148 fa6cc 1b83          	leas	3,s
5149 fa6ce 3d            	rts	
5150 fa6cf               L7423:
5151                     ; 532     OS_ENTER_CRITICAL();
5153 fa6cf 164b4f        	jsr	_OS_CPU_SR_Save
5155 fa6d2 6b80          	stab	OFST-1,s
5156                     ; 533     if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
5158 fa6d4 ed81          	ldy	OFST+0,s
5159 fa6d6 e745          	tst	5,y
5160 fa6d8 271a          	beq	L1523
5161                     ; 535         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
5163 fa6da 87            	clra	
5164 fa6db c7            	clrb	
5165 fa6dc 3b            	pshd	
5166 fa6dd 52            	incb	
5167 fa6de 3b            	pshd	
5168 fa6df c7            	clrb	
5169 fa6e0 3b            	pshd	
5170 fa6e1 b764          	tfr	y,d
5171 fa6e3 1645fc        	jsr	_OS_EventTaskRdy
5173 fa6e6 1b86          	leas	6,s
5174                     ; 536         OS_EXIT_CRITICAL();
5176 fa6e8 e680          	ldab	OFST-1,s
5177 fa6ea 87            	clra	
5178 fa6eb 164b54        	jsr	_OS_CPU_SR_Restore
5180                     ; 537         OS_Sched();                                   /* Find HPT ready to run                         */
5182 fa6ee 164933        	jsr	_OS_Sched
5184                     ; 539         return (OS_ERR_NONE);
5187 fa6f1 c7            	clrb	
5189 fa6f2 20d8          	bra	L23
5190 fa6f4               L1523:
5191                     ; 541     if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
5193 fa6f4 ee43          	ldx	3,y
5194 fa6f6 8effff        	cpx	#-1
5195 fa6f9 240a          	bhs	L3523
5196                     ; 542         pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
5198 fa6fb 08            	inx	
5199 fa6fc 6e43          	stx	3,y
5200                     ; 543         OS_EXIT_CRITICAL();
5202 fa6fe 87            	clra	
5203 fa6ff 164b54        	jsr	_OS_CPU_SR_Restore
5205                     ; 545         return (OS_ERR_NONE);
5208 fa702 c7            	clrb	
5210 fa703 20c7          	bra	L23
5211 fa705               L3523:
5212                     ; 547     OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
5214 fa705 87            	clra	
5215 fa706 164b54        	jsr	_OS_CPU_SR_Restore
5217                     ; 550     return (OS_ERR_SEM_OVF);
5220 fa709 c633          	ldab	#51
5222 fa70b 20bf          	bra	L23
5337                     ; 574 _NEAR INT8U  OSSemQuery (OS_EVENT     *pevent,
5337                     ; 575                         OS_SEM_DATA  *p_sem_data)
5337                     ; 576 {
5338                     	switch	.text
5339 fa70d               _OSSemQuery:
5341 fa70d 3b            	pshd	
5342 fa70e 1b9a          	leas	-6,s
5343       00000006      OFST:	set	6
5346                     ; 581     OS_CPU_SR   cpu_sr = 0u;
5348                     ; 587     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
5350 fa710 046404        	tbne	d,L3333
5351                     ; 588         return (OS_ERR_PEVENT_NULL);
5353 fa713 c604          	ldab	#4
5355 fa715 2006          	bra	L63
5356 fa717               L3333:
5357                     ; 590     if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
5359 fa717 ec8a          	ldd	OFST+4,s
5360 fa719 2605          	bne	L5333
5361                     ; 591         return (OS_ERR_PDATA_NULL);
5363 fa71b c609          	ldab	#9
5365 fa71d               L63:
5367 fa71d 1b88          	leas	8,s
5368 fa71f 3d            	rts	
5369 fa720               L5333:
5370                     ; 594     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
5372 fa720 e6f30006      	ldab	[OFST+0,s]
5373 fa724 c103          	cmpb	#3
5374 fa726 2704          	beq	L7333
5375                     ; 595         return (OS_ERR_EVENT_TYPE);
5377 fa728 c601          	ldab	#1
5379 fa72a 20f1          	bra	L63
5380 fa72c               L7333:
5381                     ; 597     OS_ENTER_CRITICAL();
5383 fa72c 164b4f        	jsr	_OS_CPU_SR_Save
5385 fa72f 6b85          	stab	OFST-1,s
5386                     ; 598     p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
5388 fa731 ed8a          	ldy	OFST+4,s
5389 fa733 ee86          	ldx	OFST+0,s
5390 fa735 180a054a      	movb	5,x,10,y
5391                     ; 599     psrc                   = &pevent->OSEventTbl[0];
5393 fa739 ed86          	ldy	OFST+0,s
5394 fa73b 1946          	leay	6,y
5395 fa73d 6d81          	sty	OFST-5,s
5396                     ; 600     pdest                  = &p_sem_data->OSEventTbl[0];
5398 fa73f ed8a          	ldy	OFST+4,s
5399 fa741 1942          	leay	2,y
5400 fa743 6d83          	sty	OFST-3,s
5401                     ; 601     for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
5403 fa745 6980          	clr	OFST-6,s
5404 fa747 ee81          	ldx	OFST-5,s
5405 fa749               L1433:
5406                     ; 602         *pdest++ = *psrc++;
5408 fa749 180a3070      	movb	1,x+,1,y+
5409                     ; 601     for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
5411 fa74d 6280          	inc	OFST-6,s
5414 fa74f e680          	ldab	OFST-6,s
5415 fa751 c108          	cmpb	#8
5416 fa753 25f4          	blo	L1433
5417 fa755 6e81          	stx	OFST-5,s
5418 fa757 6d83          	sty	OFST-3,s
5419                     ; 604     p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
5421 fa759 ed86          	ldy	OFST+0,s
5422 fa75b ec43          	ldd	3,y
5423 fa75d 6cf3000a      	std	[OFST+4,s]
5424                     ; 605     OS_EXIT_CRITICAL();
5426 fa761 e685          	ldab	OFST-1,s
5427 fa763 87            	clra	
5428 fa764 164b54        	jsr	_OS_CPU_SR_Restore
5430                     ; 606     return (OS_ERR_NONE);
5432 fa767 c7            	clrb	
5434 fa768 20b3          	bra	L63
5496                     ; 636 _NEAR void  OSSemSet (OS_EVENT  *pevent,
5496                     ; 637                      INT16U     cnt,
5496                     ; 638                      INT8U     *perr)
5496                     ; 639 {
5497                     	switch	.text
5498 fa76a               _OSSemSet:
5500 fa76a 3b            	pshd	
5501 fa76b 37            	pshb	
5502       00000001      OFST:	set	1
5505                     ; 641     OS_CPU_SR  cpu_sr = 0u;
5507                     ; 654     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
5509 fa76c 046404        	tbne	d,L7733
5510                     ; 655         *perr = OS_ERR_PEVENT_NULL;
5512 fa76f c604          	ldab	#4
5513                     ; 656         return;
5515 fa771 200a          	bra	LC007
5516 fa773               L7733:
5517                     ; 659     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
5519 fa773 e6f30001      	ldab	[OFST+0,s]
5520 fa777 c103          	cmpb	#3
5521 fa779 2709          	beq	L1043
5522                     ; 660         *perr = OS_ERR_EVENT_TYPE;
5524 fa77b c601          	ldab	#1
5525 fa77d               LC007:
5526 fa77d 6bf30007      	stab	[OFST+6,s]
5527                     ; 661         return;
5528 fa781               L24:
5531 fa781 1b83          	leas	3,s
5532 fa783 3d            	rts	
5533 fa784               L1043:
5534                     ; 663     OS_ENTER_CRITICAL();
5536 fa784 164b4f        	jsr	_OS_CPU_SR_Save
5538 fa787 6b80          	stab	OFST-1,s
5539                     ; 664     *perr = OS_ERR_NONE;
5541 fa789 69f30007      	clr	[OFST+6,s]
5542                     ; 665     if (pevent->OSEventCnt > 0u) {                    /* See if semaphore already has a count          */
5544 fa78d ed81          	ldy	OFST+0,s
5545 fa78f ec43          	ldd	3,y
5546                     ; 666         pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
5549 fa791 2604          	bne	LC008
5550                     ; 668         if (pevent->OSEventGrp == 0u) {               /*      See if task(s) waiting?                  */
5552 fa793 e645          	ldab	5,y
5553 fa795 2606          	bne	L7043
5554                     ; 669             pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
5556 fa797               LC008:
5557 fa797 18028543      	movw	OFST+4,s,3,y
5559 fa79b 2006          	bra	L5043
5560 fa79d               L7043:
5561                     ; 671             *perr              = OS_ERR_TASK_WAITING;
5563 fa79d c649          	ldab	#73
5564 fa79f 6bf30007      	stab	[OFST+6,s]
5565 fa7a3               L5043:
5566                     ; 674     OS_EXIT_CRITICAL();
5568 fa7a3 e680          	ldab	OFST-1,s
5569 fa7a5 87            	clra	
5570 fa7a6 164b54        	jsr	_OS_CPU_SR_Restore
5572                     ; 675 }
5574 fa7a9 20d6          	bra	L24
5586                     	xref	_OS_Sched
5587                     	xref	_OS_EventWaitListInit
5588                     	xref	_OS_EventTaskRemove
5589                     	xref	_OS_EventTaskWait
5590                     	xref	_OS_EventTaskRdy
5591                     	xdef	_OSSemSet
5592                     	xdef	_OSSemQuery
5593                     	xdef	_OSSemPost
5594                     	xdef	_OSSemPendAbort
5595                     	xdef	_OSSemPend
5596                     	xdef	_OSSemDel
5597                     	xdef	_OSSemCreate
5598                     	xdef	_OSSemAccept
5599                     	xref	_OSTCBCur
5600                     	xref	_OSLockNesting
5601                     	xref	_OSIntNesting
5602                     	xref	_OSEventFreeList
5603                     	xref	_OS_CPU_SR_Restore
5604                     	xref	_OS_CPU_SR_Save
5605                     .const:	section	.data
5606 fb741               L5672:
5607 fb741 3f00          	dc.b	"?",0
5628                     	end
