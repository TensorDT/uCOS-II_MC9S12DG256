   1                     ; C Compiler for 68HCS12 [COSMIC Software]
   2                     ; Parser V4.11.9 - 08 Feb 2017
   3                     ; Generator V4.8.12 - 22 Feb 2017
   4                     ; Optimizer V4.7.11 - 22 Feb 2017
1065                     .const:	section	.data
1066 fb589               _OSUnMapTbl:
1067 fb589 00            	dc.b	0
1068 fb58a 00            	dc.b	0
1069 fb58b 01            	dc.b	1
1070 fb58c 00            	dc.b	0
1071 fb58d 02            	dc.b	2
1072 fb58e 00            	dc.b	0
1073 fb58f 01            	dc.b	1
1074 fb590 00            	dc.b	0
1075 fb591 03            	dc.b	3
1076 fb592 00            	dc.b	0
1077 fb593 01            	dc.b	1
1078 fb594 00            	dc.b	0
1079 fb595 02            	dc.b	2
1080 fb596 00            	dc.b	0
1081 fb597 01            	dc.b	1
1082 fb598 00            	dc.b	0
1083 fb599 04            	dc.b	4
1084 fb59a 00            	dc.b	0
1085 fb59b 01            	dc.b	1
1086 fb59c 00            	dc.b	0
1087 fb59d 02            	dc.b	2
1088 fb59e 00            	dc.b	0
1089 fb59f 01            	dc.b	1
1090 fb5a0 00            	dc.b	0
1091 fb5a1 03            	dc.b	3
1092 fb5a2 00            	dc.b	0
1093 fb5a3 01            	dc.b	1
1094 fb5a4 00            	dc.b	0
1095 fb5a5 02            	dc.b	2
1096 fb5a6 00            	dc.b	0
1097 fb5a7 01            	dc.b	1
1098 fb5a8 00            	dc.b	0
1099 fb5a9 05            	dc.b	5
1100 fb5aa 00            	dc.b	0
1101 fb5ab 01            	dc.b	1
1102 fb5ac 00            	dc.b	0
1103 fb5ad 02            	dc.b	2
1104 fb5ae 00            	dc.b	0
1105 fb5af 01            	dc.b	1
1106 fb5b0 00            	dc.b	0
1107 fb5b1 03            	dc.b	3
1108 fb5b2 00            	dc.b	0
1109 fb5b3 01            	dc.b	1
1110 fb5b4 00            	dc.b	0
1111 fb5b5 02            	dc.b	2
1112 fb5b6 00            	dc.b	0
1113 fb5b7 01            	dc.b	1
1114 fb5b8 00            	dc.b	0
1115 fb5b9 04            	dc.b	4
1116 fb5ba 00            	dc.b	0
1117 fb5bb 01            	dc.b	1
1118 fb5bc 00            	dc.b	0
1119 fb5bd 02            	dc.b	2
1120 fb5be 00            	dc.b	0
1121 fb5bf 01            	dc.b	1
1122 fb5c0 00            	dc.b	0
1123 fb5c1 03            	dc.b	3
1124 fb5c2 00            	dc.b	0
1125 fb5c3 01            	dc.b	1
1126 fb5c4 00            	dc.b	0
1127 fb5c5 02            	dc.b	2
1128 fb5c6 00            	dc.b	0
1129 fb5c7 01            	dc.b	1
1130 fb5c8 00            	dc.b	0
1131 fb5c9 06            	dc.b	6
1132 fb5ca 00            	dc.b	0
1133 fb5cb 01            	dc.b	1
1134 fb5cc 00            	dc.b	0
1135 fb5cd 02            	dc.b	2
1136 fb5ce 00            	dc.b	0
1137 fb5cf 01            	dc.b	1
1138 fb5d0 00            	dc.b	0
1139 fb5d1 03            	dc.b	3
1140 fb5d2 00            	dc.b	0
1141 fb5d3 01            	dc.b	1
1142 fb5d4 00            	dc.b	0
1143 fb5d5 02            	dc.b	2
1144 fb5d6 00            	dc.b	0
1145 fb5d7 01            	dc.b	1
1146 fb5d8 00            	dc.b	0
1147 fb5d9 04            	dc.b	4
1148 fb5da 00            	dc.b	0
1149 fb5db 01            	dc.b	1
1150 fb5dc 00            	dc.b	0
1151 fb5dd 02            	dc.b	2
1152 fb5de 00            	dc.b	0
1153 fb5df 01            	dc.b	1
1154 fb5e0 00            	dc.b	0
1155 fb5e1 03            	dc.b	3
1156 fb5e2 00            	dc.b	0
1157 fb5e3 01            	dc.b	1
1158 fb5e4 00            	dc.b	0
1159 fb5e5 02            	dc.b	2
1160 fb5e6 00            	dc.b	0
1161 fb5e7 01            	dc.b	1
1162 fb5e8 00            	dc.b	0
1163 fb5e9 05            	dc.b	5
1164 fb5ea 00            	dc.b	0
1165 fb5eb 01            	dc.b	1
1166 fb5ec 00            	dc.b	0
1167 fb5ed 02            	dc.b	2
1168 fb5ee 00            	dc.b	0
1169 fb5ef 01            	dc.b	1
1170 fb5f0 00            	dc.b	0
1171 fb5f1 03            	dc.b	3
1172 fb5f2 00            	dc.b	0
1173 fb5f3 01            	dc.b	1
1174 fb5f4 00            	dc.b	0
1175 fb5f5 02            	dc.b	2
1176 fb5f6 00            	dc.b	0
1177 fb5f7 01            	dc.b	1
1178 fb5f8 00            	dc.b	0
1179 fb5f9 04            	dc.b	4
1180 fb5fa 00            	dc.b	0
1181 fb5fb 01            	dc.b	1
1182 fb5fc 00            	dc.b	0
1183 fb5fd 02            	dc.b	2
1184 fb5fe 00            	dc.b	0
1185 fb5ff 01            	dc.b	1
1186 fb600 00            	dc.b	0
1187 fb601 03            	dc.b	3
1188 fb602 00            	dc.b	0
1189 fb603 01            	dc.b	1
1190 fb604 00            	dc.b	0
1191 fb605 02            	dc.b	2
1192 fb606 00            	dc.b	0
1193 fb607 01            	dc.b	1
1194 fb608 00            	dc.b	0
1195 fb609 07            	dc.b	7
1196 fb60a 00            	dc.b	0
1197 fb60b 01            	dc.b	1
1198 fb60c 00            	dc.b	0
1199 fb60d 02            	dc.b	2
1200 fb60e 00            	dc.b	0
1201 fb60f 01            	dc.b	1
1202 fb610 00            	dc.b	0
1203 fb611 03            	dc.b	3
1204 fb612 00            	dc.b	0
1205 fb613 01            	dc.b	1
1206 fb614 00            	dc.b	0
1207 fb615 02            	dc.b	2
1208 fb616 00            	dc.b	0
1209 fb617 01            	dc.b	1
1210 fb618 00            	dc.b	0
1211 fb619 04            	dc.b	4
1212 fb61a 00            	dc.b	0
1213 fb61b 01            	dc.b	1
1214 fb61c 00            	dc.b	0
1215 fb61d 02            	dc.b	2
1216 fb61e 00            	dc.b	0
1217 fb61f 01            	dc.b	1
1218 fb620 00            	dc.b	0
1219 fb621 03            	dc.b	3
1220 fb622 00            	dc.b	0
1221 fb623 01            	dc.b	1
1222 fb624 00            	dc.b	0
1223 fb625 02            	dc.b	2
1224 fb626 00            	dc.b	0
1225 fb627 01            	dc.b	1
1226 fb628 00            	dc.b	0
1227 fb629 05            	dc.b	5
1228 fb62a 00            	dc.b	0
1229 fb62b 01            	dc.b	1
1230 fb62c 00            	dc.b	0
1231 fb62d 02            	dc.b	2
1232 fb62e 00            	dc.b	0
1233 fb62f 01            	dc.b	1
1234 fb630 00            	dc.b	0
1235 fb631 03            	dc.b	3
1236 fb632 00            	dc.b	0
1237 fb633 01            	dc.b	1
1238 fb634 00            	dc.b	0
1239 fb635 02            	dc.b	2
1240 fb636 00            	dc.b	0
1241 fb637 01            	dc.b	1
1242 fb638 00            	dc.b	0
1243 fb639 04            	dc.b	4
1244 fb63a 00            	dc.b	0
1245 fb63b 01            	dc.b	1
1246 fb63c 00            	dc.b	0
1247 fb63d 02            	dc.b	2
1248 fb63e 00            	dc.b	0
1249 fb63f 01            	dc.b	1
1250 fb640 00            	dc.b	0
1251 fb641 03            	dc.b	3
1252 fb642 00            	dc.b	0
1253 fb643 01            	dc.b	1
1254 fb644 00            	dc.b	0
1255 fb645 02            	dc.b	2
1256 fb646 00            	dc.b	0
1257 fb647 01            	dc.b	1
1258 fb648 00            	dc.b	0
1259 fb649 06            	dc.b	6
1260 fb64a 00            	dc.b	0
1261 fb64b 01            	dc.b	1
1262 fb64c 00            	dc.b	0
1263 fb64d 02            	dc.b	2
1264 fb64e 00            	dc.b	0
1265 fb64f 01            	dc.b	1
1266 fb650 00            	dc.b	0
1267 fb651 03            	dc.b	3
1268 fb652 00            	dc.b	0
1269 fb653 01            	dc.b	1
1270 fb654 00            	dc.b	0
1271 fb655 02            	dc.b	2
1272 fb656 00            	dc.b	0
1273 fb657 01            	dc.b	1
1274 fb658 00            	dc.b	0
1275 fb659 04            	dc.b	4
1276 fb65a 00            	dc.b	0
1277 fb65b 01            	dc.b	1
1278 fb65c 00            	dc.b	0
1279 fb65d 02            	dc.b	2
1280 fb65e 00            	dc.b	0
1281 fb65f 01            	dc.b	1
1282 fb660 00            	dc.b	0
1283 fb661 03            	dc.b	3
1284 fb662 00            	dc.b	0
1285 fb663 01            	dc.b	1
1286 fb664 00            	dc.b	0
1287 fb665 02            	dc.b	2
1288 fb666 00            	dc.b	0
1289 fb667 01            	dc.b	1
1290 fb668 00            	dc.b	0
1291 fb669 05            	dc.b	5
1292 fb66a 00            	dc.b	0
1293 fb66b 01            	dc.b	1
1294 fb66c 00            	dc.b	0
1295 fb66d 02            	dc.b	2
1296 fb66e 00            	dc.b	0
1297 fb66f 01            	dc.b	1
1298 fb670 00            	dc.b	0
1299 fb671 03            	dc.b	3
1300 fb672 00            	dc.b	0
1301 fb673 01            	dc.b	1
1302 fb674 00            	dc.b	0
1303 fb675 02            	dc.b	2
1304 fb676 00            	dc.b	0
1305 fb677 01            	dc.b	1
1306 fb678 00            	dc.b	0
1307 fb679 04            	dc.b	4
1308 fb67a 00            	dc.b	0
1309 fb67b 01            	dc.b	1
1310 fb67c 00            	dc.b	0
1311 fb67d 02            	dc.b	2
1312 fb67e 00            	dc.b	0
1313 fb67f 01            	dc.b	1
1314 fb680 00            	dc.b	0
1315 fb681 03            	dc.b	3
1316 fb682 00            	dc.b	0
1317 fb683 01            	dc.b	1
1318 fb684 00            	dc.b	0
1319 fb685 02            	dc.b	2
1320 fb686 00            	dc.b	0
1321 fb687 01            	dc.b	1
1322 fb688 00            	dc.b	0
1462                     ; 117 _NEAR INT8U  OSEventNameGet (OS_EVENT   *pevent,
1462                     ; 118                             INT8U     **pname,
1462                     ; 119                             INT8U      *perr)
1462                     ; 120 {
1463                     	switch	.text
1464 f807f               _OSEventNameGet:
1466 f807f 3b            	pshd	
1467       00000002      OFST:	set	2
1470                     ; 123     OS_CPU_SR  cpu_sr = 0u;
1472                     ; 136     if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
1474 f8080 6cae          	std	2,-s
1475 f8082 2604          	bne	L167
1476                     ; 137         *perr = OS_ERR_PEVENT_NULL;
1478 f8084 c604          	ldab	#4
1479                     ; 138         return (0u);
1482 f8086 2006          	bra	LC001
1483 f8088               L167:
1484                     ; 140     if (pname == (INT8U **)0) {                   /* Is 'pname' a NULL pointer?                         */
1486 f8088 ec86          	ldd	OFST+4,s
1487 f808a 260a          	bne	L367
1488                     ; 141         *perr = OS_ERR_PNAME_NULL;
1490 f808c c60c          	ldab	#12
1491                     ; 142         return (0u);
1493 f808e               LC001:
1494 f808e 6bf30008      	stab	[OFST+6,s]
1495 f8092 c7            	clrb	
1497 f8093               L6:
1499 f8093 1b84          	leas	4,s
1500 f8095 3d            	rts	
1501 f8096               L367:
1502                     ; 145     if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
1504 f8096 f61631        	ldab	_OSIntNesting
1505 f8099 2704          	beq	L567
1506                     ; 146         *perr  = OS_ERR_NAME_GET_ISR;
1508 f809b c611          	ldab	#17
1509                     ; 147         return (0u);
1512 f809d 20ef          	bra	LC001
1513 f809f               L567:
1514                     ; 149     switch (pevent->OSEventType) {
1516 f809f e6f30002      	ldab	[OFST+0,s]
1518 f80a3 04010d        	dbeq	b,L177
1519 f80a6 04010a        	dbeq	b,L177
1520 f80a9 040107        	dbeq	b,L177
1521 f80ac 040104        	dbeq	b,L177
1522                     ; 156         default:
1522                     ; 157              *perr = OS_ERR_EVENT_TYPE;
1524 f80af c601          	ldab	#1
1525                     ; 158              return (0u);
1528 f80b1 20db          	bra	LC001
1529                     ; 150         case OS_EVENT_TYPE_SEM:
1529                     ; 151         case OS_EVENT_TYPE_MUTEX:
1529                     ; 152         case OS_EVENT_TYPE_MBOX:
1529                     ; 153         case OS_EVENT_TYPE_Q:
1529                     ; 154              break;
1531 f80b3               L177:
1532                     ; 160     OS_ENTER_CRITICAL();
1534 f80b3 167522        	jsr	_OS_CPU_SR_Save
1536 f80b6 6b80          	stab	OFST-2,s
1537                     ; 161     *pname = pevent->OSEventName;
1539 f80b8 ee82          	ldx	OFST+0,s
1540 f80ba ec0e          	ldd	14,x
1541 f80bc ee86          	ldx	OFST+4,s
1542 f80be 6c00          	std	0,x
1543                     ; 162     len    = OS_StrLen(*pname);
1545 f80c0 164907        	jsr	_OS_StrLen
1547 f80c3 6b81          	stab	OFST-1,s
1548                     ; 163     OS_EXIT_CRITICAL();
1550 f80c5 e680          	ldab	OFST-2,s
1551 f80c7 87            	clra	
1552 f80c8 167527        	jsr	_OS_CPU_SR_Restore
1554                     ; 164     *perr  = OS_ERR_NONE;
1556 f80cb 69f30008      	clr	[OFST+6,s]
1557                     ; 165     return (len);
1559 f80cf e681          	ldab	OFST-1,s
1561 f80d1 20c0          	bra	L6
1627                     ; 197 _NEAR void  OSEventNameSet (OS_EVENT  *pevent,
1627                     ; 198                            INT8U     *pname,
1627                     ; 199                            INT8U     *perr)
1627                     ; 200 {
1628                     	switch	.text
1629 f80d3               _OSEventNameSet:
1631 f80d3 3b            	pshd	
1632 f80d4 37            	pshb	
1633       00000001      OFST:	set	1
1636                     ; 202     OS_CPU_SR  cpu_sr = 0u;
1638                     ; 215     if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
1640 f80d5 046404        	tbne	d,L1301
1641                     ; 216         *perr = OS_ERR_PEVENT_NULL;
1643 f80d8 c604          	ldab	#4
1644                     ; 217         return;
1646 f80da 2006          	bra	LC002
1647 f80dc               L1301:
1648                     ; 219     if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
1650 f80dc ec85          	ldd	OFST+4,s
1651 f80de 2609          	bne	L3301
1652                     ; 220         *perr = OS_ERR_PNAME_NULL;
1654 f80e0 c60c          	ldab	#12
1655 f80e2               LC002:
1656 f80e2 6bf30007      	stab	[OFST+6,s]
1657                     ; 221         return;
1658 f80e6               L21:
1661 f80e6 1b83          	leas	3,s
1662 f80e8 3d            	rts	
1663 f80e9               L3301:
1664                     ; 224     if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
1666 f80e9 f61631        	ldab	_OSIntNesting
1667 f80ec 2704          	beq	L5301
1668                     ; 225         *perr = OS_ERR_NAME_SET_ISR;
1670 f80ee c612          	ldab	#18
1671                     ; 226         return;
1673 f80f0 20f0          	bra	LC002
1674 f80f2               L5301:
1675                     ; 228     switch (pevent->OSEventType) {
1677 f80f2 e6f30001      	ldab	[OFST+0,s]
1679 f80f6 04010d        	dbeq	b,L1401
1680 f80f9 04010a        	dbeq	b,L1401
1681 f80fc 040107        	dbeq	b,L1401
1682 f80ff 040104        	dbeq	b,L1401
1683                     ; 235         default:
1683                     ; 236              *perr = OS_ERR_EVENT_TYPE;
1685 f8102 c601          	ldab	#1
1686                     ; 237              return;
1688 f8104 20dc          	bra	LC002
1689                     ; 229         case OS_EVENT_TYPE_SEM:
1689                     ; 230         case OS_EVENT_TYPE_MUTEX:
1689                     ; 231         case OS_EVENT_TYPE_MBOX:
1689                     ; 232         case OS_EVENT_TYPE_Q:
1689                     ; 233              break;
1691 f8106               L1401:
1692                     ; 239     OS_ENTER_CRITICAL();
1694 f8106 167522        	jsr	_OS_CPU_SR_Save
1696 f8109 6b80          	stab	OFST-1,s
1697                     ; 240     pevent->OSEventName = pname;
1699 f810b ed81          	ldy	OFST+0,s
1700 f810d 1802854e      	movw	OFST+4,s,14,y
1701                     ; 241     OS_EXIT_CRITICAL();
1703 f8111 87            	clra	
1704 f8112 167527        	jsr	_OS_CPU_SR_Restore
1706                     ; 243     *perr = OS_ERR_NONE;
1709 f8115 69f30007      	clr	[OFST+6,s]
1710                     ; 244 }
1712 f8119 20cb          	bra	L21
1940                     ; 320 _NEAR INT16U  OSEventPendMulti (OS_EVENT  **pevents_pend,
1940                     ; 321                                OS_EVENT  **pevents_rdy,
1940                     ; 322                                void      **pmsgs_rdy,
1940                     ; 323                                INT32U      timeout,
1940                     ; 324                                INT8U      *perr)
1940                     ; 325 {
1941                     	switch	.text
1942 f811b               _OSEventPendMulti:
1944 f811b 3b            	pshd	
1945 f811c 1b95          	leas	-11,s
1946       0000000b      OFST:	set	11
1949                     ; 335     OS_CPU_SR   cpu_sr = 0u;
1951                     ; 348     if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
1953 f811e 046402        	tbne	d,L3321
1954                     ; 349        *perr =  OS_ERR_PEVENT_NULL;
1956                     ; 350         return (0u);
1959 f8121 2006          	bra	LC003
1960 f8123               L3321:
1961                     ; 352     if (*pevents_pend  == (OS_EVENT *)0) {              /* Validate 'pevents_pend'                     */
1963 f8123 ecf3000b      	ldd	[OFST+0,s]
1964 f8127 260b          	bne	L5321
1965                     ; 353        *perr =  OS_ERR_PEVENT_NULL;
1967 f8129               LC003:
1968 f8129 c604          	ldab	#4
1969                     ; 354         return (0u);
1972 f812b               L61:
1973 f812b 6bf30017      	stab	[OFST+12,s]
1974 f812f 87            	clra	
1975 f8130 c7            	clrb	
1977 f8131 1b8d          	leas	13,s
1978 f8133 3d            	rts	
1979 f8134               L5321:
1980                     ; 356     if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
1982 f8134 ec8f          	ldd	OFST+4,s
1983                     ; 357        *perr =  OS_ERR_PEVENT_NULL;
1985                     ; 358         return (0u);
1988 f8136 27f1          	beq	LC003
1989                     ; 360     if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
1991 f8138 ecf011        	ldd	OFST+6,s
1992                     ; 361        *perr =  OS_ERR_PEVENT_NULL;
1994                     ; 362         return (0u);
1997 f813b 27ec          	beq	LC003
1998                     ; 366    *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
2000 f813d 87            	clra	
2001 f813e c7            	clrb	
2002 f813f 6cf3000f      	std	[OFST+4,s]
2003                     ; 368     pevents     =  pevents_pend;
2005 f8143 18028b86      	movw	OFST+0,s,OFST-5,s
2006                     ; 369     pevent      = *pevents;
2008 f8147 ecf30006      	ldd	[OFST-5,s]
2010 f814b 201b          	bra	L5421
2011 f814d               L3421:
2012                     ; 371         switch (pevent->OSEventType) {                  /* Validate event block types                  */
2014 f814d e6f30000      	ldab	[OFST-11,s]
2016 f8151 04010e        	dbeq	b,L3521
2017 f8154 04010b        	dbeq	b,L3521
2018 f8157 040108        	dbeq	b,L3521
2019 f815a 040101        	dbeq	b,L1501
2020 f815d 53            	decb	
2021 f815e               L1501:
2022                     ; 385             case OS_EVENT_TYPE_MUTEX:
2022                     ; 386             case OS_EVENT_TYPE_FLAG:
2022                     ; 387             default:
2022                     ; 388                 *perr = OS_ERR_EVENT_TYPE;
2024 f815e c601          	ldab	#1
2025                     ; 389                  return (0u);
2028 f8160 20c9          	bra	L61
2029 f8162               L3521:
2030                     ; 391         pevents++;
2032 f8162 ed86          	ldy	OFST-5,s
2033                     ; 392         pevent = *pevents;
2035 f8164 ec61          	ldd	2,+y
2036 f8166 6d86          	sty	OFST-5,s
2037 f8168               L5421:
2038 f8168 6c80          	std	OFST-11,s
2039                     ; 370     while  (pevent != (OS_EVENT *)0) {
2041 f816a 26e1          	bne	L3421
2042                     ; 395     if (OSIntNesting  > 0u) {                           /* See if called from ISR ...                  */
2044 f816c f61631        	ldab	_OSIntNesting
2045 f816f 2704          	beq	L5521
2046                     ; 396        *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
2048 f8171 c602          	ldab	#2
2049                     ; 397         return (0u);
2052 f8173 2007          	bra	L02
2053 f8175               L5521:
2054                     ; 399     if (OSLockNesting > 0u) {                           /* See if called with scheduler locked ...     */
2056 f8175 f61630        	ldab	_OSLockNesting
2057 f8178 270b          	beq	L7521
2058                     ; 400        *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
2060 f817a c60d          	ldab	#13
2061                     ; 401         return (0u);
2064 f817c               L02:
2065 f817c 6bf30017      	stab	[OFST+12,s]
2066 f8180 87            	clra	
2067 f8181 c7            	clrb	
2069 f8182 1b8d          	leas	13,s
2070 f8184 3d            	rts	
2071 f8185               L7521:
2072                     ; 404     events_rdy     =  OS_FALSE;
2074 f8185 87            	clra	
2075 f8186 6a88          	staa	OFST-3,s
2076                     ; 405     events_rdy_nbr =  0u;
2078 f8188 6c84          	std	OFST-7,s
2079                     ; 406     events_stat    =  OS_STAT_RDY;
2081 f818a 6989          	clr	OFST-2,s
2082                     ; 407     pevents        =  pevents_pend;
2084 f818c ed8b          	ldy	OFST+0,s
2085 f818e 6d86          	sty	OFST-5,s
2086                     ; 408     pevent         = *pevents;
2088 f8190 18024080      	movw	0,y,OFST-11,s
2089                     ; 409     OS_ENTER_CRITICAL();
2091 f8194 167522        	jsr	_OS_CPU_SR_Save
2093 f8197 6b8a          	stab	OFST-1,s
2095 f8199 ec80          	ldd	OFST-11,s
2096 f819b 064266        	bra	L3621
2097 f819e               L1621:
2098                     ; 411         switch (pevent->OSEventType) {
2100 f819e b746          	tfr	d,y
2101 f81a0 e640          	ldab	0,y
2103 f81a2 04013d        	dbeq	b,L5501
2104 f81a5 040164        	dbeq	b,L7501
2105 f81a8 04010d        	dbeq	b,L3501
2106 f81ab 53            	decb	
2107 f81ac 1827009b      	beq	L1601
2108 f81b0 53            	decb	
2109 f81b1 18270096      	beq	L1601
2110 f81b5 06424b        	bra	L1601
2111 f81b8               L3501:
2112                     ; 413             case OS_EVENT_TYPE_SEM:
2112                     ; 414                  if (pevent->OSEventCnt > 0u) {         /* If semaphore count > 0, resource available; */
2114 f81b8 ee43          	ldx	3,y
2115 f81ba 2721          	beq	L3721
2116                     ; 415                      pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
2118 f81bc 09            	dex	
2119 f81bd 6e43          	stx	3,y
2120                     ; 416                     *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
2122 f81bf ed8f          	ldy	OFST+4,s
2123 f81c1 18028071      	movw	OFST-11,s,2,y+
2124 f81c5 6d8f          	sty	OFST+4,s
2125                     ; 417                       events_rdy   =  OS_TRUE;
2127 f81c7 c601          	ldab	#1
2128 f81c9 6b88          	stab	OFST-3,s
2129                     ; 418                     *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
2131 f81cb 87            	clra	
2132 f81cc c7            	clrb	
2133 f81cd edf011        	ldy	OFST+6,s
2134 f81d0 6c71          	std	2,y+
2135 f81d2 6df011        	sty	OFST+6,s
2136                     ; 419                       events_rdy_nbr++;
2138 f81d5 ed84          	ldy	OFST-7,s
2139 f81d7 02            	iny	
2140 f81d8 6d84          	sty	OFST-7,s
2142 f81da 06425e        	bra	L1721
2143 f81dd               L3721:
2144                     ; 422                       events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
2146 f81dd 0c8901        	bset	OFST-2,s,1
2147 f81e0 207c          	bra	L1721
2148 f81e2               L5501:
2149                     ; 428             case OS_EVENT_TYPE_MBOX:
2149                     ; 429                  if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
2151 f81e2 ec41          	ldd	1,y
2152 f81e4 2721          	beq	L7721
2153                     ; 431                     *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
2155 f81e6 edf011        	ldy	OFST+6,s
2156 f81e9 6c71          	std	2,y+
2157 f81eb 6df011        	sty	OFST+6,s
2158                     ; 432                      pevent->OSEventPtr  = (void *)0;
2160 f81ee 87            	clra	
2161 f81ef c7            	clrb	
2162 f81f0 ed80          	ldy	OFST-11,s
2163 f81f2 6c41          	std	1,y
2164                     ; 433                     *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
2166 f81f4 b764          	tfr	y,d
2167 f81f6 ed8f          	ldy	OFST+4,s
2168 f81f8 6c71          	std	2,y+
2169 f81fa 6d8f          	sty	OFST+4,s
2170                     ; 434                       events_rdy         =  OS_TRUE;
2172 f81fc c601          	ldab	#1
2173 f81fe 6b88          	stab	OFST-3,s
2174                     ; 435                       events_rdy_nbr++;
2176 f8200 ed84          	ldy	OFST-7,s
2177 f8202 02            	iny	
2178 f8203 6d84          	sty	OFST-7,s
2180 f8205 2057          	bra	L1721
2181 f8207               L7721:
2182                     ; 438                       events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
2184 f8207 0c8902        	bset	OFST-2,s,2
2185 f820a 2052          	bra	L1721
2186 f820c               L7501:
2187                     ; 444             case OS_EVENT_TYPE_Q:
2187                     ; 445                  pq = (OS_Q *)pevent->OSEventPtr;
2189 f820c ed41          	ldy	1,y
2190 f820e 6d82          	sty	OFST-9,s
2191                     ; 446                  if (pq->OSQEntries > 0u) {             /* If queue NOT empty;                     ... */
2193 f8210 ec4c          	ldd	12,y
2194 f8212 2732          	beq	L3031
2195                     ; 448                     *pmsgs_rdy++ = (void *)*pq->OSQOut++;
2197 f8214 ee48          	ldx	8,y
2198 f8216 ec31          	ldd	2,x+
2199 f8218 6e48          	stx	8,y
2200 f821a edf011        	ldy	OFST+6,s
2201 f821d 6c71          	std	2,y+
2202 f821f 6df011        	sty	OFST+6,s
2203                     ; 449                      if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
2205 f8222 ed82          	ldy	OFST-9,s
2206 f8224 ec48          	ldd	8,y
2207 f8226 ac44          	cpd	4,y
2208 f8228 2604          	bne	L5031
2209                     ; 450                          pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
2211 f822a 18024248      	movw	2,y,8,y
2212 f822e               L5031:
2213                     ; 452                      pq->OSQEntries--;                  /* Update number of queue entries              */
2215 f822e ee4c          	ldx	12,y
2216 f8230 09            	dex	
2217 f8231 6e4c          	stx	12,y
2218                     ; 453                     *pevents_rdy++ = pevent;            /* ... and return available queue event        */
2220 f8233 ed8f          	ldy	OFST+4,s
2221 f8235 18028071      	movw	OFST-11,s,2,y+
2222 f8239 6d8f          	sty	OFST+4,s
2223                     ; 454                       events_rdy   = OS_TRUE;
2225 f823b c601          	ldab	#1
2226 f823d 6b88          	stab	OFST-3,s
2227                     ; 455                       events_rdy_nbr++;
2229 f823f ed84          	ldy	OFST-7,s
2230 f8241 02            	iny	
2231 f8242 6d84          	sty	OFST-7,s
2233 f8244 2018          	bra	L1721
2234 f8246               L3031:
2235                     ; 458                       events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
2237 f8246 0c8904        	bset	OFST-2,s,4
2238 f8249 2013          	bra	L1721
2239 f824b               L1601:
2240                     ; 463             case OS_EVENT_TYPE_MUTEX:
2240                     ; 464             case OS_EVENT_TYPE_FLAG:
2240                     ; 465             default:
2240                     ; 466                  OS_EXIT_CRITICAL();
2242 f824b e68a          	ldab	OFST-1,s
2243 f824d 87            	clra	
2244 f824e 167527        	jsr	_OS_CPU_SR_Restore
2246                     ; 467                 *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
2248 f8251 87            	clra	
2249 f8252 c7            	clrb	
2250 f8253 6cf3000f      	std	[OFST+4,s]
2251                     ; 468                 *perr        =  OS_ERR_EVENT_TYPE;
2253 f8257 52            	incb	
2254 f8258 6bf30017      	stab	[OFST+12,s]
2255                     ; 469                  return (events_rdy_nbr);
2258 f825c 201f          	bra	L22
2259 f825e               L1721:
2260                     ; 471         pevents++;
2262 f825e ed86          	ldy	OFST-5,s
2263                     ; 472         pevent = *pevents;
2265 f8260 ec61          	ldd	2,+y
2266 f8262 6d86          	sty	OFST-5,s
2267 f8264 6c80          	std	OFST-11,s
2268 f8266               L3621:
2269                     ; 410     while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
2271 f8266 1826ff34      	bne	L1621
2272                     ; 475     if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
2274 f826a e688          	ldab	OFST-3,s
2275 f826c 042113        	dbne	b,L1131
2276                     ; 476        *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
2278 f826f 87            	clra	
2279 f8270 6cf3000f      	std	[OFST+4,s]
2280                     ; 477         OS_EXIT_CRITICAL();
2282 f8274 e68a          	ldab	OFST-1,s
2283 f8276 167527        	jsr	_OS_CPU_SR_Restore
2285                     ; 478        *perr        =  OS_ERR_NONE;
2287 f8279 69f30017      	clr	[OFST+12,s]
2288                     ; 479         return (events_rdy_nbr);
2291 f827d               L22:
2292 f827d ec84          	ldd	OFST-7,s
2294 f827f 1b8d          	leas	13,s
2295 f8281 3d            	rts	
2296 f8282               L1131:
2297                     ; 483     OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
2297                     ; 484                                OS_STAT_MULTI;           /* ... pend on multiple events                 */
2299 f8282 fd157d        	ldy	_OSTCBCur
2300 f8285 e689          	ldab	OFST-2,s
2301 f8287 ca80          	orab	#128
2302 f8289 eae822        	orab	34,y
2303 f828c 6be822        	stab	34,y
2304                     ; 485     OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
2306 f828f 69e823        	clr	35,y
2307                     ; 486     OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
2309 f8292 ecf015        	ldd	OFST+10,s
2310 f8295 6ce820        	std	32,y
2311 f8298 ecf013        	ldd	OFST+8,s
2312 f829b 6ce81e        	std	30,y
2313                     ; 487     OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
2315 f829e ec8b          	ldd	OFST+0,s
2316 f82a0 16462c        	jsr	_OS_EventTaskWaitMulti
2318                     ; 489     OS_EXIT_CRITICAL();
2320 f82a3 e68a          	ldab	OFST-1,s
2321 f82a5 87            	clra	
2322 f82a6 167527        	jsr	_OS_CPU_SR_Restore
2324                     ; 490     OS_Sched();                                         /* Find next highest priority task ready       */
2326 f82a9 16488b        	jsr	_OS_Sched
2328                     ; 491     OS_ENTER_CRITICAL();
2330 f82ac 167522        	jsr	_OS_CPU_SR_Save
2332 f82af 6b8a          	stab	OFST-1,s
2333                     ; 493     switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
2335 f82b1 fd157d        	ldy	_OSTCBCur
2336 f82b4 e6e823        	ldab	35,y
2338 f82b7 2706          	beq	L3601
2339 f82b9 04011e        	dbeq	b,L5601
2340 f82bc 04211b        	dbne	b,L5601
2341 f82bf               L3601:
2342                     ; 494         case OS_STAT_PEND_OK:
2342                     ; 495         case OS_STAT_PEND_ABORT:
2342                     ; 496              pevent = OSTCBCur->OSTCBEventMultiRdy;
2344 f82bf ece816        	ldd	22,y
2345 f82c2 6c80          	std	OFST-11,s
2346                     ; 497              if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
2348 f82c4 270f          	beq	L7131
2349                     ; 498                 *pevents_rdy++   =  pevent;             /* ... return available event ...              */
2351 f82c6 ed8f          	ldy	OFST+4,s
2352 f82c8 6c71          	std	2,y+
2353 f82ca 6d8f          	sty	OFST+4,s
2354                     ; 499                 *pevents_rdy     = (OS_EVENT *)0;       /* ... & NULL terminate return event array     */
2356 f82cc 87            	clra	
2357 f82cd c7            	clrb	
2358 f82ce 6c40          	std	0,y
2359                     ; 500                   events_rdy_nbr =  1;
2361 f82d0 52            	incb	
2362 f82d1 6c84          	std	OFST-7,s
2364 f82d3 200f          	bra	L5131
2365 f82d5               L7131:
2366                     ; 503                  OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
2368 f82d5 c601          	ldab	#1
2369 f82d7 6be823        	stab	35,y
2370                     ; 504                  OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
2373 f82da               L5601:
2374                     ; 508         case OS_STAT_PEND_TO:                           /* If events timed out, ...                    */
2374                     ; 509         default:                                        /* ... remove task from events' wait lists     */
2374                     ; 510              OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
2377 f82da ec8b          	ldd	OFST+0,s
2378 f82dc 3b            	pshd	
2379 f82dd b764          	tfr	y,d
2380 f82df 1646bc        	jsr	_OS_EventTaskRemoveMulti
2381 f82e2 1b82          	leas	2,s
2382                     ; 511              break;
2384 f82e4               L5131:
2385                     ; 514     switch (OSTCBCur->OSTCBStatPend) {
2387 f82e4 fd157d        	ldy	_OSTCBCur
2388 f82e7 e6e823        	ldab	35,y
2390 f82ea 2708          	beq	L7601
2391 f82ec 040150        	dbeq	b,L1011
2392 f82ef 040140        	dbeq	b,L7701
2393 f82f2 204b          	bra	L1011
2394 f82f4               L7601:
2395                     ; 515         case OS_STAT_PEND_OK:
2395                     ; 516              switch (pevent->OSEventType) {             /* Return event's message                      */
2397 f82f4 e6f30000      	ldab	[OFST-11,s]
2399 f82f8 040111        	dbeq	b,L3701
2400 f82fb 04010e        	dbeq	b,L3701
2401 f82fe 040108        	dbeq	b,L1701
2402 f8301 04010d        	dbeq	b,L5701
2403 f8304 04010a        	dbeq	b,L5701
2404 f8307 2008          	bra	L5701
2405 f8309               L1701:
2406                     ; 518                  case OS_EVENT_TYPE_SEM:
2406                     ; 519                      *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
2408 f8309 87            	clra	
2409                     ; 520                       break;
2411 f830a 2018          	bra	L1331
2412 f830c               L3701:
2413                     ; 525                  case OS_EVENT_TYPE_MBOX:
2413                     ; 526                  case OS_EVENT_TYPE_Q:
2413                     ; 527                      *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
2415 f830c ece818        	ldd	24,y
2416                     ; 528                       break;
2418 f830f 2013          	bra	L1331
2419 f8311               L5701:
2420                     ; 531                  case OS_EVENT_TYPE_MUTEX:
2420                     ; 532                  case OS_EVENT_TYPE_FLAG:
2420                     ; 533                  default:
2420                     ; 534                       OS_EXIT_CRITICAL();
2422 f8311 e68a          	ldab	OFST-1,s
2423 f8313 87            	clra	
2424 f8314 167527        	jsr	_OS_CPU_SR_Restore
2426                     ; 535                      *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
2428 f8317 87            	clra	
2429 f8318 c7            	clrb	
2430 f8319 6cf3000f      	std	[OFST+4,s]
2431                     ; 536                      *perr        =  OS_ERR_EVENT_TYPE;
2433 f831d 52            	incb	
2434 f831e 6bf30017      	stab	[OFST+12,s]
2435                     ; 537                       return (events_rdy_nbr);
2438 f8322 2044          	bra	L42
2439 f8324               L1331:
2440 f8324 edf011        	ldy	OFST+6,s
2441 f8327 6c71          	std	2,y+
2442 f8329 6df011        	sty	OFST+6,s
2443                     ; 539             *perr = OS_ERR_NONE;
2445 f832c 69f30017      	clr	[OFST+12,s]
2446                     ; 540              break;
2448 f8330 201d          	bra	L5231
2449 f8332               L7701:
2450                     ; 542         case OS_STAT_PEND_ABORT:
2450                     ; 543             *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
2452 f8332 87            	clra	
2453 f8333 edf011        	ldy	OFST+6,s
2454 f8336 6c71          	std	2,y+
2455 f8338 6df011        	sty	OFST+6,s
2456                     ; 544             *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
2458 f833b c60e          	ldab	#14
2459                     ; 545              break;
2461 f833d 200c          	bra	LC005
2462 f833f               L1011:
2463                     ; 547         case OS_STAT_PEND_TO:
2463                     ; 548         default:
2463                     ; 549             *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
2465 f833f 87            	clra	
2466 f8340 c7            	clrb	
2467 f8341 edf011        	ldy	OFST+6,s
2468 f8344 6c71          	std	2,y+
2469 f8346 6df011        	sty	OFST+6,s
2470                     ; 550             *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
2472 f8349 c60a          	ldab	#10
2473 f834b               LC005:
2474 f834b 6bf30017      	stab	[OFST+12,s]
2475                     ; 551              break;
2477 f834f               L5231:
2478                     ; 554     OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
2480 f834f fd157d        	ldy	_OSTCBCur
2481 f8352 c7            	clrb	
2482 f8353 6be822        	stab	34,y
2483                     ; 555     OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
2485 f8356 87            	clra	
2486 f8357 6ae823        	staa	35,y
2487                     ; 556     OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;      /* Clear event pointers                        */
2489 f835a 6ce814        	std	20,y
2490                     ; 557     OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
2492 f835d 6ce816        	std	22,y
2493                     ; 560     OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
2495 f8360 6ce818        	std	24,y
2496                     ; 562     OS_EXIT_CRITICAL();
2498 f8363 e68a          	ldab	OFST-1,s
2499 f8365 167527        	jsr	_OS_CPU_SR_Restore
2501                     ; 564     return (events_rdy_nbr);
2504 f8368               L42:
2505 f8368 ec84          	ldd	OFST-7,s
2507 f836a 1b8d          	leas	13,s
2508 f836c 3d            	rts	
2542                     ; 582 _NEAR void  OSInit (void)
2542                     ; 583 {
2543                     	switch	.text
2544 f836d               _OSInit:
2548                     ; 590     OSInitHookBegin();                                           /* Call port specific initialization code   */
2550 f836d 164aa7        	jsr	_OSInitHookBegin
2552                     ; 592     OS_InitMisc();                                               /* Initialize miscellaneous variables       */
2554 f8370 16477b        	jsr	L356_OS_InitMisc
2556                     ; 594     OS_InitRdyList();                                            /* Initialize the Ready List                */
2558 f8373 16479c        	jsr	L556_OS_InitRdyList
2560                     ; 596     OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
2562 f8376 1647fa        	jsr	L166_OS_InitTCBList
2564                     ; 598     OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
2566 f8379 16471c        	jsr	L156_OS_InitEventList
2568                     ; 601     OS_FlagInit();                                               /* Initialize the event flag structures     */
2570 f837c 1650cd        	jsr	_OS_FlagInit
2572                     ; 605     OS_MemInit();                                                /* Initialize the memory manager            */
2574 f837f 1657a2        	jsr	_OS_MemInit
2576                     ; 609     OS_QInit();                                                  /* Initialize the message queue structures  */
2578 f8382 166300        	jsr	_OS_QInit
2580                     ; 621     OS_InitTaskIdle();                                           /* Create the Idle Task                     */
2582 f8385 1647c2        	jsr	L756_OS_InitTaskIdle
2584                     ; 627     OSTmr_Init();                                                /* Initialize the Timer Manager             */
2586 f8388 167274        	jsr	_OSTmr_Init
2588                     ; 630     OSInitHookEnd();                                             /* Call port specific init. code            */
2590 f838b 164aad        	jsr	_OSInitHookEnd
2592                     ; 633     OSDebugInit();
2594 f838e 164b1c        	jsr	_OSDebugInit
2596                     ; 635 }
2599 f8391 3d            	rts	
2623                     ; 663 _NEAR void  OSIntEnter (void)
2623                     ; 664 {
2624                     	switch	.text
2625 f8392               _OSIntEnter:
2629                     ; 665     if (OSRunning == OS_TRUE) {
2631 f8392 f61624        	ldab	_OSRunning
2632 f8395 04210a        	dbne	b,L3531
2633                     ; 666         if (OSIntNesting < 255u) {
2635 f8398 f61631        	ldab	_OSIntNesting
2636 f839b c1ff          	cmpb	#255
2637 f839d 2403          	bhs	L3531
2638                     ; 667             OSIntNesting++;                      /* Increment ISR nesting level                        */
2640 f839f 721631        	inc	_OSIntNesting
2641 f83a2               L3531:
2642                     ; 671 }
2645 f83a2 3d            	rts	
2647                     	xref	_OSIntCtxSw
2689                     ; 693 _NEAR void  OSIntExit (void)
2689                     ; 694 {
2690                     	switch	.text
2691 f83a3               _OSIntExit:
2693 f83a3 37            	pshb	
2694       00000001      OFST:	set	1
2697                     ; 696     OS_CPU_SR  cpu_sr = 0u;
2699                     ; 701     if (OSRunning == OS_TRUE) {
2701 f83a4 f61624        	ldab	_OSRunning
2702 f83a7 04215f        	dbne	b,L3731
2703                     ; 702         OS_ENTER_CRITICAL();
2705 f83aa 167522        	jsr	_OS_CPU_SR_Save
2707 f83ad 6b80          	stab	OFST-1,s
2708                     ; 703         if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
2710 f83af f71631        	tst	_OSIntNesting
2711 f83b2 2703          	beq	L5731
2712                     ; 704             OSIntNesting--;
2714 f83b4 731631        	dec	_OSIntNesting
2715 f83b7               L5731:
2716                     ; 706         if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
2718 f83b7 f61631        	ldab	_OSIntNesting
2719 f83ba 2647          	bne	L1141
2720                     ; 707             if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
2722 f83bc f61630        	ldab	_OSLockNesting
2723 f83bf 2642          	bne	L1141
2724                     ; 708                 OS_SchedNew();
2726 f83c1 1648e3        	jsr	L366_OS_SchedNew
2728                     ; 709                 OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
2730 f83c4 f6162e        	ldab	_OSPrioHighRdy
2731 f83c7 87            	clra	
2732 f83c8 59            	lsld	
2733 f83c9 b746          	tfr	d,y
2734 f83cb edea14f7      	ldy	_OSTCBPrioTbl,y
2735 f83cf 7d1579        	sty	_OSTCBHighRdy
2736                     ; 710                 if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
2738 f83d2 f6162e        	ldab	_OSPrioHighRdy
2739 f83d5 f1162f        	cmpb	_OSPrioCur
2740 f83d8 2729          	beq	L1141
2741                     ; 712                     OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
2743 f83da ece82c        	ldd	44,y
2744 f83dd c30001        	addd	#1
2745 f83e0 6ce82c        	std	44,y
2746 f83e3 2408          	bcc	L43
2747 f83e5 62e82b        	inc	43,y
2748 f83e8 2603          	bne	L43
2749 f83ea 62e82a        	inc	42,y
2750 f83ed               L43:
2751                     ; 714                     OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
2753 f83ed fc16fb        	ldd	_OSCtxSwCtr+2
2754 f83f0 c30001        	addd	#1
2755 f83f3 7c16fb        	std	_OSCtxSwCtr+2
2756 f83f6 2408          	bcc	L63
2757 f83f8 7216fa        	inc	_OSCtxSwCtr+1
2758 f83fb 2603          	bne	L63
2759 f83fd 7216f9        	inc	_OSCtxSwCtr
2760 f8400               L63:
2761                     ; 723                     OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
2764 f8400 167558        	jsr	_OSIntCtxSw
2767 f8403               L1141:
2768                     ; 734         OS_EXIT_CRITICAL();
2770 f8403 e680          	ldab	OFST-1,s
2771 f8405 87            	clra	
2772 f8406 167527        	jsr	_OS_CPU_SR_Restore
2774 f8409               L3731:
2775                     ; 736 }
2778 f8409 1b81          	leas	1,s
2779 f840b 3d            	rts	
2815                     ; 782 _NEAR void  OSSchedLock (void)
2815                     ; 783 {
2816                     	switch	.text
2817 f840c               _OSSchedLock:
2819 f840c 37            	pshb	
2820       00000001      OFST:	set	1
2823                     ; 785     OS_CPU_SR  cpu_sr = 0u;
2825                     ; 790     if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
2827 f840d f61624        	ldab	_OSRunning
2828 f8410 04211a        	dbne	b,L7241
2829                     ; 791         OS_ENTER_CRITICAL();
2831 f8413 167522        	jsr	_OS_CPU_SR_Save
2833 f8416 6b80          	stab	OFST-1,s
2834                     ; 792         if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
2836 f8418 f61631        	ldab	_OSIntNesting
2837 f841b 260a          	bne	L1341
2838                     ; 793             if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
2840 f841d f61630        	ldab	_OSLockNesting
2841 f8420 c1ff          	cmpb	#255
2842 f8422 2403          	bhs	L1341
2843                     ; 794                 OSLockNesting++;                 /* Increment lock nesting level                       */
2845 f8424 721630        	inc	_OSLockNesting
2846 f8427               L1341:
2847                     ; 797         OS_EXIT_CRITICAL();
2849 f8427 e680          	ldab	OFST-1,s
2850 f8429 87            	clra	
2851 f842a 167527        	jsr	_OS_CPU_SR_Restore
2853 f842d               L7241:
2854                     ; 799 }
2857 f842d 1b81          	leas	1,s
2858 f842f 3d            	rts	
2895                     ; 819 _NEAR void  OSSchedUnlock (void)
2895                     ; 820 {
2896                     	switch	.text
2897 f8430               _OSSchedUnlock:
2899 f8430 37            	pshb	
2900       00000001      OFST:	set	1
2903                     ; 822     OS_CPU_SR  cpu_sr = 0u;
2905                     ; 827     if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
2907 f8431 f61624        	ldab	_OSRunning
2908 f8434 042121        	dbne	b,L1541
2909                     ; 828         OS_ENTER_CRITICAL();
2911 f8437 167522        	jsr	_OS_CPU_SR_Save
2913 f843a 6b80          	stab	OFST-1,s
2914                     ; 829         if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
2916 f843c f71631        	tst	_OSIntNesting
2917 f843f 2613          	bne	L7541
2918                     ; 830             if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
2920 f8441 f71630        	tst	_OSLockNesting
2921 f8444 270e          	beq	L7541
2922                     ; 831                 OSLockNesting--;                           /* Decrement lock nesting level             */
2924 f8446 731630        	dec	_OSLockNesting
2925                     ; 832                 if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
2927 f8449 2609          	bne	L7541
2928                     ; 833                     OS_EXIT_CRITICAL();
2930 f844b 87            	clra	
2931 f844c 167527        	jsr	_OS_CPU_SR_Restore
2933                     ; 834                     OS_Sched();                            /* See if a HPT is ready                    */
2935 f844f 16488b        	jsr	_OS_Sched
2938 f8452 2004          	bra	L1541
2939 f8454               L7541:
2940                     ; 836                     OS_EXIT_CRITICAL();
2943                     ; 839                 OS_EXIT_CRITICAL();
2946                     ; 842             OS_EXIT_CRITICAL();
2948 f8454 87            	clra	
2949 f8455 167527        	jsr	_OS_CPU_SR_Restore
2951 f8458               L1541:
2952                     ; 845 }
2955 f8458 1b81          	leas	1,s
2956 f845a 3d            	rts	
2958                     	xref	_OSStartHighRdy
2987                     ; 869 _NEAR void  OSStart (void)
2987                     ; 870 {
2988                     	switch	.text
2989 f845b               _OSStart:
2993                     ; 871     if (OSRunning == OS_FALSE) {
2995 f845b f61624        	ldab	_OSRunning
2996 f845e 261a          	bne	L7741
2997                     ; 872         OS_SchedNew();                               /* Find highest priority's task priority number   */
2999 f8460 1648e3        	jsr	L366_OS_SchedNew
3001                     ; 873         OSPrioCur     = OSPrioHighRdy;
3003 f8463 f6162e        	ldab	_OSPrioHighRdy
3004 f8466 7b162f        	stab	_OSPrioCur
3005                     ; 874         OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
3007 f8469 87            	clra	
3008 f846a 59            	lsld	
3009 f846b b746          	tfr	d,y
3010 f846d ecea14f7      	ldd	_OSTCBPrioTbl,y
3011 f8471 7c1579        	std	_OSTCBHighRdy
3012                     ; 875         OSTCBCur      = OSTCBHighRdy;
3014 f8474 7c157d        	std	_OSTCBCur
3015                     ; 876         OSStartHighRdy();                            /* Execute target specific code to start task     */
3017 f8477 16752a        	jsr	_OSStartHighRdy
3019 f847a               L7741:
3020                     ; 878 }
3023 f847a 3d            	rts	
3402                     ; 937 _NEAR void  OSTimeTick (void)
3402                     ; 938 {
3403                     	switch	.text
3404 f847b               _OSTimeTick:
3406 f847b 1b9d          	leas	-3,s
3407       00000003      OFST:	set	3
3410                     ; 944     OS_CPU_SR  cpu_sr = 0u;
3412                     ; 950     OSTimeTickHook();                                      /* Call user definable hook                     */
3414 f847d 164afd        	jsr	_OSTimeTickHook
3416                     ; 953     OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
3418 f8480 167522        	jsr	_OS_CPU_SR_Save
3420 f8483 6b82          	stab	OFST-1,s
3421                     ; 954     OSTime++;
3423 f8485 fc13a4        	ldd	_OSTime+2
3424 f8488 c30001        	addd	#1
3425 f848b 7c13a4        	std	_OSTime+2
3426 f848e 2408          	bcc	L05
3427 f8490 7213a3        	inc	_OSTime+1
3428 f8493 2603          	bne	L05
3429 f8495 7213a2        	inc	_OSTime
3430 f8498               L05:
3431                     ; 956     OS_EXIT_CRITICAL();
3434 f8498 e682          	ldab	OFST-1,s
3435 f849a 87            	clra	
3436 f849b 167527        	jsr	_OS_CPU_SR_Restore
3438                     ; 958     if (OSRunning == OS_TRUE) {
3440 f849e f61624        	ldab	_OSRunning
3441 f84a1 53            	decb	
3442 f84a2 182600a6      	bne	L7271
3443                     ; 960         switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
3445 f84a6 f6143c        	ldab	_OSTickStepState
3447 f84a9 270f          	beq	L1051
3448 f84ab 040112        	dbeq	b,L3051
3449 f84ae 040113        	dbeq	b,L5051
3450                     ; 974             default:                                       /* Invalid case, correct situation              */
3450                     ; 975                  step            = OS_TRUE;
3452 f84b1 c601          	ldab	#1
3453 f84b3 6b82          	stab	OFST-1,s
3454                     ; 976                  OSTickStepState = OS_TICK_STEP_DIS;
3456 f84b5 79143c        	clr	_OSTickStepState
3457                     ; 977                  break;
3459 f84b8 2011          	bra	L3371
3460 f84ba               L1051:
3461                     ; 961             case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
3461                     ; 962                  step = OS_TRUE;
3463 f84ba c601          	ldab	#1
3464 f84bc 6b82          	stab	OFST-1,s
3465                     ; 963                  break;
3467 f84be 200b          	bra	L3371
3468 f84c0               L3051:
3469                     ; 965             case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
3469                     ; 966                  step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
3471 f84c0 6982          	clr	OFST-1,s
3472                     ; 967                  break;
3474 f84c2 2007          	bra	L3371
3475 f84c4               L5051:
3476                     ; 969             case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
3476                     ; 970                  step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
3478 f84c4 c601          	ldab	#1
3479 f84c6 6b82          	stab	OFST-1,s
3480                     ; 971                  OSTickStepState = OS_TICK_STEP_WAIT;
3482 f84c8 7b143c        	stab	_OSTickStepState
3483                     ; 972                  break;
3485 f84cb               L3371:
3486                     ; 979         if (step == OS_FALSE) {                            /* Return if waiting for step command           */
3488 f84cb e682          	ldab	OFST-1,s
3489 f84cd 2603          	bne	L5371
3490                     ; 980             return;
3493 f84cf 1b83          	leas	3,s
3494 f84d1 3d            	rts	
3495 f84d2               L5371:
3496                     ; 983         ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
3498 f84d2 1801801577    	movw	_OSTCBList,OFST-3,s
3500 f84d7 206a          	bra	L3471
3501 f84d9               L7371:
3502                     ; 985             OS_ENTER_CRITICAL();
3504 f84d9 167522        	jsr	_OS_CPU_SR_Save
3506 f84dc 6b82          	stab	OFST-1,s
3507                     ; 986             if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
3509 f84de ed80          	ldy	OFST-3,s
3510 f84e0 ece81e        	ldd	30,y
3511 f84e3 2605          	bne	LC007
3512 f84e5 ece820        	ldd	32,y
3513 f84e8 274f          	beq	L7471
3514 f84ea               LC007:
3515                     ; 987                 ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
3517 f84ea ece820        	ldd	32,y
3518 f84ed 830001        	subd	#1
3519 f84f0 6ce820        	std	32,y
3520 f84f3 ece81e        	ldd	30,y
3521 f84f6 c200          	sbcb	#0
3522 f84f8 8200          	sbca	#0
3523 f84fa 6ce81e        	std	30,y
3524                     ; 988                 if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
3526 f84fd 263a          	bne	L7471
3527 f84ff ece820        	ldd	32,y
3528 f8502 2635          	bne	L7471
3529                     ; 990                     if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
3531 f8504 0fe822370b    	brclr	34,y,55,L3571
3532                     ; 991                         ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
3534 f8509 0de82237      	bclr	34,y,55
3535                     ; 992                         ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
3537 f850d c601          	ldab	#1
3538 f850f 6be823        	stab	35,y
3540 f8512 2003          	bra	L5571
3541 f8514               L3571:
3542                     ; 994                         ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
3544 f8514 69e823        	clr	35,y
3545 f8517               L5571:
3546                     ; 997                     if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
3548 f8517 0ee822081d    	brset	34,y,8,L7471
3549                     ; 998                         OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
3551 f851c e6e828        	ldab	40,y
3552 f851f fa162d        	orab	_OSRdyGrp
3553 f8522 7b162d        	stab	_OSRdyGrp
3554                     ; 999                         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
3556 f8525 e6e826        	ldab	38,y
3557 f8528 b796          	exg	b,y
3558 f852a ee80          	ldx	OFST-3,s
3559 f852c e6e027        	ldab	39,x
3560 f852f eaea1625      	orab	_OSRdyTbl,y
3561 f8533 6bea1625      	stab	_OSRdyTbl,y
3563 f8537 b756          	tfr	x,y
3564 f8539               L7471:
3565                     ; 1004             ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
3567 f8539 18024e80      	movw	14,y,OFST-3,s
3568                     ; 1005             OS_EXIT_CRITICAL();
3570 f853d e682          	ldab	OFST-1,s
3571 f853f 87            	clra	
3572 f8540 167527        	jsr	_OS_CPU_SR_Restore
3574 f8543               L3471:
3575                     ; 984         while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
3577 f8543 ed80          	ldy	OFST-3,s
3578 f8545 e6e824        	ldab	36,y
3579 f8548 c13f          	cmpb	#63
3580 f854a 268d          	bne	L7371
3581 f854c               L7271:
3582                     ; 1008 }
3585 f854c 1b83          	leas	3,s
3586 f854e 3d            	rts	
3608                     ; 1025 _NEAR INT16U  OSVersion (void)
3608                     ; 1026 {
3609                     	switch	.text
3610 f854f               _OSVersion:
3614                     ; 1027     return (OS_VERSION);
3616 f854f cc7274        	ldd	#29300
3619 f8552 3d            	rts	
3641                     ; 1044 _NEAR void  OS_Dummy (void)
3641                     ; 1045 {
3642                     	switch	.text
3643 f8553               _OS_Dummy:
3647                     ; 1046 }
3650 f8553 3d            	rts	
3749                     ; 1078 _NEAR INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
3749                     ; 1079                              void      *pmsg,
3749                     ; 1080                              INT8U      msk,
3749                     ; 1081                              INT8U      pend_stat)
3749                     ; 1082 {
3750                     	switch	.text
3751 f8554               _OS_EventTaskRdy:
3753 f8554 3b            	pshd	
3754 f8555 1b9c          	leas	-4,s
3755       00000004      OFST:	set	4
3758                     ; 1093     y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
3760 f8557 b746          	tfr	d,y
3761 f8559 e645          	ldab	5,y
3762 f855b 87            	clra	
3763 f855c b746          	tfr	d,y
3764 f855e e6ea7589      	ldab	_OSUnMapTbl,y
3765 f8562 6b83          	stab	OFST-1,s
3766                     ; 1094     x    = OSUnMapTbl[pevent->OSEventTbl[y]];
3768 f8564 ed84          	ldy	OFST+0,s
3769 f8566 19ed          	leay	b,y
3770 f8568 e646          	ldab	6,y
3771 f856a b746          	tfr	d,y
3772 f856c e6ea7589      	ldab	_OSUnMapTbl,y
3773 f8570 6b82          	stab	OFST-2,s
3774                     ; 1095     prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
3776 f8572 e683          	ldab	OFST-1,s
3777 f8574 58            	lslb	
3778 f8575 58            	lslb	
3779 f8576 58            	lslb	
3780 f8577 eb82          	addb	OFST-2,s
3781 f8579 6b82          	stab	OFST-2,s
3782                     ; 1111     ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
3784 f857b 59            	lsld	
3785 f857c b746          	tfr	d,y
3786 f857e edea14f7      	ldy	_OSTCBPrioTbl,y
3787 f8582 6d80          	sty	OFST-4,s
3788                     ; 1112     ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
3790 f8584 87            	clra	
3791 f8585 c7            	clrb	
3792 f8586 6ce820        	std	32,y
3793 f8589 6ce81e        	std	30,y
3794                     ; 1114     ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
3796 f858c ec88          	ldd	OFST+4,s
3797 f858e 6ce818        	std	24,y
3798                     ; 1118     ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
3800 f8591 e68b          	ldab	OFST+7,s
3801 f8593 51            	comb	
3802 f8594 e4e822        	andb	34,y
3803 f8597 6be822        	stab	34,y
3804                     ; 1119     ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
3806 f859a e68d          	ldab	OFST+9,s
3807 f859c 6be823        	stab	35,y
3808                     ; 1121     if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
3810 f859f 0ee822081a    	brset	34,y,8,L5402
3811                     ; 1122         OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
3813 f85a4 e6e828        	ldab	40,y
3814 f85a7 fa162d        	orab	_OSRdyGrp
3815 f85aa 7b162d        	stab	_OSRdyGrp
3816                     ; 1123         OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
3818 f85ad e683          	ldab	OFST-1,s
3819 f85af b796          	exg	b,y
3820 f85b1 ee80          	ldx	OFST-4,s
3821 f85b3 e6e027        	ldab	39,x
3822 f85b6 eaea1625      	orab	_OSRdyTbl,y
3823 f85ba 6bea1625      	stab	_OSRdyTbl,y
3825 f85be               L5402:
3826                     ; 1127     OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
3828 f85be ec84          	ldd	OFST+0,s
3829 f85c0 3b            	pshd	
3830 f85c1 ec82          	ldd	OFST-2,s
3831 f85c3 16468f        	jsr	_OS_EventTaskRemove
3833 f85c6 1b82          	leas	2,s
3834                     ; 1129     if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
3836 f85c8 ed80          	ldy	OFST-4,s
3837 f85ca ece814        	ldd	20,y
3838 f85cd 2714          	beq	L7402
3839                     ; 1130         OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
3841 f85cf 3b            	pshd	
3842 f85d0 b764          	tfr	y,d
3843 f85d2 1646bc        	jsr	_OS_EventTaskRemoveMulti
3845 f85d5 1b82          	leas	2,s
3846                     ; 1131         ptcb->OSTCBEventMultiPtr  = (OS_EVENT **)0;     /* No longer pending on multi list             */
3848 f85d7 87            	clra	
3849 f85d8 c7            	clrb	
3850 f85d9 ed80          	ldy	OFST-4,s
3851 f85db 6ce814        	std	20,y
3852                     ; 1132         ptcb->OSTCBEventMultiRdy  = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
3854 f85de ec84          	ldd	OFST+0,s
3855 f85e0 6ce816        	std	22,y
3856 f85e3               L7402:
3857                     ; 1136     return (prio);
3859 f85e3 e682          	ldab	OFST-2,s
3862 f85e5 1b86          	leas	6,s
3863 f85e7 3d            	rts	
3909                     ; 1156 _NEAR void  OS_EventTaskWait (OS_EVENT *pevent)
3909                     ; 1157 {
3910                     	switch	.text
3911 f85e8               _OS_EventTaskWait:
3913 f85e8 3b            	pshd	
3914 f85e9 37            	pshb	
3915       00000001      OFST:	set	1
3918                     ; 1161     OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
3920 f85ea fe157d        	ldx	_OSTCBCur
3921                     ; 1163     pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
3923 f85ed b746          	tfr	d,y
3924 f85ef 6de012        	sty	18,x
3925 f85f2 e6e026        	ldab	38,x
3926 f85f5 87            	clra	
3927 f85f6 19ed          	leay	b,y
3928 f85f8 e6e027        	ldab	39,x
3929 f85fb ea46          	orab	6,y
3930 f85fd 6b46          	stab	6,y
3931                     ; 1164     pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
3933 f85ff ed81          	ldy	OFST+0,s
3934 f8601 e6e028        	ldab	40,x
3935 f8604 ea45          	orab	5,y
3936 f8606 6b45          	stab	5,y
3937                     ; 1166     y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
3939 f8608 b756          	tfr	x,y
3940 f860a e6e826        	ldab	38,y
3941                     ; 1167     OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
3943 f860d b746          	tfr	d,y
3944 f860f e6e027        	ldab	39,x
3945 f8612 51            	comb	
3946 f8613 e4ea1625      	andb	_OSRdyTbl,y
3947 f8617 6bea1625      	stab	_OSRdyTbl,y
3948                     ; 1169     if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
3951 f861b 260c          	bne	L3702
3952                     ; 1170         OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
3954 f861d b756          	tfr	x,y
3955 f861f e6e828        	ldab	40,y
3956 f8622 51            	comb	
3957 f8623 f4162d        	andb	_OSRdyGrp
3958 f8626 7b162d        	stab	_OSRdyGrp
3959 f8629               L3702:
3960                     ; 1172 }
3963 f8629 1b83          	leas	3,s
3964 f862b 3d            	rts	
4037                     ; 1192 _NEAR void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
4037                     ; 1193 {
4038                     	switch	.text
4039 f862c               _OS_EventTaskWaitMulti:
4041 f862c 3b            	pshd	
4042 f862d 1b9b          	leas	-5,s
4043       00000005      OFST:	set	5
4046                     ; 1199     OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
4048 f862f fd157d        	ldy	_OSTCBCur
4049 f8632 6ce814        	std	20,y
4050                     ; 1200     OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
4052 f8635 87            	clra	
4053 f8636 c7            	clrb	
4054 f8637 6ce816        	std	22,y
4055                     ; 1202     pevents =  pevents_wait;
4057 f863a ee85          	ldx	OFST+0,s
4058 f863c 6e82          	stx	OFST-3,s
4059                     ; 1203     pevent  = *pevents;
4061 f863e ec00          	ldd	0,x
4062 f8640 6c80          	std	OFST-5,s
4064 f8642 b765          	tfr	y,x
4065 f8644 201f          	bra	L7312
4066 f8646               L3312:
4067                     ; 1205         pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
4069 f8646 b746          	tfr	d,y
4070 f8648 e6e026        	ldab	38,x
4071 f864b 19ed          	leay	b,y
4072 f864d e6e027        	ldab	39,x
4073 f8650 ea46          	orab	6,y
4074 f8652 6b46          	stab	6,y
4075                     ; 1206         pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
4077 f8654 ed80          	ldy	OFST-5,s
4078 f8656 e6e028        	ldab	40,x
4079 f8659 ea45          	orab	5,y
4080 f865b 6b45          	stab	5,y
4081                     ; 1207         pevents++;
4083 f865d ed82          	ldy	OFST-3,s
4084                     ; 1208         pevent = *pevents;
4086 f865f ec61          	ldd	2,+y
4087 f8661 6d82          	sty	OFST-3,s
4088 f8663 6c80          	std	OFST-5,s
4089 f8665               L7312:
4090                     ; 1204     while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
4092 f8665 26df          	bne	L3312
4093                     ; 1211     y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
4095 f8667 fd157d        	ldy	_OSTCBCur
4096 f866a e6e826        	ldab	38,y
4097                     ; 1212     OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
4099 f866d b796          	exg	b,y
4100 f866f fe157d        	ldx	_OSTCBCur
4101 f8672 e6e027        	ldab	39,x
4102 f8675 51            	comb	
4103 f8676 e4ea1625      	andb	_OSRdyTbl,y
4104 f867a 6bea1625      	stab	_OSRdyTbl,y
4105                     ; 1214     if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
4108 f867e 260c          	bne	L3412
4109                     ; 1215         OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
4111 f8680 b756          	tfr	x,y
4112 f8682 e6e828        	ldab	40,y
4113 f8685 51            	comb	
4114 f8686 f4162d        	andb	_OSRdyGrp
4115 f8689 7b162d        	stab	_OSRdyGrp
4116 f868c               L3412:
4117                     ; 1217 }
4120 f868c 1b87          	leas	7,s
4121 f868e 3d            	rts	
4176                     ; 1237 _NEAR void  OS_EventTaskRemove (OS_TCB   *ptcb,
4176                     ; 1238                                OS_EVENT *pevent)
4176                     ; 1239 {
4177                     	switch	.text
4178 f868f               _OS_EventTaskRemove:
4180 f868f 3b            	pshd	
4181 f8690 37            	pshb	
4182       00000001      OFST:	set	1
4185                     ; 1243     y                       =  ptcb->OSTCBY;
4187 f8691 b746          	tfr	d,y
4188 f8693 e6e826        	ldab	38,y
4189 f8696 6b80          	stab	OFST-1,s
4190                     ; 1244     pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
4192 f8698 ed85          	ldy	OFST+4,s
4193 f869a 19ed          	leay	b,y
4194 f869c ee81          	ldx	OFST+0,s
4195 f869e e6e027        	ldab	39,x
4196 f86a1 51            	comb	
4197 f86a2 e446          	andb	6,y
4198 f86a4 6b46          	stab	6,y
4199                     ; 1245     if (pevent->OSEventTbl[y] == 0u) {
4201 f86a6 260a          	bne	L5712
4202                     ; 1246         pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
4204 f86a8 ed85          	ldy	OFST+4,s
4205 f86aa e6e028        	ldab	40,x
4206 f86ad 51            	comb	
4207 f86ae e445          	andb	5,y
4208 f86b0 6b45          	stab	5,y
4209 f86b2               L5712:
4210                     ; 1248     ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
4212 f86b2 87            	clra	
4213 f86b3 c7            	clrb	
4214 f86b4 b756          	tfr	x,y
4215 f86b6 6ce812        	std	18,y
4216                     ; 1249 }
4219 f86b9 1b83          	leas	3,s
4220 f86bb 3d            	rts	
4316                     ; 1269 _NEAR void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
4316                     ; 1270                                     OS_EVENT **pevents_multi)
4316                     ; 1271 {
4317                     	switch	.text
4318 f86bc               _OS_EventTaskRemoveMulti:
4320 f86bc 3b            	pshd	
4321 f86bd 1b99          	leas	-7,s
4322       00000007      OFST:	set	7
4325                     ; 1279     y       =  ptcb->OSTCBY;
4327 f86bf b746          	tfr	d,y
4328 f86c1 e6e826        	ldab	38,y
4329 f86c4 6b84          	stab	OFST-3,s
4330                     ; 1280     bity    =  ptcb->OSTCBBitY;
4332 f86c6 ed87          	ldy	OFST+0,s
4333 f86c8 e6e828        	ldab	40,y
4334 f86cb 6b85          	stab	OFST-2,s
4335                     ; 1281     bitx    =  ptcb->OSTCBBitX;
4337 f86cd e6e827        	ldab	39,y
4338 f86d0 6b86          	stab	OFST-1,s
4339                     ; 1282     pevents =  pevents_multi;
4341 f86d2 18028b82      	movw	OFST+4,s,OFST-5,s
4342                     ; 1283     pevent  = *pevents;
4344 f86d6 ecf30002      	ldd	[OFST-5,s]
4346 f86da 201c          	bra	L3522
4347 f86dc               L7422:
4348                     ; 1285         pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
4350 f86dc e684          	ldab	OFST-3,s
4351 f86de 19ed          	leay	b,y
4352 f86e0 e686          	ldab	OFST-1,s
4353 f86e2 51            	comb	
4354 f86e3 e446          	andb	6,y
4355 f86e5 6b46          	stab	6,y
4356                     ; 1286         if (pevent->OSEventTbl[y] == 0u) {
4358 f86e7 2609          	bne	L7522
4359                     ; 1287             pevent->OSEventGrp &= (OS_PRIO)~bity;
4361 f86e9 ed80          	ldy	OFST-7,s
4362 f86eb e685          	ldab	OFST-2,s
4363 f86ed 51            	comb	
4364 f86ee e445          	andb	5,y
4365 f86f0 6b45          	stab	5,y
4366 f86f2               L7522:
4367                     ; 1289         pevents++;
4369 f86f2 ed82          	ldy	OFST-5,s
4370                     ; 1290         pevent = *pevents;
4372 f86f4 ec61          	ldd	2,+y
4373 f86f6 6d82          	sty	OFST-5,s
4374 f86f8               L3522:
4375 f86f8 6c80          	std	OFST-7,s
4376                     ; 1284     while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
4378 f86fa ed80          	ldy	OFST-7,s
4379 f86fc 26de          	bne	L7422
4380                     ; 1292 }
4383 f86fe 1b89          	leas	9,s
4384 f8700 3d            	rts	
4428                     ; 1310 _NEAR void  OS_EventWaitListInit (OS_EVENT *pevent)
4428                     ; 1311 {
4429                     	switch	.text
4430 f8701               _OS_EventWaitListInit:
4432 f8701 3b            	pshd	
4433 f8702 37            	pshb	
4434       00000001      OFST:	set	1
4437                     ; 1315     pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
4439 f8703 b746          	tfr	d,y
4440 f8705 c7            	clrb	
4441 f8706 6b45          	stab	5,y
4442                     ; 1316     for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
4444 f8708 6b80          	stab	OFST-1,s
4445 f870a               L3032:
4446                     ; 1317         pevent->OSEventTbl[i] = 0u;
4448 f870a ed81          	ldy	OFST+0,s
4449 f870c 87            	clra	
4450 f870d 19ed          	leay	b,y
4451 f870f 6a46          	staa	6,y
4452                     ; 1316     for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
4454 f8711 6280          	inc	OFST-1,s
4457 f8713 e680          	ldab	OFST-1,s
4458 f8715 c108          	cmpb	#8
4459 f8717 25f1          	blo	L3032
4460                     ; 1319 }
4463 f8719 1b83          	leas	3,s
4464 f871b 3d            	rts	
4529                     ; 1336 static  void  OS_InitEventList (void)
4529                     ; 1337 {
4530                     	switch	.text
4531 f871c               L156_OS_InitEventList:
4533 f871c 1b9a          	leas	-6,s
4534       00000006      OFST:	set	6
4537                     ; 1346     OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
4539 f871e cc00a0        	ldd	#160
4540 f8721 3b            	pshd	
4541 f8722 cc1657        	ldd	#_OSEventTbl
4542 f8725 16485f        	jsr	_OS_MemClr
4544 f8728 1b82          	leas	2,s
4545                     ; 1347     for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
4547 f872a 87            	clra	
4548 f872b c7            	clrb	
4549 f872c b746          	tfr	d,y
4550 f872e 6d82          	sty	OFST-4,s
4551 f8730               L3432:
4552                     ; 1348         ix_next = ix + 1u;
4554 f8730 02            	iny	
4555                     ; 1349         pevent1 = &OSEventTbl[ix];
4557 f8731 59            	lsld	
4558 f8732 59            	lsld	
4559 f8733 59            	lsld	
4560 f8734 59            	lsld	
4561 f8735 c31657        	addd	#_OSEventTbl
4562 f8738 6c80          	std	OFST-6,s
4563                     ; 1350         pevent2 = &OSEventTbl[ix_next];
4565 f873a b764          	tfr	y,d
4566 f873c 59            	lsld	
4567 f873d 59            	lsld	
4568 f873e 59            	lsld	
4569 f873f 59            	lsld	
4570 f8740 c31657        	addd	#_OSEventTbl
4571 f8743 6c84          	std	OFST-2,s
4572                     ; 1351         pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
4574 f8745 ed80          	ldy	OFST-6,s
4575 f8747 6940          	clr	0,y
4576                     ; 1352         pevent1->OSEventPtr     = pevent2;
4578 f8749 6c41          	std	1,y
4579                     ; 1354         pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
4581 f874b cc7697        	ldd	#L1532
4582 f874e 6c4e          	std	14,y
4583                     ; 1347     for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
4585 f8750 ed82          	ldy	OFST-4,s
4586 f8752 02            	iny	
4589 f8753 b764          	tfr	y,d
4590 f8755 6c82          	std	OFST-4,s
4591 f8757 8c0009        	cpd	#9
4592 f875a 25d4          	blo	L3432
4593                     ; 1357     pevent1                         = &OSEventTbl[ix];
4595 f875c 59            	lsld	
4596 f875d 59            	lsld	
4597 f875e 59            	lsld	
4598 f875f 59            	lsld	
4599 f8760 c31657        	addd	#_OSEventTbl
4600 f8763 6c80          	std	OFST-6,s
4601                     ; 1358     pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
4603 f8765 87            	clra	
4604 f8766 ed80          	ldy	OFST-6,s
4605 f8768 6a40          	staa	0,y
4606                     ; 1359     pevent1->OSEventPtr             = (OS_EVENT *)0;
4608 f876a c7            	clrb	
4609 f876b 6c41          	std	1,y
4610                     ; 1361     pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
4612 f876d cc7697        	ldd	#L1532
4613 f8770 6c4e          	std	14,y
4614                     ; 1363     OSEventFreeList                 = &OSEventTbl[0];
4616 f8772 cc1657        	ldd	#_OSEventTbl
4617 f8775 7c16f7        	std	_OSEventFreeList
4618                     ; 1373 }
4621 f8778 1b86          	leas	6,s
4622 f877a 3d            	rts	
4651                     ; 1389 static  void  OS_InitMisc (void)
4651                     ; 1390 {
4652                     	switch	.text
4653 f877b               L356_OS_InitMisc:
4657                     ; 1392     OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
4659 f877b 87            	clra	
4660 f877c c7            	clrb	
4661 f877d 7c13a4        	std	_OSTime+2
4662 f8780 7c13a2        	std	_OSTime
4663                     ; 1395     OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
4665 f8783 7a1631        	staa	_OSIntNesting
4666                     ; 1396     OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
4668 f8786 7b1630        	stab	_OSLockNesting
4669                     ; 1398     OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
4671 f8789 7b1623        	stab	_OSTaskCtr
4672                     ; 1400     OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
4674 f878c 7a1624        	staa	_OSRunning
4675                     ; 1402     OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
4677 f878f 7c16fb        	std	_OSCtxSwCtr+2
4678 f8792 7c16f9        	std	_OSCtxSwCtr
4679                     ; 1403     OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
4681 f8795 7c1621        	std	_OSIdleCtr+2
4682 f8798 7c161f        	std	_OSIdleCtr
4683                     ; 1418 }
4686 f879b 3d            	rts	
4723                     ; 1434 static  void  OS_InitRdyList (void)
4723                     ; 1435 {
4724                     	switch	.text
4725 f879c               L556_OS_InitRdyList:
4727 f879c 37            	pshb	
4728       00000001      OFST:	set	1
4731                     ; 1439     OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
4733 f879d c7            	clrb	
4734 f879e 7b162d        	stab	_OSRdyGrp
4735                     ; 1440     for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
4737 f87a1 6b80          	stab	OFST-1,s
4738 f87a3               L7732:
4739                     ; 1441         OSRdyTbl[i] = 0u;
4741 f87a3 87            	clra	
4742 f87a4 b746          	tfr	d,y
4743 f87a6 6aea1625      	staa	_OSRdyTbl,y
4744                     ; 1440     for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
4746 f87aa 6280          	inc	OFST-1,s
4749 f87ac e680          	ldab	OFST-1,s
4750 f87ae c108          	cmpb	#8
4751 f87b0 25f1          	blo	L7732
4752                     ; 1444     OSPrioCur     = 0u;
4754 f87b2 c7            	clrb	
4755 f87b3 7b162f        	stab	_OSPrioCur
4756                     ; 1445     OSPrioHighRdy = 0u;
4758 f87b6 7a162e        	staa	_OSPrioHighRdy
4759                     ; 1447     OSTCBHighRdy  = (OS_TCB *)0;
4761 f87b9 7c1579        	std	_OSTCBHighRdy
4762                     ; 1448     OSTCBCur      = (OS_TCB *)0;
4764 f87bc 7c157d        	std	_OSTCBCur
4765                     ; 1449 }
4768 f87bf 1b81          	leas	1,s
4769 f87c1 3d            	rts	
4805                     ; 1465 static  void  OS_InitTaskIdle (void)
4805                     ; 1466 {
4806                     	switch	.text
4807 f87c2               L756_OS_InitTaskIdle:
4809 f87c2 37            	pshb	
4810       00000001      OFST:	set	1
4813                     ; 1474     (void)OSTaskCreateExt(OS_TaskIdle,
4813                     ; 1475                           (void *)0,                                 /* No arguments passed to OS_TaskIdle() */
4813                     ; 1476                           &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1u],/* Set Top-Of-Stack                     */
4813                     ; 1477                           OS_TASK_IDLE_PRIO,                         /* Lowest priority level                */
4813                     ; 1478                           OS_TASK_IDLE_ID,
4813                     ; 1479                           &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack                  */
4813                     ; 1480                           OS_TASK_IDLE_STK_SIZE,
4813                     ; 1481                           (void *)0,                                 /* No TCB extension                     */
4813                     ; 1482                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
4815 f87c3 cc0003        	ldd	#3
4816 f87c6 3b            	pshd	
4817 f87c7 c7            	clrb	
4818 f87c8 3b            	pshd	
4819 f87c9 c6a0          	ldab	#160
4820 f87cb 3b            	pshd	
4821 f87cc c7            	clrb	
4822 f87cd 3b            	pshd	
4823 f87ce cc157f        	ldd	#_OSTaskIdleStk
4824 f87d1 3b            	pshd	
4825 f87d2 ccffff        	ldd	#-1
4826 f87d5 3b            	pshd	
4827 f87d6 cc003f        	ldd	#63
4828 f87d9 3b            	pshd	
4829 f87da cc161e        	ldd	#_OSTaskIdleStk+159
4830 f87dd 3b            	pshd	
4831 f87de 87            	clra	
4832 f87df c7            	clrb	
4833 f87e0 3b            	pshd	
4834 f87e1 cc4922        	ldd	#_OS_TaskIdle
4835 f87e4 1668c4        	jsr	_OSTaskCreateExt
4837 f87e7 1bf012        	leas	18,s
4838                     ; 1509     OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
4840 f87ea 1a80          	leax	OFST-1,s
4841 f87ec 34            	pshx	
4842 f87ed cc7689        	ldd	#L1242
4843 f87f0 3b            	pshd	
4844 f87f1 cc003f        	ldd	#63
4845 f87f4 166b84        	jsr	_OSTaskNameSet
4847                     ; 1511 }
4850 f87f7 1b85          	leas	5,s
4851 f87f9 3d            	rts	
4918                     ; 1591 static  void  OS_InitTCBList (void)
4918                     ; 1592 {
4919                     	switch	.text
4920 f87fa               L166_OS_InitTCBList:
4922 f87fa 1b9a          	leas	-6,s
4923       00000006      OFST:	set	6
4926                     ; 1599     OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
4928 f87fc cc00ba        	ldd	#186
4929 f87ff 3b            	pshd	
4930 f8800 cc143d        	ldd	#_OSTCBTbl
4931 f8803 075a          	jsr	_OS_MemClr
4933                     ; 1600     OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
4935 f8805 cc0080        	ldd	#128
4936 f8808 6c80          	std	0,s
4937 f880a cc14f7        	ldd	#_OSTCBPrioTbl
4938 f880d 0750          	jsr	_OS_MemClr
4940 f880f 1b82          	leas	2,s
4941                     ; 1601     for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
4943 f8811 c7            	clrb	
4944 f8812 6b80          	stab	OFST-6,s
4945 f8814               L5542:
4946                     ; 1602         ix_next =  ix + 1u;
4948 f8814 52            	incb	
4949 f8815 6b83          	stab	OFST-3,s
4950                     ; 1603         ptcb1   = &OSTCBTbl[ix];
4952 f8817 e680          	ldab	OFST-6,s
4953 f8819 863e          	ldaa	#62
4954 f881b 12            	mul	
4955 f881c c3143d        	addd	#_OSTCBTbl
4956 f881f 6c81          	std	OFST-5,s
4957                     ; 1604         ptcb2   = &OSTCBTbl[ix_next];
4959 f8821 e683          	ldab	OFST-3,s
4960 f8823 863e          	ldaa	#62
4961 f8825 12            	mul	
4962 f8826 c3143d        	addd	#_OSTCBTbl
4963 f8829 6c84          	std	OFST-2,s
4964                     ; 1605         ptcb1->OSTCBNext = ptcb2;
4966 f882b ed81          	ldy	OFST-5,s
4967 f882d 6c4e          	std	14,y
4968                     ; 1607         ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
4970 f882f cc7697        	ldd	#L1532
4971 f8832 6ce83c        	std	60,y
4972                     ; 1601     for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
4974 f8835 6280          	inc	OFST-6,s
4977 f8837 e680          	ldab	OFST-6,s
4978 f8839 c102          	cmpb	#2
4979 f883b 25d7          	blo	L5542
4980                     ; 1610     ptcb1                   = &OSTCBTbl[ix];
4982 f883d 863e          	ldaa	#62
4983 f883f 12            	mul	
4984 f8840 c3143d        	addd	#_OSTCBTbl
4985 f8843 6c81          	std	OFST-5,s
4986                     ; 1611     ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
4988 f8845 87            	clra	
4989 f8846 c7            	clrb	
4990 f8847 ed81          	ldy	OFST-5,s
4991 f8849 6c4e          	std	14,y
4992                     ; 1613     ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
4994 f884b cc7697        	ldd	#L1532
4995 f884e 6ce83c        	std	60,y
4996                     ; 1615     OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
4998 f8851 87            	clra	
4999 f8852 c7            	clrb	
5000 f8853 7c1577        	std	_OSTCBList
5001                     ; 1616     OSTCBFreeList           = &OSTCBTbl[0];
5003 f8856 cc143d        	ldd	#_OSTCBTbl
5004 f8859 7c157b        	std	_OSTCBFreeList
5005                     ; 1617 }
5008 f885c 1b86          	leas	6,s
5009 f885e 3d            	rts	
5050                     ; 1640 _NEAR void  OS_MemClr (INT8U  *pdest,
5050                     ; 1641                       INT16U  size)
5050                     ; 1642 {
5051                     	switch	.text
5052 f885f               _OS_MemClr:
5054 f885f 3b            	pshd	
5055       00000000      OFST:	set	0
5058 f8860 200b          	bra	L5052
5059 f8862               L3052:
5060                     ; 1644         *pdest++ = (INT8U)0;
5062 f8862 ed80          	ldy	OFST+0,s
5063 f8864 6970          	clr	1,y+
5064 f8866 6d80          	sty	OFST+0,s
5065                     ; 1645         size--;
5067 f8868 b746          	tfr	d,y
5068 f886a 03            	dey	
5069 f886b 6d84          	sty	OFST+4,s
5070 f886d               L5052:
5071                     ; 1643     while (size > 0u) {
5073 f886d ec84          	ldd	OFST+4,s
5074 f886f 26f1          	bne	L3052
5075                     ; 1647 }
5078 f8871 31            	puly	
5079 f8872 3d            	rts	
5130                     ; 1674 _NEAR void  OS_MemCopy (INT8U  *pdest,
5130                     ; 1675                        INT8U  *psrc,
5130                     ; 1676                        INT16U  size)
5130                     ; 1677 {
5131                     	switch	.text
5132 f8873               _OS_MemCopy:
5134 f8873 3b            	pshd	
5135       00000000      OFST:	set	0
5138 f8874 ee84          	ldx	OFST+4,s
5139 f8876 200d          	bra	L7352
5140 f8878               L5352:
5141                     ; 1679         *pdest++ = *psrc++;
5143 f8878 ed80          	ldy	OFST+0,s
5144 f887a 180a3070      	movb	1,x+,1,y+
5145 f887e 6d80          	sty	OFST+0,s
5146                     ; 1680         size--;
5148 f8880 ed86          	ldy	OFST+6,s
5149 f8882 03            	dey	
5150 f8883 6d86          	sty	OFST+6,s
5151 f8885               L7352:
5152                     ; 1678     while (size > 0u) {
5154 f8885 ec86          	ldd	OFST+6,s
5155 f8887 26ef          	bne	L5352
5156                     ; 1682 }
5159 f8889 31            	puly	
5160 f888a 3d            	rts	
5203                     ; 1702 _NEAR void  OS_Sched (void)
5203                     ; 1703 {
5204                     	switch	.text
5205 f888b               _OS_Sched:
5207 f888b 37            	pshb	
5208       00000001      OFST:	set	1
5211                     ; 1705     OS_CPU_SR  cpu_sr = 0u;
5213                     ; 1710     OS_ENTER_CRITICAL();
5215 f888c 167522        	jsr	_OS_CPU_SR_Save
5217 f888f 6b80          	stab	OFST-1,s
5218                     ; 1711     if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
5220 f8891 f61631        	ldab	_OSIntNesting
5221 f8894 2644          	bne	L7552
5222                     ; 1712         if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
5224 f8896 f61630        	ldab	_OSLockNesting
5225 f8899 263f          	bne	L7552
5226                     ; 1713             OS_SchedNew();
5228 f889b 0746          	jsr	L366_OS_SchedNew
5230                     ; 1714             OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
5232 f889d f6162e        	ldab	_OSPrioHighRdy
5233 f88a0 87            	clra	
5234 f88a1 59            	lsld	
5235 f88a2 b746          	tfr	d,y
5236 f88a4 edea14f7      	ldy	_OSTCBPrioTbl,y
5237 f88a8 7d1579        	sty	_OSTCBHighRdy
5238                     ; 1715             if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
5240 f88ab f6162e        	ldab	_OSPrioHighRdy
5241 f88ae f1162f        	cmpb	_OSPrioCur
5242 f88b1 2727          	beq	L7552
5243                     ; 1717                 OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
5245 f88b3 ece82c        	ldd	44,y
5246 f88b6 c30001        	addd	#1
5247 f88b9 6ce82c        	std	44,y
5248 f88bc 2408          	bcc	L611
5249 f88be 62e82b        	inc	43,y
5250 f88c1 2603          	bne	L611
5251 f88c3 62e82a        	inc	42,y
5252 f88c6               L611:
5253                     ; 1719                 OSCtxSwCtr++;                          /* Increment context switch counter             */
5255 f88c6 fc16fb        	ldd	_OSCtxSwCtr+2
5256 f88c9 c30001        	addd	#1
5257 f88cc 7c16fb        	std	_OSCtxSwCtr+2
5258 f88cf 2408          	bcc	L021
5259 f88d1 7216fa        	inc	_OSCtxSwCtr+1
5260 f88d4 2603          	bne	L021
5261 f88d6 7216f9        	inc	_OSCtxSwCtr
5262 f88d9               L021:
5263                     ; 1727                 OS_TASK_SW();                          /* Perform a context switch                     */
5266 f88d9 3f            	swi	
5269 f88da               L7552:
5270                     ; 1731     OS_EXIT_CRITICAL();
5272 f88da e680          	ldab	OFST-1,s
5273 f88dc 87            	clra	
5274 f88dd 167527        	jsr	_OS_CPU_SR_Restore
5276                     ; 1732 }
5279 f88e0 1b81          	leas	1,s
5280 f88e2 3d            	rts	
5315                     ; 1751 _NEAR static  void  OS_SchedNew (void)
5315                     ; 1752 {
5316                     	switch	.text
5317 f88e3               L366_OS_SchedNew:
5319 f88e3 37            	pshb	
5320       00000001      OFST:	set	1
5323                     ; 1757     y             = OSUnMapTbl[OSRdyGrp];
5325 f88e4 f6162d        	ldab	_OSRdyGrp
5326 f88e7 87            	clra	
5327 f88e8 b746          	tfr	d,y
5328 f88ea e6ea7589      	ldab	_OSUnMapTbl,y
5329 f88ee 6b80          	stab	OFST-1,s
5330                     ; 1758     OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
5332 f88f0 b746          	tfr	d,y
5333 f88f2 e6ea1625      	ldab	_OSRdyTbl,y
5334 f88f6 b746          	tfr	d,y
5335 f88f8 e680          	ldab	OFST-1,s
5336 f88fa 58            	lslb	
5337 f88fb 58            	lslb	
5338 f88fc 58            	lslb	
5339 f88fd ebea7589      	addb	_OSUnMapTbl,y
5340 f8901 7b162e        	stab	_OSPrioHighRdy
5341                     ; 1776 }
5344 f8904 1b81          	leas	1,s
5345 f8906 3d            	rts	
5386                     ; 1796 _NEAR INT8U  OS_StrLen (INT8U *psrc)
5386                     ; 1797 {
5387                     	switch	.text
5388 f8907               _OS_StrLen:
5390 f8907 3b            	pshd	
5391 f8908 37            	pshb	
5392       00000001      OFST:	set	1
5395                     ; 1802     if (psrc == (INT8U *)0) {
5397 f8909 046402        	tbne	d,L1262
5398                     ; 1803         return (0u);
5401 f890c 2011          	bra	L621
5402 f890e               L1262:
5403                     ; 1807     len = 0u;
5405 f890e 6980          	clr	OFST-1,s
5407 f8910 b746          	tfr	d,y
5408 f8912 2003          	bra	L7262
5409 f8914               L3262:
5410                     ; 1809         psrc++;
5412 f8914 02            	iny	
5413                     ; 1810         len++;
5415 f8915 6280          	inc	OFST-1,s
5416 f8917               L7262:
5417                     ; 1808     while (*psrc != OS_ASCII_NUL) {
5417                     ; 1809         psrc++;
5417                     ; 1810         len++;
5419 f8917 e640          	ldab	0,y
5420 f8919 26f9          	bne	L3262
5421 f891b 6d81          	sty	OFST+0,s
5422                     ; 1812     return (len);
5424 f891d e680          	ldab	OFST-1,s
5426 f891f               L621:
5428 f891f 1b83          	leas	3,s
5429 f8921 3d            	rts	
5474                     ; 1838 _NEAR void  OS_TaskIdle (void *p_arg)
5474                     ; 1839 {
5475                     	switch	.text
5476 f8922               _OS_TaskIdle:
5478 f8922 3b            	pshd	
5479 f8923 37            	pshb	
5480       00000001      OFST:	set	1
5483                     ; 1841     OS_CPU_SR  cpu_sr = 0u;
5485                     ; 1844     (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
5487 f8924               L3562:
5488                     ; 1846         OS_ENTER_CRITICAL();
5490 f8924 167522        	jsr	_OS_CPU_SR_Save
5492 f8927 6b80          	stab	OFST-1,s
5493                     ; 1847         OSIdleCtr++;
5495 f8929 fc1621        	ldd	_OSIdleCtr+2
5496 f892c c30001        	addd	#1
5497 f892f 7c1621        	std	_OSIdleCtr+2
5498 f8932 2408          	bcc	L231
5499 f8934 721620        	inc	_OSIdleCtr+1
5500 f8937 2603          	bne	L231
5501 f8939 72161f        	inc	_OSIdleCtr
5502 f893c               L231:
5503                     ; 1848         OS_EXIT_CRITICAL();
5505 f893c e680          	ldab	OFST-1,s
5506 f893e 87            	clra	
5507 f893f 167527        	jsr	_OS_CPU_SR_Restore
5509                     ; 1849         OSTaskIdleHook();                        /* Call user definable HOOK                           */
5511 f8942 164ab0        	jsr	_OSTaskIdleHook
5514 f8945 20dd          	bra	L3562
5597                     ; 1949 _NEAR void  OS_TaskStatStkChk (void)
5597                     ; 1950 {
5598                     	switch	.text
5599 f8947               _OS_TaskStatStkChk:
5601 f8947 1b94          	leas	-12,s
5602       0000000c      OFST:	set	12
5605                     ; 1957     for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
5607 f8949 6982          	clr	OFST-10,s
5608 f894b               L7172:
5609                     ; 1958         err = OSTaskStkChk(prio, &stk_data);
5611 f894b 1a83          	leax	OFST-9,s
5612 f894d 34            	pshx	
5613 f894e e684          	ldab	OFST-8,s
5614 f8950 87            	clra	
5615 f8951 166c7b        	jsr	_OSTaskStkChk
5617 f8954 1b82          	leas	2,s
5618 f8956 6b8b          	stab	OFST-1,s
5619                     ; 1959         if (err == OS_ERR_NONE) {
5621 f8958 2624          	bne	L5272
5622                     ; 1960             ptcb = OSTCBPrioTbl[prio];
5624 f895a e682          	ldab	OFST-10,s
5625 f895c 87            	clra	
5626 f895d 59            	lsld	
5627 f895e b746          	tfr	d,y
5628 f8960 edea14f7      	ldy	_OSTCBPrioTbl,y
5629 f8964 6d80          	sty	OFST-12,s
5630                     ; 1961             if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
5632 f8966 ec80          	ldd	OFST-12,s
5633 f8968 2714          	beq	L5272
5634                     ; 1962                 if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
5636 f896a 040411        	dbeq	d,L5272
5637                     ; 1965                     ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
5639 f896d ec48          	ldd	8,y
5640 f896f e344          	addd	4,y
5641 f8971 6ce836        	std	54,y
5642                     ; 1969                     ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
5644 f8974 ec89          	ldd	OFST-3,s
5645 f8976 6ce83a        	std	58,y
5646 f8979 ec87          	ldd	OFST-5,s
5647 f897b 6ce838        	std	56,y
5648 f897e               L5272:
5649                     ; 1957     for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
5651 f897e 6282          	inc	OFST-10,s
5654 f8980 e682          	ldab	OFST-10,s
5655 f8982 c13f          	cmpb	#63
5656 f8984 23c5          	bls	L7172
5657                     ; 1975 }
5660 f8986 1b8c          	leas	12,s
5661 f8988 3d            	rts	
5772                     ; 2022 _NEAR INT8U  OS_TCBInit (INT8U    prio,
5772                     ; 2023                         OS_STK  *ptos,
5772                     ; 2024                         OS_STK  *pbos,
5772                     ; 2025                         INT16U   id,
5772                     ; 2026                         INT32U   stk_size,
5772                     ; 2027                         void    *pext,
5772                     ; 2028                         INT16U   opt)
5772                     ; 2029 {
5773                     	switch	.text
5774 f8989               _OS_TCBInit:
5776 f8989 3b            	pshd	
5777 f898a 1b9d          	leas	-3,s
5778       00000003      OFST:	set	3
5781                     ; 2032     OS_CPU_SR  cpu_sr = 0u;
5783                     ; 2044     OS_ENTER_CRITICAL();
5785 f898c 167522        	jsr	_OS_CPU_SR_Save
5787 f898f 6b82          	stab	OFST-1,s
5788                     ; 2045     ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
5790 f8991 fd157b        	ldy	_OSTCBFreeList
5791 f8994 6d80          	sty	OFST-3,s
5792                     ; 2046     if (ptcb != (OS_TCB *)0) {
5794 f8996 18270104      	beq	L1003
5795                     ; 2047         OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
5797 f899a 18054e157b    	movw	14,y,_OSTCBFreeList
5798                     ; 2048         OS_EXIT_CRITICAL();
5800 f899f 87            	clra	
5801 f89a0 167527        	jsr	_OS_CPU_SR_Restore
5803                     ; 2049         ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
5805 f89a3 ed80          	ldy	OFST-3,s
5806 f89a5 18028740      	movw	OFST+4,s,0,y
5807                     ; 2050         ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
5809 f89a9 e684          	ldab	OFST+1,s
5810 f89ab 6be824        	stab	36,y
5811                     ; 2051         ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
5813 f89ae c7            	clrb	
5814 f89af 6be822        	stab	34,y
5815                     ; 2052         ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
5817 f89b2 87            	clra	
5818 f89b3 6ae823        	staa	35,y
5819                     ; 2053         ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
5821 f89b6 6ce820        	std	32,y
5822 f89b9 6ce81e        	std	30,y
5823                     ; 2056         ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
5825 f89bc ecf011        	ldd	OFST+14,s
5826 f89bf 6c42          	std	2,y
5827                     ; 2057         ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
5829 f89c1 18028f48      	movw	OFST+12,s,8,y
5830 f89c5 18028d46      	movw	OFST+10,s,6,y
5831                     ; 2058         ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
5833 f89c9 18028944      	movw	OFST+6,s,4,y
5834                     ; 2059         ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
5836 f89cd ecf013        	ldd	OFST+16,s
5837 f89d0 6c4a          	std	10,y
5838                     ; 2060         ptcb->OSTCBId            = id;                     /* Store task ID                            */
5840 f89d2 18028b4c      	movw	OFST+8,s,12,y
5841                     ; 2070         ptcb->OSTCBDelReq        = OS_ERR_NONE;
5843 f89d6 69e829        	clr	41,y
5844                     ; 2074         ptcb->OSTCBY             = (INT8U)(prio >> 3u);
5846 f89d9 e684          	ldab	OFST+1,s
5847 f89db 54            	lsrb	
5848 f89dc 54            	lsrb	
5849 f89dd 54            	lsrb	
5850 f89de 6be826        	stab	38,y
5851                     ; 2075         ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
5853 f89e1 e684          	ldab	OFST+1,s
5854 f89e3 c407          	andb	#7
5855 f89e5 6be825        	stab	37,y
5856                     ; 2081         ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
5858 f89e8 c601          	ldab	#1
5859 f89ea a6e826        	ldaa	38,y
5860 f89ed 2704          	beq	L041
5861 f89ef               L241:
5862 f89ef 58            	lslb	
5863 f89f0 0430fc        	dbne	a,L241
5864 f89f3               L041:
5865 f89f3 6be828        	stab	40,y
5866                     ; 2082         ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
5868 f89f6 c601          	ldab	#1
5869 f89f8 a6e825        	ldaa	37,y
5870 f89fb 2704          	beq	L441
5871 f89fd               L641:
5872 f89fd 58            	lslb	
5873 f89fe 0430fc        	dbne	a,L641
5874 f8a01               L441:
5875 f8a01 6be827        	stab	39,y
5876                     ; 2085         ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
5878 f8a04 87            	clra	
5879 f8a05 c7            	clrb	
5880 f8a06 6ce812        	std	18,y
5881                     ; 2087         ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
5883 f8a09 6ce814        	std	20,y
5884                     ; 2088         ptcb->OSTCBEventMultiRdy = (OS_EVENT  *)0;         /* No events readied for Multipend          */
5886 f8a0c 6ce816        	std	22,y
5887                     ; 2093         ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
5889 f8a0f 6ce81a        	std	26,y
5890                     ; 2097         ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
5892 f8a12 6ce818        	std	24,y
5893                     ; 2101         ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
5895 f8a15 6ce82c        	std	44,y
5896 f8a18 6ce82a        	std	42,y
5897                     ; 2102         ptcb->OSTCBCyclesStart   = 0uL;
5899 f8a1b 6ce834        	std	52,y
5900 f8a1e 6ce832        	std	50,y
5901                     ; 2103         ptcb->OSTCBCyclesTot     = 0uL;
5903 f8a21 6ce830        	std	48,y
5904 f8a24 6ce82e        	std	46,y
5905                     ; 2104         ptcb->OSTCBStkBase       = (OS_STK *)0;
5907 f8a27 6ce836        	std	54,y
5908                     ; 2105         ptcb->OSTCBStkUsed       = 0uL;
5910 f8a2a 6ce83a        	std	58,y
5911 f8a2d 6ce838        	std	56,y
5912                     ; 2109         ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
5914 f8a30 cc7697        	ldd	#L1532
5915 f8a33 6ce83c        	std	60,y
5916                     ; 2118         OSTCBInitHook(ptcb);
5918 f8a36 ec80          	ldd	OFST-3,s
5919 f8a38 164afc        	jsr	_OSTCBInitHook
5921                     ; 2120         OS_ENTER_CRITICAL();
5923 f8a3b 167522        	jsr	_OS_CPU_SR_Save
5925 f8a3e 6b82          	stab	OFST-1,s
5926                     ; 2121         OSTCBPrioTbl[prio] = ptcb;
5928 f8a40 e684          	ldab	OFST+1,s
5929 f8a42 87            	clra	
5930 f8a43 59            	lsld	
5931 f8a44 b746          	tfr	d,y
5932 f8a46 ec80          	ldd	OFST-3,s
5933 f8a48 6cea14f7      	std	_OSTCBPrioTbl,y
5934                     ; 2122         OS_EXIT_CRITICAL();
5936 f8a4c e682          	ldab	OFST-1,s
5937 f8a4e 87            	clra	
5938 f8a4f 167527        	jsr	_OS_CPU_SR_Restore
5940                     ; 2124         OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
5942 f8a52 ec80          	ldd	OFST-3,s
5943 f8a54 164aae        	jsr	_OSTaskCreateHook
5945                     ; 2135         OS_ENTER_CRITICAL();
5947 f8a57 167522        	jsr	_OS_CPU_SR_Save
5949 f8a5a 6b82          	stab	OFST-1,s
5950                     ; 2136         ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
5952 f8a5c ed80          	ldy	OFST-3,s
5953 f8a5e 18014e1577    	movw	_OSTCBList,14,y
5954                     ; 2137         ptcb->OSTCBPrev = (OS_TCB *)0;
5956 f8a63 87            	clra	
5957 f8a64 c7            	clrb	
5958 f8a65 6ce810        	std	16,y
5959                     ; 2138         if (OSTCBList != (OS_TCB *)0) {
5961 f8a68 fd1577        	ldy	_OSTCBList
5962 f8a6b 2705          	beq	L3003
5963                     ; 2139             OSTCBList->OSTCBPrev = ptcb;
5965 f8a6d ec80          	ldd	OFST-3,s
5966 f8a6f 6ce810        	std	16,y
5967 f8a72               L3003:
5968                     ; 2141         OSTCBList               = ptcb;
5970 f8a72 ed80          	ldy	OFST-3,s
5971 f8a74 7d1577        	sty	_OSTCBList
5972                     ; 2142         OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
5974 f8a77 e6e828        	ldab	40,y
5975 f8a7a fa162d        	orab	_OSRdyGrp
5976 f8a7d 7b162d        	stab	_OSRdyGrp
5977                     ; 2143         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
5979 f8a80 e6e826        	ldab	38,y
5980 f8a83 87            	clra	
5981 f8a84 b746          	tfr	d,y
5982 f8a86 ee80          	ldx	OFST-3,s
5983 f8a88 e6e027        	ldab	39,x
5984 f8a8b eaea1625      	orab	_OSRdyTbl,y
5985 f8a8f 6bea1625      	stab	_OSRdyTbl,y
5986                     ; 2144         OSTaskCtr++;                                       /* Increment the #tasks counter             */
5988 f8a93 721623        	inc	_OSTaskCtr
5989                     ; 2146         OS_EXIT_CRITICAL();
5992 f8a96 e682          	ldab	OFST-1,s
5993 f8a98 167527        	jsr	_OS_CPU_SR_Restore
5995                     ; 2147         return (OS_ERR_NONE);
5997 f8a9b c7            	clrb	
5999 f8a9c 2006          	bra	L051
6000 f8a9e               L1003:
6001                     ; 2149     OS_EXIT_CRITICAL();
6003 f8a9e 87            	clra	
6004 f8a9f 167527        	jsr	_OS_CPU_SR_Restore
6006                     ; 2150     return (OS_ERR_TASK_NO_MORE_TCB);
6008 f8aa2 c642          	ldab	#66
6010 f8aa4               L051:
6012 f8aa4 1b85          	leas	5,s
6013 f8aa6 3d            	rts	
6037                     	xref	_OSTimeTickHook
6038                     	xref	_OSTCBInitHook
6039                     	xref	_OSTaskIdleHook
6040                     	xref	_OSTaskCreateHook
6041                     	xref	_OSInitHookEnd
6042                     	xref	_OSInitHookBegin
6043                     	xref	_OSDebugInit
6044                     	xref	_OSTmr_Init
6045                     	xdef	_OS_TCBInit
6046                     	xdef	_OS_TaskStatStkChk
6047                     	xdef	_OS_TaskIdle
6048                     	xdef	_OS_StrLen
6049                     	xdef	_OS_Sched
6050                     	xref	_OS_QInit
6051                     	xref	_OS_MemInit
6052                     	xdef	_OS_MemCopy
6053                     	xdef	_OS_MemClr
6054                     	xref	_OS_FlagInit
6055                     	xdef	_OS_EventWaitListInit
6056                     	xdef	_OS_EventTaskRemoveMulti
6057                     	xdef	_OS_EventTaskWaitMulti
6058                     	xdef	_OS_EventTaskRemove
6059                     	xdef	_OS_EventTaskWait
6060                     	xdef	_OS_EventTaskRdy
6061                     	xdef	_OS_Dummy
6062                     	xdef	_OSVersion
6063                     	xdef	_OSStart
6064                     	xdef	_OSSchedUnlock
6065                     	xdef	_OSSchedLock
6066                     	xdef	_OSIntExit
6067                     	xdef	_OSIntEnter
6068                     	xdef	_OSInit
6069                     	xdef	_OSTimeTick
6070                     	xref	_OSTaskStkChk
6071                     	xref	_OSTaskNameSet
6072                     	xref	_OSTaskCreateExt
6073                     	xdef	_OSEventPendMulti
6074                     	xdef	_OSEventNameSet
6075                     	xdef	_OSEventNameGet
6076                     	xdef	_OSUnMapTbl
6077                     	switch	.bss
6078 01164               _OSTmrWheelTbl:
6079 01164 000000000000  	ds.b	32
6080                     	xdef	_OSTmrWheelTbl
6081 01184               _OSTmrTaskStk:
6082 01184 000000000000  	ds.b	160
6083                     	xdef	_OSTmrTaskStk
6084 01224               _OSTmrFreeList:
6085 01224 0000          	ds.b	2
6086                     	xdef	_OSTmrFreeList
6087 01226               _OSTmrTbl:
6088 01226 000000000000  	ds.b	368
6089                     	xdef	_OSTmrTbl
6090 01396               _OSTmrSemSignal:
6091 01396 0000          	ds.b	2
6092                     	xdef	_OSTmrSemSignal
6093 01398               _OSTmrSem:
6094 01398 0000          	ds.b	2
6095                     	xdef	_OSTmrSem
6096 0139a               _OSTmrTime:
6097 0139a 00000000      	ds.b	4
6098                     	xdef	_OSTmrTime
6099 0139e               _OSTmrUsed:
6100 0139e 0000          	ds.b	2
6101                     	xdef	_OSTmrUsed
6102 013a0               _OSTmrFree:
6103 013a0 0000          	ds.b	2
6104                     	xdef	_OSTmrFree
6105 013a2               _OSTime:
6106 013a2 00000000      	ds.b	4
6107                     	xdef	_OSTime
6108 013a6               _OSQTbl:
6109 013a6 000000000000  	ds.b	56
6110                     	xdef	_OSQTbl
6111 013de               _OSQFreeList:
6112 013de 0000          	ds.b	2
6113                     	xdef	_OSQFreeList
6114 013e0               _OSMemTbl:
6115 013e0 000000000000  	ds.b	90
6116                     	xdef	_OSMemTbl
6117 0143a               _OSMemFreeList:
6118 0143a 0000          	ds.b	2
6119                     	xdef	_OSMemFreeList
6120 0143c               _OSTickStepState:
6121 0143c 00            	ds.b	1
6122                     	xdef	_OSTickStepState
6123 0143d               _OSTCBTbl:
6124 0143d 000000000000  	ds.b	186
6125                     	xdef	_OSTCBTbl
6126 014f7               _OSTCBPrioTbl:
6127 014f7 000000000000  	ds.b	128
6128                     	xdef	_OSTCBPrioTbl
6129 01577               _OSTCBList:
6130 01577 0000          	ds.b	2
6131                     	xdef	_OSTCBList
6132 01579               _OSTCBHighRdy:
6133 01579 0000          	ds.b	2
6134                     	xdef	_OSTCBHighRdy
6135 0157b               _OSTCBFreeList:
6136 0157b 0000          	ds.b	2
6137                     	xdef	_OSTCBFreeList
6138 0157d               _OSTCBCur:
6139 0157d 0000          	ds.b	2
6140                     	xdef	_OSTCBCur
6141 0157f               _OSTaskIdleStk:
6142 0157f 000000000000  	ds.b	160
6143                     	xdef	_OSTaskIdleStk
6144 0161f               _OSIdleCtr:
6145 0161f 00000000      	ds.b	4
6146                     	xdef	_OSIdleCtr
6147 01623               _OSTaskCtr:
6148 01623 00            	ds.b	1
6149                     	xdef	_OSTaskCtr
6150 01624               _OSRunning:
6151 01624 00            	ds.b	1
6152                     	xdef	_OSRunning
6153 01625               _OSRdyTbl:
6154 01625 000000000000  	ds.b	8
6155                     	xdef	_OSRdyTbl
6156 0162d               _OSRdyGrp:
6157 0162d 00            	ds.b	1
6158                     	xdef	_OSRdyGrp
6159 0162e               _OSPrioHighRdy:
6160 0162e 00            	ds.b	1
6161                     	xdef	_OSPrioHighRdy
6162 0162f               _OSPrioCur:
6163 0162f 00            	ds.b	1
6164                     	xdef	_OSPrioCur
6165 01630               _OSLockNesting:
6166 01630 00            	ds.b	1
6167                     	xdef	_OSLockNesting
6168 01631               _OSIntNesting:
6169 01631 00            	ds.b	1
6170                     	xdef	_OSIntNesting
6171 01632               _OSFlagFreeList:
6172 01632 0000          	ds.b	2
6173                     	xdef	_OSFlagFreeList
6174 01634               _OSFlagTbl:
6175 01634 000000000000  	ds.b	35
6176                     	xdef	_OSFlagTbl
6177 01657               _OSEventTbl:
6178 01657 000000000000  	ds.b	160
6179                     	xdef	_OSEventTbl
6180 016f7               _OSEventFreeList:
6181 016f7 0000          	ds.b	2
6182                     	xdef	_OSEventFreeList
6183 016f9               _OSCtxSwCtr:
6184 016f9 00000000      	ds.b	4
6185                     	xdef	_OSCtxSwCtr
6186                     	xref	_OS_CPU_SR_Restore
6187                     	xref	_OS_CPU_SR_Save
6188                     	switch	.const
6189 fb689               L1242:
6190 fb689 75432f4f532d  	dc.b	"uC/OS-II Idle",0
6191 fb697               L1532:
6192 fb697 3f00          	dc.b	"?",0
6213                     	end
