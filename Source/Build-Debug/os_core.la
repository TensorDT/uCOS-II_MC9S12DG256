   1                     ; C Compiler for 68HCS12 [COSMIC Software]
   2                     ; Parser V4.11.9 - 08 Feb 2017
   3                     ; Generator V4.8.12 - 22 Feb 2017
   4                     ; Optimizer V4.7.11 - 22 Feb 2017
5032                     .const:	section	.data
5033 fb5af               _OSUnMapTbl:
5034 fb5af 00            	dc.b	0
5035 fb5b0 00            	dc.b	0
5036 fb5b1 01            	dc.b	1
5037 fb5b2 00            	dc.b	0
5038 fb5b3 02            	dc.b	2
5039 fb5b4 00            	dc.b	0
5040 fb5b5 01            	dc.b	1
5041 fb5b6 00            	dc.b	0
5042 fb5b7 03            	dc.b	3
5043 fb5b8 00            	dc.b	0
5044 fb5b9 01            	dc.b	1
5045 fb5ba 00            	dc.b	0
5046 fb5bb 02            	dc.b	2
5047 fb5bc 00            	dc.b	0
5048 fb5bd 01            	dc.b	1
5049 fb5be 00            	dc.b	0
5050 fb5bf 04            	dc.b	4
5051 fb5c0 00            	dc.b	0
5052 fb5c1 01            	dc.b	1
5053 fb5c2 00            	dc.b	0
5054 fb5c3 02            	dc.b	2
5055 fb5c4 00            	dc.b	0
5056 fb5c5 01            	dc.b	1
5057 fb5c6 00            	dc.b	0
5058 fb5c7 03            	dc.b	3
5059 fb5c8 00            	dc.b	0
5060 fb5c9 01            	dc.b	1
5061 fb5ca 00            	dc.b	0
5062 fb5cb 02            	dc.b	2
5063 fb5cc 00            	dc.b	0
5064 fb5cd 01            	dc.b	1
5065 fb5ce 00            	dc.b	0
5066 fb5cf 05            	dc.b	5
5067 fb5d0 00            	dc.b	0
5068 fb5d1 01            	dc.b	1
5069 fb5d2 00            	dc.b	0
5070 fb5d3 02            	dc.b	2
5071 fb5d4 00            	dc.b	0
5072 fb5d5 01            	dc.b	1
5073 fb5d6 00            	dc.b	0
5074 fb5d7 03            	dc.b	3
5075 fb5d8 00            	dc.b	0
5076 fb5d9 01            	dc.b	1
5077 fb5da 00            	dc.b	0
5078 fb5db 02            	dc.b	2
5079 fb5dc 00            	dc.b	0
5080 fb5dd 01            	dc.b	1
5081 fb5de 00            	dc.b	0
5082 fb5df 04            	dc.b	4
5083 fb5e0 00            	dc.b	0
5084 fb5e1 01            	dc.b	1
5085 fb5e2 00            	dc.b	0
5086 fb5e3 02            	dc.b	2
5087 fb5e4 00            	dc.b	0
5088 fb5e5 01            	dc.b	1
5089 fb5e6 00            	dc.b	0
5090 fb5e7 03            	dc.b	3
5091 fb5e8 00            	dc.b	0
5092 fb5e9 01            	dc.b	1
5093 fb5ea 00            	dc.b	0
5094 fb5eb 02            	dc.b	2
5095 fb5ec 00            	dc.b	0
5096 fb5ed 01            	dc.b	1
5097 fb5ee 00            	dc.b	0
5098 fb5ef 06            	dc.b	6
5099 fb5f0 00            	dc.b	0
5100 fb5f1 01            	dc.b	1
5101 fb5f2 00            	dc.b	0
5102 fb5f3 02            	dc.b	2
5103 fb5f4 00            	dc.b	0
5104 fb5f5 01            	dc.b	1
5105 fb5f6 00            	dc.b	0
5106 fb5f7 03            	dc.b	3
5107 fb5f8 00            	dc.b	0
5108 fb5f9 01            	dc.b	1
5109 fb5fa 00            	dc.b	0
5110 fb5fb 02            	dc.b	2
5111 fb5fc 00            	dc.b	0
5112 fb5fd 01            	dc.b	1
5113 fb5fe 00            	dc.b	0
5114 fb5ff 04            	dc.b	4
5115 fb600 00            	dc.b	0
5116 fb601 01            	dc.b	1
5117 fb602 00            	dc.b	0
5118 fb603 02            	dc.b	2
5119 fb604 00            	dc.b	0
5120 fb605 01            	dc.b	1
5121 fb606 00            	dc.b	0
5122 fb607 03            	dc.b	3
5123 fb608 00            	dc.b	0
5124 fb609 01            	dc.b	1
5125 fb60a 00            	dc.b	0
5126 fb60b 02            	dc.b	2
5127 fb60c 00            	dc.b	0
5128 fb60d 01            	dc.b	1
5129 fb60e 00            	dc.b	0
5130 fb60f 05            	dc.b	5
5131 fb610 00            	dc.b	0
5132 fb611 01            	dc.b	1
5133 fb612 00            	dc.b	0
5134 fb613 02            	dc.b	2
5135 fb614 00            	dc.b	0
5136 fb615 01            	dc.b	1
5137 fb616 00            	dc.b	0
5138 fb617 03            	dc.b	3
5139 fb618 00            	dc.b	0
5140 fb619 01            	dc.b	1
5141 fb61a 00            	dc.b	0
5142 fb61b 02            	dc.b	2
5143 fb61c 00            	dc.b	0
5144 fb61d 01            	dc.b	1
5145 fb61e 00            	dc.b	0
5146 fb61f 04            	dc.b	4
5147 fb620 00            	dc.b	0
5148 fb621 01            	dc.b	1
5149 fb622 00            	dc.b	0
5150 fb623 02            	dc.b	2
5151 fb624 00            	dc.b	0
5152 fb625 01            	dc.b	1
5153 fb626 00            	dc.b	0
5154 fb627 03            	dc.b	3
5155 fb628 00            	dc.b	0
5156 fb629 01            	dc.b	1
5157 fb62a 00            	dc.b	0
5158 fb62b 02            	dc.b	2
5159 fb62c 00            	dc.b	0
5160 fb62d 01            	dc.b	1
5161 fb62e 00            	dc.b	0
5162 fb62f 07            	dc.b	7
5163 fb630 00            	dc.b	0
5164 fb631 01            	dc.b	1
5165 fb632 00            	dc.b	0
5166 fb633 02            	dc.b	2
5167 fb634 00            	dc.b	0
5168 fb635 01            	dc.b	1
5169 fb636 00            	dc.b	0
5170 fb637 03            	dc.b	3
5171 fb638 00            	dc.b	0
5172 fb639 01            	dc.b	1
5173 fb63a 00            	dc.b	0
5174 fb63b 02            	dc.b	2
5175 fb63c 00            	dc.b	0
5176 fb63d 01            	dc.b	1
5177 fb63e 00            	dc.b	0
5178 fb63f 04            	dc.b	4
5179 fb640 00            	dc.b	0
5180 fb641 01            	dc.b	1
5181 fb642 00            	dc.b	0
5182 fb643 02            	dc.b	2
5183 fb644 00            	dc.b	0
5184 fb645 01            	dc.b	1
5185 fb646 00            	dc.b	0
5186 fb647 03            	dc.b	3
5187 fb648 00            	dc.b	0
5188 fb649 01            	dc.b	1
5189 fb64a 00            	dc.b	0
5190 fb64b 02            	dc.b	2
5191 fb64c 00            	dc.b	0
5192 fb64d 01            	dc.b	1
5193 fb64e 00            	dc.b	0
5194 fb64f 05            	dc.b	5
5195 fb650 00            	dc.b	0
5196 fb651 01            	dc.b	1
5197 fb652 00            	dc.b	0
5198 fb653 02            	dc.b	2
5199 fb654 00            	dc.b	0
5200 fb655 01            	dc.b	1
5201 fb656 00            	dc.b	0
5202 fb657 03            	dc.b	3
5203 fb658 00            	dc.b	0
5204 fb659 01            	dc.b	1
5205 fb65a 00            	dc.b	0
5206 fb65b 02            	dc.b	2
5207 fb65c 00            	dc.b	0
5208 fb65d 01            	dc.b	1
5209 fb65e 00            	dc.b	0
5210 fb65f 04            	dc.b	4
5211 fb660 00            	dc.b	0
5212 fb661 01            	dc.b	1
5213 fb662 00            	dc.b	0
5214 fb663 02            	dc.b	2
5215 fb664 00            	dc.b	0
5216 fb665 01            	dc.b	1
5217 fb666 00            	dc.b	0
5218 fb667 03            	dc.b	3
5219 fb668 00            	dc.b	0
5220 fb669 01            	dc.b	1
5221 fb66a 00            	dc.b	0
5222 fb66b 02            	dc.b	2
5223 fb66c 00            	dc.b	0
5224 fb66d 01            	dc.b	1
5225 fb66e 00            	dc.b	0
5226 fb66f 06            	dc.b	6
5227 fb670 00            	dc.b	0
5228 fb671 01            	dc.b	1
5229 fb672 00            	dc.b	0
5230 fb673 02            	dc.b	2
5231 fb674 00            	dc.b	0
5232 fb675 01            	dc.b	1
5233 fb676 00            	dc.b	0
5234 fb677 03            	dc.b	3
5235 fb678 00            	dc.b	0
5236 fb679 01            	dc.b	1
5237 fb67a 00            	dc.b	0
5238 fb67b 02            	dc.b	2
5239 fb67c 00            	dc.b	0
5240 fb67d 01            	dc.b	1
5241 fb67e 00            	dc.b	0
5242 fb67f 04            	dc.b	4
5243 fb680 00            	dc.b	0
5244 fb681 01            	dc.b	1
5245 fb682 00            	dc.b	0
5246 fb683 02            	dc.b	2
5247 fb684 00            	dc.b	0
5248 fb685 01            	dc.b	1
5249 fb686 00            	dc.b	0
5250 fb687 03            	dc.b	3
5251 fb688 00            	dc.b	0
5252 fb689 01            	dc.b	1
5253 fb68a 00            	dc.b	0
5254 fb68b 02            	dc.b	2
5255 fb68c 00            	dc.b	0
5256 fb68d 01            	dc.b	1
5257 fb68e 00            	dc.b	0
5258 fb68f 05            	dc.b	5
5259 fb690 00            	dc.b	0
5260 fb691 01            	dc.b	1
5261 fb692 00            	dc.b	0
5262 fb693 02            	dc.b	2
5263 fb694 00            	dc.b	0
5264 fb695 01            	dc.b	1
5265 fb696 00            	dc.b	0
5266 fb697 03            	dc.b	3
5267 fb698 00            	dc.b	0
5268 fb699 01            	dc.b	1
5269 fb69a 00            	dc.b	0
5270 fb69b 02            	dc.b	2
5271 fb69c 00            	dc.b	0
5272 fb69d 01            	dc.b	1
5273 fb69e 00            	dc.b	0
5274 fb69f 04            	dc.b	4
5275 fb6a0 00            	dc.b	0
5276 fb6a1 01            	dc.b	1
5277 fb6a2 00            	dc.b	0
5278 fb6a3 02            	dc.b	2
5279 fb6a4 00            	dc.b	0
5280 fb6a5 01            	dc.b	1
5281 fb6a6 00            	dc.b	0
5282 fb6a7 03            	dc.b	3
5283 fb6a8 00            	dc.b	0
5284 fb6a9 01            	dc.b	1
5285 fb6aa 00            	dc.b	0
5286 fb6ab 02            	dc.b	2
5287 fb6ac 00            	dc.b	0
5288 fb6ad 01            	dc.b	1
5289 fb6ae 00            	dc.b	0
5429                     ; 117 _NEAR INT8U  OSEventNameGet (OS_EVENT   *pevent,
5429                     ; 118                             INT8U     **pname,
5429                     ; 119                             INT8U      *perr)
5429                     ; 120 {
5430                     	switch	.text
5431 f8127               _OSEventNameGet:
5433 f8127 3b            	pshd	
5434       00000002      OFST:	set	2
5437                     ; 123     OS_CPU_SR  cpu_sr = 0u;
5439                     ; 136     if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
5441 f8128 6cae          	std	2,-s
5442 f812a 2604          	bne	L1263
5443                     ; 137         *perr = OS_ERR_PEVENT_NULL;
5445 f812c c604          	ldab	#4
5446                     ; 138         return (0u);
5449 f812e 2006          	bra	LC001
5450 f8130               L1263:
5451                     ; 140     if (pname == (INT8U **)0) {                   /* Is 'pname' a NULL pointer?                         */
5453 f8130 ec86          	ldd	OFST+4,s
5454 f8132 260a          	bne	L3263
5455                     ; 141         *perr = OS_ERR_PNAME_NULL;
5457 f8134 c60c          	ldab	#12
5458                     ; 142         return (0u);
5460 f8136               LC001:
5461 f8136 6bf30008      	stab	[OFST+6,s]
5462 f813a c7            	clrb	
5464 f813b               L6:
5466 f813b 1b84          	leas	4,s
5467 f813d 3d            	rts	
5468 f813e               L3263:
5469                     ; 145     if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
5471 f813e f6163c        	ldab	_OSIntNesting
5472 f8141 2704          	beq	L5263
5473                     ; 146         *perr  = OS_ERR_NAME_GET_ISR;
5475 f8143 c611          	ldab	#17
5476                     ; 147         return (0u);
5479 f8145 20ef          	bra	LC001
5480 f8147               L5263:
5481                     ; 149     switch (pevent->OSEventType) {
5483 f8147 e6f30002      	ldab	[OFST+0,s]
5485 f814b 04010d        	dbeq	b,L1363
5486 f814e 04010a        	dbeq	b,L1363
5487 f8151 040107        	dbeq	b,L1363
5488 f8154 040104        	dbeq	b,L1363
5489                     ; 156         default:
5489                     ; 157              *perr = OS_ERR_EVENT_TYPE;
5491 f8157 c601          	ldab	#1
5492                     ; 158              return (0u);
5495 f8159 20db          	bra	LC001
5496                     ; 150         case OS_EVENT_TYPE_SEM:
5496                     ; 151         case OS_EVENT_TYPE_MUTEX:
5496                     ; 152         case OS_EVENT_TYPE_MBOX:
5496                     ; 153         case OS_EVENT_TYPE_Q:
5496                     ; 154              break;
5498 f815b               L1363:
5499                     ; 160     OS_ENTER_CRITICAL();
5501 f815b 164b4f        	jsr	_OS_CPU_SR_Save
5503 f815e 6b80          	stab	OFST-2,s
5504                     ; 161     *pname = pevent->OSEventName;
5506 f8160 ee82          	ldx	OFST+0,s
5507 f8162 ec0e          	ldd	14,x
5508 f8164 ee86          	ldx	OFST+4,s
5509 f8166 6c00          	std	0,x
5510                     ; 162     len    = OS_StrLen(*pname);
5512 f8168 1649af        	jsr	_OS_StrLen
5514 f816b 6b81          	stab	OFST-1,s
5515                     ; 163     OS_EXIT_CRITICAL();
5517 f816d e680          	ldab	OFST-2,s
5518 f816f 87            	clra	
5519 f8170 164b54        	jsr	_OS_CPU_SR_Restore
5521                     ; 164     *perr  = OS_ERR_NONE;
5523 f8173 69f30008      	clr	[OFST+6,s]
5524                     ; 165     return (len);
5526 f8177 e681          	ldab	OFST-1,s
5528 f8179 20c0          	bra	L6
5594                     ; 197 _NEAR void  OSEventNameSet (OS_EVENT  *pevent,
5594                     ; 198                            INT8U     *pname,
5594                     ; 199                            INT8U     *perr)
5594                     ; 200 {
5595                     	switch	.text
5596 f817b               _OSEventNameSet:
5598 f817b 3b            	pshd	
5599 f817c 37            	pshb	
5600       00000001      OFST:	set	1
5603                     ; 202     OS_CPU_SR  cpu_sr = 0u;
5605                     ; 215     if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
5607 f817d 046404        	tbne	d,L1763
5608                     ; 216         *perr = OS_ERR_PEVENT_NULL;
5610 f8180 c604          	ldab	#4
5611                     ; 217         return;
5613 f8182 2006          	bra	LC002
5614 f8184               L1763:
5615                     ; 219     if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
5617 f8184 ec85          	ldd	OFST+4,s
5618 f8186 2609          	bne	L3763
5619                     ; 220         *perr = OS_ERR_PNAME_NULL;
5621 f8188 c60c          	ldab	#12
5622 f818a               LC002:
5623 f818a 6bf30007      	stab	[OFST+6,s]
5624                     ; 221         return;
5625 f818e               L21:
5628 f818e 1b83          	leas	3,s
5629 f8190 3d            	rts	
5630 f8191               L3763:
5631                     ; 224     if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
5633 f8191 f6163c        	ldab	_OSIntNesting
5634 f8194 2704          	beq	L5763
5635                     ; 225         *perr = OS_ERR_NAME_SET_ISR;
5637 f8196 c612          	ldab	#18
5638                     ; 226         return;
5640 f8198 20f0          	bra	LC002
5641 f819a               L5763:
5642                     ; 228     switch (pevent->OSEventType) {
5644 f819a e6f30001      	ldab	[OFST+0,s]
5646 f819e 04010d        	dbeq	b,L1073
5647 f81a1 04010a        	dbeq	b,L1073
5648 f81a4 040107        	dbeq	b,L1073
5649 f81a7 040104        	dbeq	b,L1073
5650                     ; 235         default:
5650                     ; 236              *perr = OS_ERR_EVENT_TYPE;
5652 f81aa c601          	ldab	#1
5653                     ; 237              return;
5655 f81ac 20dc          	bra	LC002
5656                     ; 229         case OS_EVENT_TYPE_SEM:
5656                     ; 230         case OS_EVENT_TYPE_MUTEX:
5656                     ; 231         case OS_EVENT_TYPE_MBOX:
5656                     ; 232         case OS_EVENT_TYPE_Q:
5656                     ; 233              break;
5658 f81ae               L1073:
5659                     ; 239     OS_ENTER_CRITICAL();
5661 f81ae 164b4f        	jsr	_OS_CPU_SR_Save
5663 f81b1 6b80          	stab	OFST-1,s
5664                     ; 240     pevent->OSEventName = pname;
5666 f81b3 ed81          	ldy	OFST+0,s
5667 f81b5 1802854e      	movw	OFST+4,s,14,y
5668                     ; 241     OS_EXIT_CRITICAL();
5670 f81b9 87            	clra	
5671 f81ba 164b54        	jsr	_OS_CPU_SR_Restore
5673                     ; 243     *perr = OS_ERR_NONE;
5676 f81bd 69f30007      	clr	[OFST+6,s]
5677                     ; 244 }
5679 f81c1 20cb          	bra	L21
5907                     ; 320 _NEAR INT16U  OSEventPendMulti (OS_EVENT  **pevents_pend,
5907                     ; 321                                OS_EVENT  **pevents_rdy,
5907                     ; 322                                void      **pmsgs_rdy,
5907                     ; 323                                INT32U      timeout,
5907                     ; 324                                INT8U      *perr)
5907                     ; 325 {
5908                     	switch	.text
5909 f81c3               _OSEventPendMulti:
5911 f81c3 3b            	pshd	
5912 f81c4 1b95          	leas	-11,s
5913       0000000b      OFST:	set	11
5916                     ; 335     OS_CPU_SR   cpu_sr = 0u;
5918                     ; 348     if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
5920 f81c6 046402        	tbne	d,L3704
5921                     ; 349        *perr =  OS_ERR_PEVENT_NULL;
5923                     ; 350         return (0u);
5926 f81c9 2006          	bra	LC003
5927 f81cb               L3704:
5928                     ; 352     if (*pevents_pend  == (OS_EVENT *)0) {              /* Validate 'pevents_pend'                     */
5930 f81cb ecf3000b      	ldd	[OFST+0,s]
5931 f81cf 260b          	bne	L5704
5932                     ; 353        *perr =  OS_ERR_PEVENT_NULL;
5934 f81d1               LC003:
5935 f81d1 c604          	ldab	#4
5936                     ; 354         return (0u);
5939 f81d3               L61:
5940 f81d3 6bf30017      	stab	[OFST+12,s]
5941 f81d7 87            	clra	
5942 f81d8 c7            	clrb	
5944 f81d9 1b8d          	leas	13,s
5945 f81db 3d            	rts	
5946 f81dc               L5704:
5947                     ; 356     if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
5949 f81dc ec8f          	ldd	OFST+4,s
5950                     ; 357        *perr =  OS_ERR_PEVENT_NULL;
5952                     ; 358         return (0u);
5955 f81de 27f1          	beq	LC003
5956                     ; 360     if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
5958 f81e0 ecf011        	ldd	OFST+6,s
5959                     ; 361        *perr =  OS_ERR_PEVENT_NULL;
5961                     ; 362         return (0u);
5964 f81e3 27ec          	beq	LC003
5965                     ; 366    *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
5967 f81e5 87            	clra	
5968 f81e6 c7            	clrb	
5969 f81e7 6cf3000f      	std	[OFST+4,s]
5970                     ; 368     pevents     =  pevents_pend;
5972 f81eb 18028b86      	movw	OFST+0,s,OFST-5,s
5973                     ; 369     pevent      = *pevents;
5975 f81ef ecf30006      	ldd	[OFST-5,s]
5977 f81f3 201b          	bra	L5014
5978 f81f5               L3014:
5979                     ; 371         switch (pevent->OSEventType) {                  /* Validate event block types                  */
5981 f81f5 e6f30000      	ldab	[OFST-11,s]
5983 f81f9 04010e        	dbeq	b,L3114
5984 f81fc 04010b        	dbeq	b,L3114
5985 f81ff 040108        	dbeq	b,L3114
5986 f8202 040101        	dbeq	b,L1173
5987 f8205 53            	decb	
5988 f8206               L1173:
5989                     ; 385             case OS_EVENT_TYPE_MUTEX:
5989                     ; 386             case OS_EVENT_TYPE_FLAG:
5989                     ; 387             default:
5989                     ; 388                 *perr = OS_ERR_EVENT_TYPE;
5991 f8206 c601          	ldab	#1
5992                     ; 389                  return (0u);
5995 f8208 20c9          	bra	L61
5996 f820a               L3114:
5997                     ; 391         pevents++;
5999 f820a ed86          	ldy	OFST-5,s
6000                     ; 392         pevent = *pevents;
6002 f820c ec61          	ldd	2,+y
6003 f820e 6d86          	sty	OFST-5,s
6004 f8210               L5014:
6005 f8210 6c80          	std	OFST-11,s
6006                     ; 370     while  (pevent != (OS_EVENT *)0) {
6008 f8212 26e1          	bne	L3014
6009                     ; 395     if (OSIntNesting  > 0u) {                           /* See if called from ISR ...                  */
6011 f8214 f6163c        	ldab	_OSIntNesting
6012 f8217 2704          	beq	L5114
6013                     ; 396        *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
6015 f8219 c602          	ldab	#2
6016                     ; 397         return (0u);
6019 f821b 2007          	bra	L02
6020 f821d               L5114:
6021                     ; 399     if (OSLockNesting > 0u) {                           /* See if called with scheduler locked ...     */
6023 f821d f6163b        	ldab	_OSLockNesting
6024 f8220 270b          	beq	L7114
6025                     ; 400        *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
6027 f8222 c60d          	ldab	#13
6028                     ; 401         return (0u);
6031 f8224               L02:
6032 f8224 6bf30017      	stab	[OFST+12,s]
6033 f8228 87            	clra	
6034 f8229 c7            	clrb	
6036 f822a 1b8d          	leas	13,s
6037 f822c 3d            	rts	
6038 f822d               L7114:
6039                     ; 404     events_rdy     =  OS_FALSE;
6041 f822d 87            	clra	
6042 f822e 6a88          	staa	OFST-3,s
6043                     ; 405     events_rdy_nbr =  0u;
6045 f8230 6c84          	std	OFST-7,s
6046                     ; 406     events_stat    =  OS_STAT_RDY;
6048 f8232 6989          	clr	OFST-2,s
6049                     ; 407     pevents        =  pevents_pend;
6051 f8234 ed8b          	ldy	OFST+0,s
6052 f8236 6d86          	sty	OFST-5,s
6053                     ; 408     pevent         = *pevents;
6055 f8238 18024080      	movw	0,y,OFST-11,s
6056                     ; 409     OS_ENTER_CRITICAL();
6058 f823c 164b4f        	jsr	_OS_CPU_SR_Save
6060 f823f 6b8a          	stab	OFST-1,s
6062 f8241 ec80          	ldd	OFST-11,s
6063 f8243 06430e        	bra	L3214
6064 f8246               L1214:
6065                     ; 411         switch (pevent->OSEventType) {
6067 f8246 b746          	tfr	d,y
6068 f8248 e640          	ldab	0,y
6070 f824a 04013d        	dbeq	b,L5173
6071 f824d 040164        	dbeq	b,L7173
6072 f8250 04010d        	dbeq	b,L3173
6073 f8253 53            	decb	
6074 f8254 1827009b      	beq	L1273
6075 f8258 53            	decb	
6076 f8259 18270096      	beq	L1273
6077 f825d 0642f3        	bra	L1273
6078 f8260               L3173:
6079                     ; 413             case OS_EVENT_TYPE_SEM:
6079                     ; 414                  if (pevent->OSEventCnt > 0u) {         /* If semaphore count > 0, resource available; */
6081 f8260 ee43          	ldx	3,y
6082 f8262 2721          	beq	L3314
6083                     ; 415                      pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
6085 f8264 09            	dex	
6086 f8265 6e43          	stx	3,y
6087                     ; 416                     *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
6089 f8267 ed8f          	ldy	OFST+4,s
6090 f8269 18028071      	movw	OFST-11,s,2,y+
6091 f826d 6d8f          	sty	OFST+4,s
6092                     ; 417                       events_rdy   =  OS_TRUE;
6094 f826f c601          	ldab	#1
6095 f8271 6b88          	stab	OFST-3,s
6096                     ; 418                     *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
6098 f8273 87            	clra	
6099 f8274 c7            	clrb	
6100 f8275 edf011        	ldy	OFST+6,s
6101 f8278 6c71          	std	2,y+
6102 f827a 6df011        	sty	OFST+6,s
6103                     ; 419                       events_rdy_nbr++;
6105 f827d ed84          	ldy	OFST-7,s
6106 f827f 02            	iny	
6107 f8280 6d84          	sty	OFST-7,s
6109 f8282 064306        	bra	L1314
6110 f8285               L3314:
6111                     ; 422                       events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
6113 f8285 0c8901        	bset	OFST-2,s,1
6114 f8288 207c          	bra	L1314
6115 f828a               L5173:
6116                     ; 428             case OS_EVENT_TYPE_MBOX:
6116                     ; 429                  if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
6118 f828a ec41          	ldd	1,y
6119 f828c 2721          	beq	L7314
6120                     ; 431                     *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
6122 f828e edf011        	ldy	OFST+6,s
6123 f8291 6c71          	std	2,y+
6124 f8293 6df011        	sty	OFST+6,s
6125                     ; 432                      pevent->OSEventPtr  = (void *)0;
6127 f8296 87            	clra	
6128 f8297 c7            	clrb	
6129 f8298 ed80          	ldy	OFST-11,s
6130 f829a 6c41          	std	1,y
6131                     ; 433                     *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
6133 f829c b764          	tfr	y,d
6134 f829e ed8f          	ldy	OFST+4,s
6135 f82a0 6c71          	std	2,y+
6136 f82a2 6d8f          	sty	OFST+4,s
6137                     ; 434                       events_rdy         =  OS_TRUE;
6139 f82a4 c601          	ldab	#1
6140 f82a6 6b88          	stab	OFST-3,s
6141                     ; 435                       events_rdy_nbr++;
6143 f82a8 ed84          	ldy	OFST-7,s
6144 f82aa 02            	iny	
6145 f82ab 6d84          	sty	OFST-7,s
6147 f82ad 2057          	bra	L1314
6148 f82af               L7314:
6149                     ; 438                       events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
6151 f82af 0c8902        	bset	OFST-2,s,2
6152 f82b2 2052          	bra	L1314
6153 f82b4               L7173:
6154                     ; 444             case OS_EVENT_TYPE_Q:
6154                     ; 445                  pq = (OS_Q *)pevent->OSEventPtr;
6156 f82b4 ed41          	ldy	1,y
6157 f82b6 6d82          	sty	OFST-9,s
6158                     ; 446                  if (pq->OSQEntries > 0u) {             /* If queue NOT empty;                     ... */
6160 f82b8 ec4c          	ldd	12,y
6161 f82ba 2732          	beq	L3414
6162                     ; 448                     *pmsgs_rdy++ = (void *)*pq->OSQOut++;
6164 f82bc ee48          	ldx	8,y
6165 f82be ec31          	ldd	2,x+
6166 f82c0 6e48          	stx	8,y
6167 f82c2 edf011        	ldy	OFST+6,s
6168 f82c5 6c71          	std	2,y+
6169 f82c7 6df011        	sty	OFST+6,s
6170                     ; 449                      if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
6172 f82ca ed82          	ldy	OFST-9,s
6173 f82cc ec48          	ldd	8,y
6174 f82ce ac44          	cpd	4,y
6175 f82d0 2604          	bne	L5414
6176                     ; 450                          pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
6178 f82d2 18024248      	movw	2,y,8,y
6179 f82d6               L5414:
6180                     ; 452                      pq->OSQEntries--;                  /* Update number of queue entries              */
6182 f82d6 ee4c          	ldx	12,y
6183 f82d8 09            	dex	
6184 f82d9 6e4c          	stx	12,y
6185                     ; 453                     *pevents_rdy++ = pevent;            /* ... and return available queue event        */
6187 f82db ed8f          	ldy	OFST+4,s
6188 f82dd 18028071      	movw	OFST-11,s,2,y+
6189 f82e1 6d8f          	sty	OFST+4,s
6190                     ; 454                       events_rdy   = OS_TRUE;
6192 f82e3 c601          	ldab	#1
6193 f82e5 6b88          	stab	OFST-3,s
6194                     ; 455                       events_rdy_nbr++;
6196 f82e7 ed84          	ldy	OFST-7,s
6197 f82e9 02            	iny	
6198 f82ea 6d84          	sty	OFST-7,s
6200 f82ec 2018          	bra	L1314
6201 f82ee               L3414:
6202                     ; 458                       events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
6204 f82ee 0c8904        	bset	OFST-2,s,4
6205 f82f1 2013          	bra	L1314
6206 f82f3               L1273:
6207                     ; 463             case OS_EVENT_TYPE_MUTEX:
6207                     ; 464             case OS_EVENT_TYPE_FLAG:
6207                     ; 465             default:
6207                     ; 466                  OS_EXIT_CRITICAL();
6209 f82f3 e68a          	ldab	OFST-1,s
6210 f82f5 87            	clra	
6211 f82f6 164b54        	jsr	_OS_CPU_SR_Restore
6213                     ; 467                 *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
6215 f82f9 87            	clra	
6216 f82fa c7            	clrb	
6217 f82fb 6cf3000f      	std	[OFST+4,s]
6218                     ; 468                 *perr        =  OS_ERR_EVENT_TYPE;
6220 f82ff 52            	incb	
6221 f8300 6bf30017      	stab	[OFST+12,s]
6222                     ; 469                  return (events_rdy_nbr);
6225 f8304 201f          	bra	L22
6226 f8306               L1314:
6227                     ; 471         pevents++;
6229 f8306 ed86          	ldy	OFST-5,s
6230                     ; 472         pevent = *pevents;
6232 f8308 ec61          	ldd	2,+y
6233 f830a 6d86          	sty	OFST-5,s
6234 f830c 6c80          	std	OFST-11,s
6235 f830e               L3214:
6236                     ; 410     while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
6238 f830e 1826ff34      	bne	L1214
6239                     ; 475     if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
6241 f8312 e688          	ldab	OFST-3,s
6242 f8314 042113        	dbne	b,L1514
6243                     ; 476        *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
6245 f8317 87            	clra	
6246 f8318 6cf3000f      	std	[OFST+4,s]
6247                     ; 477         OS_EXIT_CRITICAL();
6249 f831c e68a          	ldab	OFST-1,s
6250 f831e 164b54        	jsr	_OS_CPU_SR_Restore
6252                     ; 478        *perr        =  OS_ERR_NONE;
6254 f8321 69f30017      	clr	[OFST+12,s]
6255                     ; 479         return (events_rdy_nbr);
6258 f8325               L22:
6259 f8325 ec84          	ldd	OFST-7,s
6261 f8327 1b8d          	leas	13,s
6262 f8329 3d            	rts	
6263 f832a               L1514:
6264                     ; 483     OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
6264                     ; 484                                OS_STAT_MULTI;           /* ... pend on multiple events                 */
6266 f832a fd1588        	ldy	_OSTCBCur
6267 f832d e689          	ldab	OFST-2,s
6268 f832f ca80          	orab	#128
6269 f8331 eae822        	orab	34,y
6270 f8334 6be822        	stab	34,y
6271                     ; 485     OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
6273 f8337 69e823        	clr	35,y
6274                     ; 486     OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
6276 f833a ecf015        	ldd	OFST+10,s
6277 f833d 6ce820        	std	32,y
6278 f8340 ecf013        	ldd	OFST+8,s
6279 f8343 6ce81e        	std	30,y
6280                     ; 487     OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
6282 f8346 ec8b          	ldd	OFST+0,s
6283 f8348 1646d4        	jsr	_OS_EventTaskWaitMulti
6285                     ; 489     OS_EXIT_CRITICAL();
6287 f834b e68a          	ldab	OFST-1,s
6288 f834d 87            	clra	
6289 f834e 164b54        	jsr	_OS_CPU_SR_Restore
6291                     ; 490     OS_Sched();                                         /* Find next highest priority task ready       */
6293 f8351 164933        	jsr	_OS_Sched
6295                     ; 491     OS_ENTER_CRITICAL();
6297 f8354 164b4f        	jsr	_OS_CPU_SR_Save
6299 f8357 6b8a          	stab	OFST-1,s
6300                     ; 493     switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
6302 f8359 fd1588        	ldy	_OSTCBCur
6303 f835c e6e823        	ldab	35,y
6305 f835f 2706          	beq	L3273
6306 f8361 04011e        	dbeq	b,L5273
6307 f8364 04211b        	dbne	b,L5273
6308 f8367               L3273:
6309                     ; 494         case OS_STAT_PEND_OK:
6309                     ; 495         case OS_STAT_PEND_ABORT:
6309                     ; 496              pevent = OSTCBCur->OSTCBEventMultiRdy;
6311 f8367 ece816        	ldd	22,y
6312 f836a 6c80          	std	OFST-11,s
6313                     ; 497              if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
6315 f836c 270f          	beq	L7514
6316                     ; 498                 *pevents_rdy++   =  pevent;             /* ... return available event ...              */
6318 f836e ed8f          	ldy	OFST+4,s
6319 f8370 6c71          	std	2,y+
6320 f8372 6d8f          	sty	OFST+4,s
6321                     ; 499                 *pevents_rdy     = (OS_EVENT *)0;       /* ... & NULL terminate return event array     */
6323 f8374 87            	clra	
6324 f8375 c7            	clrb	
6325 f8376 6c40          	std	0,y
6326                     ; 500                   events_rdy_nbr =  1;
6328 f8378 52            	incb	
6329 f8379 6c84          	std	OFST-7,s
6331 f837b 200f          	bra	L5514
6332 f837d               L7514:
6333                     ; 503                  OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
6335 f837d c601          	ldab	#1
6336 f837f 6be823        	stab	35,y
6337                     ; 504                  OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
6340 f8382               L5273:
6341                     ; 508         case OS_STAT_PEND_TO:                           /* If events timed out, ...                    */
6341                     ; 509         default:                                        /* ... remove task from events' wait lists     */
6341                     ; 510              OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
6344 f8382 ec8b          	ldd	OFST+0,s
6345 f8384 3b            	pshd	
6346 f8385 b764          	tfr	y,d
6347 f8387 164764        	jsr	_OS_EventTaskRemoveMulti
6348 f838a 1b82          	leas	2,s
6349                     ; 511              break;
6351 f838c               L5514:
6352                     ; 514     switch (OSTCBCur->OSTCBStatPend) {
6354 f838c fd1588        	ldy	_OSTCBCur
6355 f838f e6e823        	ldab	35,y
6357 f8392 2708          	beq	L7273
6358 f8394 040150        	dbeq	b,L1473
6359 f8397 040140        	dbeq	b,L7373
6360 f839a 204b          	bra	L1473
6361 f839c               L7273:
6362                     ; 515         case OS_STAT_PEND_OK:
6362                     ; 516              switch (pevent->OSEventType) {             /* Return event's message                      */
6364 f839c e6f30000      	ldab	[OFST-11,s]
6366 f83a0 040111        	dbeq	b,L3373
6367 f83a3 04010e        	dbeq	b,L3373
6368 f83a6 040108        	dbeq	b,L1373
6369 f83a9 04010d        	dbeq	b,L5373
6370 f83ac 04010a        	dbeq	b,L5373
6371 f83af 2008          	bra	L5373
6372 f83b1               L1373:
6373                     ; 518                  case OS_EVENT_TYPE_SEM:
6373                     ; 519                      *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
6375 f83b1 87            	clra	
6376                     ; 520                       break;
6378 f83b2 2018          	bra	L1714
6379 f83b4               L3373:
6380                     ; 525                  case OS_EVENT_TYPE_MBOX:
6380                     ; 526                  case OS_EVENT_TYPE_Q:
6380                     ; 527                      *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
6382 f83b4 ece818        	ldd	24,y
6383                     ; 528                       break;
6385 f83b7 2013          	bra	L1714
6386 f83b9               L5373:
6387                     ; 531                  case OS_EVENT_TYPE_MUTEX:
6387                     ; 532                  case OS_EVENT_TYPE_FLAG:
6387                     ; 533                  default:
6387                     ; 534                       OS_EXIT_CRITICAL();
6389 f83b9 e68a          	ldab	OFST-1,s
6390 f83bb 87            	clra	
6391 f83bc 164b54        	jsr	_OS_CPU_SR_Restore
6393                     ; 535                      *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
6395 f83bf 87            	clra	
6396 f83c0 c7            	clrb	
6397 f83c1 6cf3000f      	std	[OFST+4,s]
6398                     ; 536                      *perr        =  OS_ERR_EVENT_TYPE;
6400 f83c5 52            	incb	
6401 f83c6 6bf30017      	stab	[OFST+12,s]
6402                     ; 537                       return (events_rdy_nbr);
6405 f83ca 2044          	bra	L42
6406 f83cc               L1714:
6407 f83cc edf011        	ldy	OFST+6,s
6408 f83cf 6c71          	std	2,y+
6409 f83d1 6df011        	sty	OFST+6,s
6410                     ; 539             *perr = OS_ERR_NONE;
6412 f83d4 69f30017      	clr	[OFST+12,s]
6413                     ; 540              break;
6415 f83d8 201d          	bra	L5614
6416 f83da               L7373:
6417                     ; 542         case OS_STAT_PEND_ABORT:
6417                     ; 543             *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
6419 f83da 87            	clra	
6420 f83db edf011        	ldy	OFST+6,s
6421 f83de 6c71          	std	2,y+
6422 f83e0 6df011        	sty	OFST+6,s
6423                     ; 544             *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
6425 f83e3 c60e          	ldab	#14
6426                     ; 545              break;
6428 f83e5 200c          	bra	LC005
6429 f83e7               L1473:
6430                     ; 547         case OS_STAT_PEND_TO:
6430                     ; 548         default:
6430                     ; 549             *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
6432 f83e7 87            	clra	
6433 f83e8 c7            	clrb	
6434 f83e9 edf011        	ldy	OFST+6,s
6435 f83ec 6c71          	std	2,y+
6436 f83ee 6df011        	sty	OFST+6,s
6437                     ; 550             *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
6439 f83f1 c60a          	ldab	#10
6440 f83f3               LC005:
6441 f83f3 6bf30017      	stab	[OFST+12,s]
6442                     ; 551              break;
6444 f83f7               L5614:
6445                     ; 554     OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
6447 f83f7 fd1588        	ldy	_OSTCBCur
6448 f83fa c7            	clrb	
6449 f83fb 6be822        	stab	34,y
6450                     ; 555     OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
6452 f83fe 87            	clra	
6453 f83ff 6ae823        	staa	35,y
6454                     ; 556     OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;      /* Clear event pointers                        */
6456 f8402 6ce814        	std	20,y
6457                     ; 557     OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
6459 f8405 6ce816        	std	22,y
6460                     ; 560     OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
6462 f8408 6ce818        	std	24,y
6463                     ; 562     OS_EXIT_CRITICAL();
6465 f840b e68a          	ldab	OFST-1,s
6466 f840d 164b54        	jsr	_OS_CPU_SR_Restore
6468                     ; 564     return (events_rdy_nbr);
6471 f8410               L42:
6472 f8410 ec84          	ldd	OFST-7,s
6474 f8412 1b8d          	leas	13,s
6475 f8414 3d            	rts	
6509                     ; 582 _NEAR void  OSInit (void)
6509                     ; 583 {
6510                     	switch	.text
6511 f8415               _OSInit:
6515                     ; 590     OSInitHookBegin();                                           /* Call port specific initialization code   */
6517 f8415 164bb9        	jsr	_OSInitHookBegin
6519                     ; 592     OS_InitMisc();                                               /* Initialize miscellaneous variables       */
6521 f8418 164823        	jsr	L3153_OS_InitMisc
6523                     ; 594     OS_InitRdyList();                                            /* Initialize the Ready List                */
6525 f841b 164844        	jsr	L5153_OS_InitRdyList
6527                     ; 596     OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
6529 f841e 1648a2        	jsr	L1253_OS_InitTCBList
6531                     ; 598     OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
6533 f8421 1647c4        	jsr	L1153_OS_InitEventList
6535                     ; 601     OS_FlagInit();                                               /* Initialize the event flag structures     */
6537 f8424 1651da        	jsr	_OS_FlagInit
6539                     ; 605     OS_MemInit();                                                /* Initialize the memory manager            */
6541 f8427 1658af        	jsr	_OS_MemInit
6543                     ; 609     OS_QInit();                                                  /* Initialize the message queue structures  */
6545 f842a 16640d        	jsr	_OS_QInit
6547                     ; 621     OS_InitTaskIdle();                                           /* Create the Idle Task                     */
6549 f842d 16486a        	jsr	L7153_OS_InitTaskIdle
6551                     ; 627     OSTmr_Init();                                                /* Initialize the Timer Manager             */
6553 f8430 167381        	jsr	_OSTmr_Init
6555                     ; 630     OSInitHookEnd();                                             /* Call port specific init. code            */
6557 f8433 164bbf        	jsr	_OSInitHookEnd
6559                     ; 633     OSDebugInit();
6561 f8436 164c29        	jsr	_OSDebugInit
6563                     ; 635 }
6566 f8439 3d            	rts	
6590                     ; 663 _NEAR void  OSIntEnter (void)
6590                     ; 664 {
6591                     	switch	.text
6592 f843a               _OSIntEnter:
6596                     ; 665     if (OSRunning == OS_TRUE) {
6598 f843a f6162f        	ldab	_OSRunning
6599 f843d 04210a        	dbne	b,L3124
6600                     ; 666         if (OSIntNesting < 255u) {
6602 f8440 f6163c        	ldab	_OSIntNesting
6603 f8443 c1ff          	cmpb	#255
6604 f8445 2403          	bhs	L3124
6605                     ; 667             OSIntNesting++;                      /* Increment ISR nesting level                        */
6607 f8447 72163c        	inc	_OSIntNesting
6608 f844a               L3124:
6609                     ; 671 }
6612 f844a 3d            	rts	
6614                     	xref	_OSIntCtxSw
6656                     ; 693 _NEAR void  OSIntExit (void)
6656                     ; 694 {
6657                     	switch	.text
6658 f844b               _OSIntExit:
6660 f844b 37            	pshb	
6661       00000001      OFST:	set	1
6664                     ; 696     OS_CPU_SR  cpu_sr = 0u;
6666                     ; 701     if (OSRunning == OS_TRUE) {
6668 f844c f6162f        	ldab	_OSRunning
6669 f844f 04215f        	dbne	b,L3324
6670                     ; 702         OS_ENTER_CRITICAL();
6672 f8452 164b4f        	jsr	_OS_CPU_SR_Save
6674 f8455 6b80          	stab	OFST-1,s
6675                     ; 703         if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
6677 f8457 f7163c        	tst	_OSIntNesting
6678 f845a 2703          	beq	L5324
6679                     ; 704             OSIntNesting--;
6681 f845c 73163c        	dec	_OSIntNesting
6682 f845f               L5324:
6683                     ; 706         if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
6685 f845f f6163c        	ldab	_OSIntNesting
6686 f8462 2647          	bne	L1524
6687                     ; 707             if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
6689 f8464 f6163b        	ldab	_OSLockNesting
6690 f8467 2642          	bne	L1524
6691                     ; 708                 OS_SchedNew();
6693 f8469 16498b        	jsr	L3253_OS_SchedNew
6695                     ; 709                 OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
6697 f846c f61639        	ldab	_OSPrioHighRdy
6698 f846f 87            	clra	
6699 f8470 59            	lsld	
6700 f8471 b746          	tfr	d,y
6701 f8473 edea1502      	ldy	_OSTCBPrioTbl,y
6702 f8477 7d1584        	sty	_OSTCBHighRdy
6703                     ; 710                 if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
6705 f847a f61639        	ldab	_OSPrioHighRdy
6706 f847d f1163a        	cmpb	_OSPrioCur
6707 f8480 2729          	beq	L1524
6708                     ; 712                     OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
6710 f8482 ece82c        	ldd	44,y
6711 f8485 c30001        	addd	#1
6712 f8488 6ce82c        	std	44,y
6713 f848b 2408          	bcc	L43
6714 f848d 62e82b        	inc	43,y
6715 f8490 2603          	bne	L43
6716 f8492 62e82a        	inc	42,y
6717 f8495               L43:
6718                     ; 714                     OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
6720 f8495 fc1706        	ldd	_OSCtxSwCtr+2
6721 f8498 c30001        	addd	#1
6722 f849b 7c1706        	std	_OSCtxSwCtr+2
6723 f849e 2408          	bcc	L63
6724 f84a0 721705        	inc	_OSCtxSwCtr+1
6725 f84a3 2603          	bne	L63
6726 f84a5 721704        	inc	_OSCtxSwCtr
6727 f84a8               L63:
6728                     ; 723                     OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
6731 f84a8 164b85        	jsr	_OSIntCtxSw
6734 f84ab               L1524:
6735                     ; 734         OS_EXIT_CRITICAL();
6737 f84ab e680          	ldab	OFST-1,s
6738 f84ad 87            	clra	
6739 f84ae 164b54        	jsr	_OS_CPU_SR_Restore
6741 f84b1               L3324:
6742                     ; 736 }
6745 f84b1 1b81          	leas	1,s
6746 f84b3 3d            	rts	
6782                     ; 782 _NEAR void  OSSchedLock (void)
6782                     ; 783 {
6783                     	switch	.text
6784 f84b4               _OSSchedLock:
6786 f84b4 37            	pshb	
6787       00000001      OFST:	set	1
6790                     ; 785     OS_CPU_SR  cpu_sr = 0u;
6792                     ; 790     if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
6794 f84b5 f6162f        	ldab	_OSRunning
6795 f84b8 04211a        	dbne	b,L7624
6796                     ; 791         OS_ENTER_CRITICAL();
6798 f84bb 164b4f        	jsr	_OS_CPU_SR_Save
6800 f84be 6b80          	stab	OFST-1,s
6801                     ; 792         if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
6803 f84c0 f6163c        	ldab	_OSIntNesting
6804 f84c3 260a          	bne	L1724
6805                     ; 793             if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
6807 f84c5 f6163b        	ldab	_OSLockNesting
6808 f84c8 c1ff          	cmpb	#255
6809 f84ca 2403          	bhs	L1724
6810                     ; 794                 OSLockNesting++;                 /* Increment lock nesting level                       */
6812 f84cc 72163b        	inc	_OSLockNesting
6813 f84cf               L1724:
6814                     ; 797         OS_EXIT_CRITICAL();
6816 f84cf e680          	ldab	OFST-1,s
6817 f84d1 87            	clra	
6818 f84d2 164b54        	jsr	_OS_CPU_SR_Restore
6820 f84d5               L7624:
6821                     ; 799 }
6824 f84d5 1b81          	leas	1,s
6825 f84d7 3d            	rts	
6862                     ; 819 _NEAR void  OSSchedUnlock (void)
6862                     ; 820 {
6863                     	switch	.text
6864 f84d8               _OSSchedUnlock:
6866 f84d8 37            	pshb	
6867       00000001      OFST:	set	1
6870                     ; 822     OS_CPU_SR  cpu_sr = 0u;
6872                     ; 827     if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
6874 f84d9 f6162f        	ldab	_OSRunning
6875 f84dc 042121        	dbne	b,L1134
6876                     ; 828         OS_ENTER_CRITICAL();
6878 f84df 164b4f        	jsr	_OS_CPU_SR_Save
6880 f84e2 6b80          	stab	OFST-1,s
6881                     ; 829         if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
6883 f84e4 f7163c        	tst	_OSIntNesting
6884 f84e7 2613          	bne	L7134
6885                     ; 830             if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
6887 f84e9 f7163b        	tst	_OSLockNesting
6888 f84ec 270e          	beq	L7134
6889                     ; 831                 OSLockNesting--;                           /* Decrement lock nesting level             */
6891 f84ee 73163b        	dec	_OSLockNesting
6892                     ; 832                 if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
6894 f84f1 2609          	bne	L7134
6895                     ; 833                     OS_EXIT_CRITICAL();
6897 f84f3 87            	clra	
6898 f84f4 164b54        	jsr	_OS_CPU_SR_Restore
6900                     ; 834                     OS_Sched();                            /* See if a HPT is ready                    */
6902 f84f7 164933        	jsr	_OS_Sched
6905 f84fa 2004          	bra	L1134
6906 f84fc               L7134:
6907                     ; 836                     OS_EXIT_CRITICAL();
6910                     ; 839                 OS_EXIT_CRITICAL();
6913                     ; 842             OS_EXIT_CRITICAL();
6915 f84fc 87            	clra	
6916 f84fd 164b54        	jsr	_OS_CPU_SR_Restore
6918 f8500               L1134:
6919                     ; 845 }
6922 f8500 1b81          	leas	1,s
6923 f8502 3d            	rts	
6925                     	xref	_OSStartHighRdy
6954                     ; 869 _NEAR void  OSStart (void)
6954                     ; 870 {
6955                     	switch	.text
6956 f8503               _OSStart:
6960                     ; 871     if (OSRunning == OS_FALSE) {
6962 f8503 f6162f        	ldab	_OSRunning
6963 f8506 261a          	bne	L7334
6964                     ; 872         OS_SchedNew();                               /* Find highest priority's task priority number   */
6966 f8508 16498b        	jsr	L3253_OS_SchedNew
6968                     ; 873         OSPrioCur     = OSPrioHighRdy;
6970 f850b f61639        	ldab	_OSPrioHighRdy
6971 f850e 7b163a        	stab	_OSPrioCur
6972                     ; 874         OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
6974 f8511 87            	clra	
6975 f8512 59            	lsld	
6976 f8513 b746          	tfr	d,y
6977 f8515 ecea1502      	ldd	_OSTCBPrioTbl,y
6978 f8519 7c1584        	std	_OSTCBHighRdy
6979                     ; 875         OSTCBCur      = OSTCBHighRdy;
6981 f851c 7c1588        	std	_OSTCBCur
6982                     ; 876         OSStartHighRdy();                            /* Execute target specific code to start task     */
6984 f851f 164b57        	jsr	_OSStartHighRdy
6986 f8522               L7334:
6987                     ; 878 }
6990 f8522 3d            	rts	
7369                     ; 937 _NEAR void  OSTimeTick (void)
7369                     ; 938 {
7370                     	switch	.text
7371 f8523               _OSTimeTick:
7373 f8523 1b9d          	leas	-3,s
7374       00000003      OFST:	set	3
7377                     ; 944     OS_CPU_SR  cpu_sr = 0u;
7379                     ; 950     OSTimeTickHook();                                      /* Call user definable hook                     */
7381 f8525 164c0f        	jsr	_OSTimeTickHook
7383                     ; 953     OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
7385 f8528 164b4f        	jsr	_OS_CPU_SR_Save
7387 f852b 6b82          	stab	OFST-1,s
7388                     ; 954     OSTime++;
7390 f852d fc13af        	ldd	_OSTime+2
7391 f8530 c30001        	addd	#1
7392 f8533 7c13af        	std	_OSTime+2
7393 f8536 2408          	bcc	L05
7394 f8538 7213ae        	inc	_OSTime+1
7395 f853b 2603          	bne	L05
7396 f853d 7213ad        	inc	_OSTime
7397 f8540               L05:
7398                     ; 956     OS_EXIT_CRITICAL();
7401 f8540 e682          	ldab	OFST-1,s
7402 f8542 87            	clra	
7403 f8543 164b54        	jsr	_OS_CPU_SR_Restore
7405                     ; 958     if (OSRunning == OS_TRUE) {
7407 f8546 f6162f        	ldab	_OSRunning
7408 f8549 53            	decb	
7409 f854a 182600a6      	bne	L7654
7410                     ; 960         switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
7412 f854e f61447        	ldab	_OSTickStepState
7414 f8551 270f          	beq	L1434
7415 f8553 040112        	dbeq	b,L3434
7416 f8556 040113        	dbeq	b,L5434
7417                     ; 974             default:                                       /* Invalid case, correct situation              */
7417                     ; 975                  step            = OS_TRUE;
7419 f8559 c601          	ldab	#1
7420 f855b 6b82          	stab	OFST-1,s
7421                     ; 976                  OSTickStepState = OS_TICK_STEP_DIS;
7423 f855d 791447        	clr	_OSTickStepState
7424                     ; 977                  break;
7426 f8560 2011          	bra	L3754
7427 f8562               L1434:
7428                     ; 961             case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
7428                     ; 962                  step = OS_TRUE;
7430 f8562 c601          	ldab	#1
7431 f8564 6b82          	stab	OFST-1,s
7432                     ; 963                  break;
7434 f8566 200b          	bra	L3754
7435 f8568               L3434:
7436                     ; 965             case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
7436                     ; 966                  step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
7438 f8568 6982          	clr	OFST-1,s
7439                     ; 967                  break;
7441 f856a 2007          	bra	L3754
7442 f856c               L5434:
7443                     ; 969             case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
7443                     ; 970                  step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
7445 f856c c601          	ldab	#1
7446 f856e 6b82          	stab	OFST-1,s
7447                     ; 971                  OSTickStepState = OS_TICK_STEP_WAIT;
7449 f8570 7b1447        	stab	_OSTickStepState
7450                     ; 972                  break;
7452 f8573               L3754:
7453                     ; 979         if (step == OS_FALSE) {                            /* Return if waiting for step command           */
7455 f8573 e682          	ldab	OFST-1,s
7456 f8575 2603          	bne	L5754
7457                     ; 980             return;
7460 f8577 1b83          	leas	3,s
7461 f8579 3d            	rts	
7462 f857a               L5754:
7463                     ; 983         ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
7465 f857a 1801801582    	movw	_OSTCBList,OFST-3,s
7467 f857f 206a          	bra	L3064
7468 f8581               L7754:
7469                     ; 985             OS_ENTER_CRITICAL();
7471 f8581 164b4f        	jsr	_OS_CPU_SR_Save
7473 f8584 6b82          	stab	OFST-1,s
7474                     ; 986             if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
7476 f8586 ed80          	ldy	OFST-3,s
7477 f8588 ece81e        	ldd	30,y
7478 f858b 2605          	bne	LC007
7479 f858d ece820        	ldd	32,y
7480 f8590 274f          	beq	L7064
7481 f8592               LC007:
7482                     ; 987                 ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
7484 f8592 ece820        	ldd	32,y
7485 f8595 830001        	subd	#1
7486 f8598 6ce820        	std	32,y
7487 f859b ece81e        	ldd	30,y
7488 f859e c200          	sbcb	#0
7489 f85a0 8200          	sbca	#0
7490 f85a2 6ce81e        	std	30,y
7491                     ; 988                 if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
7493 f85a5 263a          	bne	L7064
7494 f85a7 ece820        	ldd	32,y
7495 f85aa 2635          	bne	L7064
7496                     ; 990                     if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
7498 f85ac 0fe822370b    	brclr	34,y,55,L3164
7499                     ; 991                         ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
7501 f85b1 0de82237      	bclr	34,y,55
7502                     ; 992                         ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
7504 f85b5 c601          	ldab	#1
7505 f85b7 6be823        	stab	35,y
7507 f85ba 2003          	bra	L5164
7508 f85bc               L3164:
7509                     ; 994                         ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
7511 f85bc 69e823        	clr	35,y
7512 f85bf               L5164:
7513                     ; 997                     if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
7515 f85bf 0ee822081d    	brset	34,y,8,L7064
7516                     ; 998                         OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
7518 f85c4 e6e828        	ldab	40,y
7519 f85c7 fa1638        	orab	_OSRdyGrp
7520 f85ca 7b1638        	stab	_OSRdyGrp
7521                     ; 999                         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
7523 f85cd e6e826        	ldab	38,y
7524 f85d0 b796          	exg	b,y
7525 f85d2 ee80          	ldx	OFST-3,s
7526 f85d4 e6e027        	ldab	39,x
7527 f85d7 eaea1630      	orab	_OSRdyTbl,y
7528 f85db 6bea1630      	stab	_OSRdyTbl,y
7530 f85df b756          	tfr	x,y
7531 f85e1               L7064:
7532                     ; 1004             ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
7534 f85e1 18024e80      	movw	14,y,OFST-3,s
7535                     ; 1005             OS_EXIT_CRITICAL();
7537 f85e5 e682          	ldab	OFST-1,s
7538 f85e7 87            	clra	
7539 f85e8 164b54        	jsr	_OS_CPU_SR_Restore
7541 f85eb               L3064:
7542                     ; 984         while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
7544 f85eb ed80          	ldy	OFST-3,s
7545 f85ed e6e824        	ldab	36,y
7546 f85f0 c13f          	cmpb	#63
7547 f85f2 268d          	bne	L7754
7548 f85f4               L7654:
7549                     ; 1008 }
7552 f85f4 1b83          	leas	3,s
7553 f85f6 3d            	rts	
7575                     ; 1025 _NEAR INT16U  OSVersion (void)
7575                     ; 1026 {
7576                     	switch	.text
7577 f85f7               _OSVersion:
7581                     ; 1027     return (OS_VERSION);
7583 f85f7 cc7274        	ldd	#29300
7586 f85fa 3d            	rts	
7608                     ; 1044 _NEAR void  OS_Dummy (void)
7608                     ; 1045 {
7609                     	switch	.text
7610 f85fb               _OS_Dummy:
7614                     ; 1046 }
7617 f85fb 3d            	rts	
7716                     ; 1078 _NEAR INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
7716                     ; 1079                              void      *pmsg,
7716                     ; 1080                              INT8U      msk,
7716                     ; 1081                              INT8U      pend_stat)
7716                     ; 1082 {
7717                     	switch	.text
7718 f85fc               _OS_EventTaskRdy:
7720 f85fc 3b            	pshd	
7721 f85fd 1b9c          	leas	-4,s
7722       00000004      OFST:	set	4
7725                     ; 1093     y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
7727 f85ff b746          	tfr	d,y
7728 f8601 e645          	ldab	5,y
7729 f8603 87            	clra	
7730 f8604 b746          	tfr	d,y
7731 f8606 e6ea75af      	ldab	_OSUnMapTbl,y
7732 f860a 6b83          	stab	OFST-1,s
7733                     ; 1094     x    = OSUnMapTbl[pevent->OSEventTbl[y]];
7735 f860c ed84          	ldy	OFST+0,s
7736 f860e 19ed          	leay	b,y
7737 f8610 e646          	ldab	6,y
7738 f8612 b746          	tfr	d,y
7739 f8614 e6ea75af      	ldab	_OSUnMapTbl,y
7740 f8618 6b82          	stab	OFST-2,s
7741                     ; 1095     prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
7743 f861a e683          	ldab	OFST-1,s
7744 f861c 58            	lslb	
7745 f861d 58            	lslb	
7746 f861e 58            	lslb	
7747 f861f eb82          	addb	OFST-2,s
7748 f8621 6b82          	stab	OFST-2,s
7749                     ; 1111     ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
7751 f8623 59            	lsld	
7752 f8624 b746          	tfr	d,y
7753 f8626 edea1502      	ldy	_OSTCBPrioTbl,y
7754 f862a 6d80          	sty	OFST-4,s
7755                     ; 1112     ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
7757 f862c 87            	clra	
7758 f862d c7            	clrb	
7759 f862e 6ce820        	std	32,y
7760 f8631 6ce81e        	std	30,y
7761                     ; 1114     ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
7763 f8634 ec88          	ldd	OFST+4,s
7764 f8636 6ce818        	std	24,y
7765                     ; 1118     ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
7767 f8639 e68b          	ldab	OFST+7,s
7768 f863b 51            	comb	
7769 f863c e4e822        	andb	34,y
7770 f863f 6be822        	stab	34,y
7771                     ; 1119     ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
7773 f8642 e68d          	ldab	OFST+9,s
7774 f8644 6be823        	stab	35,y
7775                     ; 1121     if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
7777 f8647 0ee822081a    	brset	34,y,8,L5074
7778                     ; 1122         OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
7780 f864c e6e828        	ldab	40,y
7781 f864f fa1638        	orab	_OSRdyGrp
7782 f8652 7b1638        	stab	_OSRdyGrp
7783                     ; 1123         OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
7785 f8655 e683          	ldab	OFST-1,s
7786 f8657 b796          	exg	b,y
7787 f8659 ee80          	ldx	OFST-4,s
7788 f865b e6e027        	ldab	39,x
7789 f865e eaea1630      	orab	_OSRdyTbl,y
7790 f8662 6bea1630      	stab	_OSRdyTbl,y
7792 f8666               L5074:
7793                     ; 1127     OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
7795 f8666 ec84          	ldd	OFST+0,s
7796 f8668 3b            	pshd	
7797 f8669 ec82          	ldd	OFST-2,s
7798 f866b 164737        	jsr	_OS_EventTaskRemove
7800 f866e 1b82          	leas	2,s
7801                     ; 1129     if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
7803 f8670 ed80          	ldy	OFST-4,s
7804 f8672 ece814        	ldd	20,y
7805 f8675 2714          	beq	L7074
7806                     ; 1130         OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
7808 f8677 3b            	pshd	
7809 f8678 b764          	tfr	y,d
7810 f867a 164764        	jsr	_OS_EventTaskRemoveMulti
7812 f867d 1b82          	leas	2,s
7813                     ; 1131         ptcb->OSTCBEventMultiPtr  = (OS_EVENT **)0;     /* No longer pending on multi list             */
7815 f867f 87            	clra	
7816 f8680 c7            	clrb	
7817 f8681 ed80          	ldy	OFST-4,s
7818 f8683 6ce814        	std	20,y
7819                     ; 1132         ptcb->OSTCBEventMultiRdy  = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
7821 f8686 ec84          	ldd	OFST+0,s
7822 f8688 6ce816        	std	22,y
7823 f868b               L7074:
7824                     ; 1136     return (prio);
7826 f868b e682          	ldab	OFST-2,s
7829 f868d 1b86          	leas	6,s
7830 f868f 3d            	rts	
7876                     ; 1156 _NEAR void  OS_EventTaskWait (OS_EVENT *pevent)
7876                     ; 1157 {
7877                     	switch	.text
7878 f8690               _OS_EventTaskWait:
7880 f8690 3b            	pshd	
7881 f8691 37            	pshb	
7882       00000001      OFST:	set	1
7885                     ; 1161     OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
7887 f8692 fe1588        	ldx	_OSTCBCur
7888                     ; 1163     pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
7890 f8695 b746          	tfr	d,y
7891 f8697 6de012        	sty	18,x
7892 f869a e6e026        	ldab	38,x
7893 f869d 87            	clra	
7894 f869e 19ed          	leay	b,y
7895 f86a0 e6e027        	ldab	39,x
7896 f86a3 ea46          	orab	6,y
7897 f86a5 6b46          	stab	6,y
7898                     ; 1164     pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
7900 f86a7 ed81          	ldy	OFST+0,s
7901 f86a9 e6e028        	ldab	40,x
7902 f86ac ea45          	orab	5,y
7903 f86ae 6b45          	stab	5,y
7904                     ; 1166     y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
7906 f86b0 b756          	tfr	x,y
7907 f86b2 e6e826        	ldab	38,y
7908                     ; 1167     OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
7910 f86b5 b746          	tfr	d,y
7911 f86b7 e6e027        	ldab	39,x
7912 f86ba 51            	comb	
7913 f86bb e4ea1630      	andb	_OSRdyTbl,y
7914 f86bf 6bea1630      	stab	_OSRdyTbl,y
7915                     ; 1169     if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
7918 f86c3 260c          	bne	L3374
7919                     ; 1170         OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
7921 f86c5 b756          	tfr	x,y
7922 f86c7 e6e828        	ldab	40,y
7923 f86ca 51            	comb	
7924 f86cb f41638        	andb	_OSRdyGrp
7925 f86ce 7b1638        	stab	_OSRdyGrp
7926 f86d1               L3374:
7927                     ; 1172 }
7930 f86d1 1b83          	leas	3,s
7931 f86d3 3d            	rts	
8004                     ; 1192 _NEAR void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
8004                     ; 1193 {
8005                     	switch	.text
8006 f86d4               _OS_EventTaskWaitMulti:
8008 f86d4 3b            	pshd	
8009 f86d5 1b9b          	leas	-5,s
8010       00000005      OFST:	set	5
8013                     ; 1199     OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
8015 f86d7 fd1588        	ldy	_OSTCBCur
8016 f86da 6ce814        	std	20,y
8017                     ; 1200     OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
8019 f86dd 87            	clra	
8020 f86de c7            	clrb	
8021 f86df 6ce816        	std	22,y
8022                     ; 1202     pevents =  pevents_wait;
8024 f86e2 ee85          	ldx	OFST+0,s
8025 f86e4 6e82          	stx	OFST-3,s
8026                     ; 1203     pevent  = *pevents;
8028 f86e6 ec00          	ldd	0,x
8029 f86e8 6c80          	std	OFST-5,s
8031 f86ea b765          	tfr	y,x
8032 f86ec 201f          	bra	L7774
8033 f86ee               L3774:
8034                     ; 1205         pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
8036 f86ee b746          	tfr	d,y
8037 f86f0 e6e026        	ldab	38,x
8038 f86f3 19ed          	leay	b,y
8039 f86f5 e6e027        	ldab	39,x
8040 f86f8 ea46          	orab	6,y
8041 f86fa 6b46          	stab	6,y
8042                     ; 1206         pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
8044 f86fc ed80          	ldy	OFST-5,s
8045 f86fe e6e028        	ldab	40,x
8046 f8701 ea45          	orab	5,y
8047 f8703 6b45          	stab	5,y
8048                     ; 1207         pevents++;
8050 f8705 ed82          	ldy	OFST-3,s
8051                     ; 1208         pevent = *pevents;
8053 f8707 ec61          	ldd	2,+y
8054 f8709 6d82          	sty	OFST-3,s
8055 f870b 6c80          	std	OFST-5,s
8056 f870d               L7774:
8057                     ; 1204     while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
8059 f870d 26df          	bne	L3774
8060                     ; 1211     y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
8062 f870f fd1588        	ldy	_OSTCBCur
8063 f8712 e6e826        	ldab	38,y
8064                     ; 1212     OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
8066 f8715 b796          	exg	b,y
8067 f8717 fe1588        	ldx	_OSTCBCur
8068 f871a e6e027        	ldab	39,x
8069 f871d 51            	comb	
8070 f871e e4ea1630      	andb	_OSRdyTbl,y
8071 f8722 6bea1630      	stab	_OSRdyTbl,y
8072                     ; 1214     if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
8075 f8726 260c          	bne	L3005
8076                     ; 1215         OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
8078 f8728 b756          	tfr	x,y
8079 f872a e6e828        	ldab	40,y
8080 f872d 51            	comb	
8081 f872e f41638        	andb	_OSRdyGrp
8082 f8731 7b1638        	stab	_OSRdyGrp
8083 f8734               L3005:
8084                     ; 1217 }
8087 f8734 1b87          	leas	7,s
8088 f8736 3d            	rts	
8143                     ; 1237 _NEAR void  OS_EventTaskRemove (OS_TCB   *ptcb,
8143                     ; 1238                                OS_EVENT *pevent)
8143                     ; 1239 {
8144                     	switch	.text
8145 f8737               _OS_EventTaskRemove:
8147 f8737 3b            	pshd	
8148 f8738 37            	pshb	
8149       00000001      OFST:	set	1
8152                     ; 1243     y                       =  ptcb->OSTCBY;
8154 f8739 b746          	tfr	d,y
8155 f873b e6e826        	ldab	38,y
8156 f873e 6b80          	stab	OFST-1,s
8157                     ; 1244     pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
8159 f8740 ed85          	ldy	OFST+4,s
8160 f8742 19ed          	leay	b,y
8161 f8744 ee81          	ldx	OFST+0,s
8162 f8746 e6e027        	ldab	39,x
8163 f8749 51            	comb	
8164 f874a e446          	andb	6,y
8165 f874c 6b46          	stab	6,y
8166                     ; 1245     if (pevent->OSEventTbl[y] == 0u) {
8168 f874e 260a          	bne	L5305
8169                     ; 1246         pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
8171 f8750 ed85          	ldy	OFST+4,s
8172 f8752 e6e028        	ldab	40,x
8173 f8755 51            	comb	
8174 f8756 e445          	andb	5,y
8175 f8758 6b45          	stab	5,y
8176 f875a               L5305:
8177                     ; 1248     ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
8179 f875a 87            	clra	
8180 f875b c7            	clrb	
8181 f875c b756          	tfr	x,y
8182 f875e 6ce812        	std	18,y
8183                     ; 1249 }
8186 f8761 1b83          	leas	3,s
8187 f8763 3d            	rts	
8283                     ; 1269 _NEAR void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
8283                     ; 1270                                     OS_EVENT **pevents_multi)
8283                     ; 1271 {
8284                     	switch	.text
8285 f8764               _OS_EventTaskRemoveMulti:
8287 f8764 3b            	pshd	
8288 f8765 1b99          	leas	-7,s
8289       00000007      OFST:	set	7
8292                     ; 1279     y       =  ptcb->OSTCBY;
8294 f8767 b746          	tfr	d,y
8295 f8769 e6e826        	ldab	38,y
8296 f876c 6b84          	stab	OFST-3,s
8297                     ; 1280     bity    =  ptcb->OSTCBBitY;
8299 f876e ed87          	ldy	OFST+0,s
8300 f8770 e6e828        	ldab	40,y
8301 f8773 6b85          	stab	OFST-2,s
8302                     ; 1281     bitx    =  ptcb->OSTCBBitX;
8304 f8775 e6e827        	ldab	39,y
8305 f8778 6b86          	stab	OFST-1,s
8306                     ; 1282     pevents =  pevents_multi;
8308 f877a 18028b82      	movw	OFST+4,s,OFST-5,s
8309                     ; 1283     pevent  = *pevents;
8311 f877e ecf30002      	ldd	[OFST-5,s]
8313 f8782 201c          	bra	L3115
8314 f8784               L7015:
8315                     ; 1285         pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
8317 f8784 e684          	ldab	OFST-3,s
8318 f8786 19ed          	leay	b,y
8319 f8788 e686          	ldab	OFST-1,s
8320 f878a 51            	comb	
8321 f878b e446          	andb	6,y
8322 f878d 6b46          	stab	6,y
8323                     ; 1286         if (pevent->OSEventTbl[y] == 0u) {
8325 f878f 2609          	bne	L7115
8326                     ; 1287             pevent->OSEventGrp &= (OS_PRIO)~bity;
8328 f8791 ed80          	ldy	OFST-7,s
8329 f8793 e685          	ldab	OFST-2,s
8330 f8795 51            	comb	
8331 f8796 e445          	andb	5,y
8332 f8798 6b45          	stab	5,y
8333 f879a               L7115:
8334                     ; 1289         pevents++;
8336 f879a ed82          	ldy	OFST-5,s
8337                     ; 1290         pevent = *pevents;
8339 f879c ec61          	ldd	2,+y
8340 f879e 6d82          	sty	OFST-5,s
8341 f87a0               L3115:
8342 f87a0 6c80          	std	OFST-7,s
8343                     ; 1284     while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
8345 f87a2 ed80          	ldy	OFST-7,s
8346 f87a4 26de          	bne	L7015
8347                     ; 1292 }
8350 f87a6 1b89          	leas	9,s
8351 f87a8 3d            	rts	
8395                     ; 1310 _NEAR void  OS_EventWaitListInit (OS_EVENT *pevent)
8395                     ; 1311 {
8396                     	switch	.text
8397 f87a9               _OS_EventWaitListInit:
8399 f87a9 3b            	pshd	
8400 f87aa 37            	pshb	
8401       00000001      OFST:	set	1
8404                     ; 1315     pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
8406 f87ab b746          	tfr	d,y
8407 f87ad c7            	clrb	
8408 f87ae 6b45          	stab	5,y
8409                     ; 1316     for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
8411 f87b0 6b80          	stab	OFST-1,s
8412 f87b2               L3415:
8413                     ; 1317         pevent->OSEventTbl[i] = 0u;
8415 f87b2 ed81          	ldy	OFST+0,s
8416 f87b4 87            	clra	
8417 f87b5 19ed          	leay	b,y
8418 f87b7 6a46          	staa	6,y
8419                     ; 1316     for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
8421 f87b9 6280          	inc	OFST-1,s
8424 f87bb e680          	ldab	OFST-1,s
8425 f87bd c108          	cmpb	#8
8426 f87bf 25f1          	blo	L3415
8427                     ; 1319 }
8430 f87c1 1b83          	leas	3,s
8431 f87c3 3d            	rts	
8496                     ; 1336 static  void  OS_InitEventList (void)
8496                     ; 1337 {
8497                     	switch	.text
8498 f87c4               L1153_OS_InitEventList:
8500 f87c4 1b9a          	leas	-6,s
8501       00000006      OFST:	set	6
8504                     ; 1346     OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
8506 f87c6 cc00a0        	ldd	#160
8507 f87c9 3b            	pshd	
8508 f87ca cc1662        	ldd	#_OSEventTbl
8509 f87cd 164907        	jsr	_OS_MemClr
8511 f87d0 1b82          	leas	2,s
8512                     ; 1347     for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
8514 f87d2 87            	clra	
8515 f87d3 c7            	clrb	
8516 f87d4 b746          	tfr	d,y
8517 f87d6 6d82          	sty	OFST-4,s
8518 f87d8               L3025:
8519                     ; 1348         ix_next = ix + 1u;
8521 f87d8 02            	iny	
8522                     ; 1349         pevent1 = &OSEventTbl[ix];
8524 f87d9 59            	lsld	
8525 f87da 59            	lsld	
8526 f87db 59            	lsld	
8527 f87dc 59            	lsld	
8528 f87dd c31662        	addd	#_OSEventTbl
8529 f87e0 6c80          	std	OFST-6,s
8530                     ; 1350         pevent2 = &OSEventTbl[ix_next];
8532 f87e2 b764          	tfr	y,d
8533 f87e4 59            	lsld	
8534 f87e5 59            	lsld	
8535 f87e6 59            	lsld	
8536 f87e7 59            	lsld	
8537 f87e8 c31662        	addd	#_OSEventTbl
8538 f87eb 6c84          	std	OFST-2,s
8539                     ; 1351         pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
8541 f87ed ed80          	ldy	OFST-6,s
8542 f87ef 6940          	clr	0,y
8543                     ; 1352         pevent1->OSEventPtr     = pevent2;
8545 f87f1 6c41          	std	1,y
8546                     ; 1354         pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
8548 f87f3 cc76bd        	ldd	#L1125
8549 f87f6 6c4e          	std	14,y
8550                     ; 1347     for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
8552 f87f8 ed82          	ldy	OFST-4,s
8553 f87fa 02            	iny	
8556 f87fb b764          	tfr	y,d
8557 f87fd 6c82          	std	OFST-4,s
8558 f87ff 8c0009        	cpd	#9
8559 f8802 25d4          	blo	L3025
8560                     ; 1357     pevent1                         = &OSEventTbl[ix];
8562 f8804 59            	lsld	
8563 f8805 59            	lsld	
8564 f8806 59            	lsld	
8565 f8807 59            	lsld	
8566 f8808 c31662        	addd	#_OSEventTbl
8567 f880b 6c80          	std	OFST-6,s
8568                     ; 1358     pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
8570 f880d 87            	clra	
8571 f880e ed80          	ldy	OFST-6,s
8572 f8810 6a40          	staa	0,y
8573                     ; 1359     pevent1->OSEventPtr             = (OS_EVENT *)0;
8575 f8812 c7            	clrb	
8576 f8813 6c41          	std	1,y
8577                     ; 1361     pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
8579 f8815 cc76bd        	ldd	#L1125
8580 f8818 6c4e          	std	14,y
8581                     ; 1363     OSEventFreeList                 = &OSEventTbl[0];
8583 f881a cc1662        	ldd	#_OSEventTbl
8584 f881d 7c1702        	std	_OSEventFreeList
8585                     ; 1373 }
8588 f8820 1b86          	leas	6,s
8589 f8822 3d            	rts	
8618                     ; 1389 static  void  OS_InitMisc (void)
8618                     ; 1390 {
8619                     	switch	.text
8620 f8823               L3153_OS_InitMisc:
8624                     ; 1392     OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
8626 f8823 87            	clra	
8627 f8824 c7            	clrb	
8628 f8825 7c13af        	std	_OSTime+2
8629 f8828 7c13ad        	std	_OSTime
8630                     ; 1395     OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
8632 f882b 7a163c        	staa	_OSIntNesting
8633                     ; 1396     OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
8635 f882e 7b163b        	stab	_OSLockNesting
8636                     ; 1398     OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
8638 f8831 7b162e        	stab	_OSTaskCtr
8639                     ; 1400     OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
8641 f8834 7a162f        	staa	_OSRunning
8642                     ; 1402     OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
8644 f8837 7c1706        	std	_OSCtxSwCtr+2
8645 f883a 7c1704        	std	_OSCtxSwCtr
8646                     ; 1403     OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
8648 f883d 7c162c        	std	_OSIdleCtr+2
8649 f8840 7c162a        	std	_OSIdleCtr
8650                     ; 1418 }
8653 f8843 3d            	rts	
8690                     ; 1434 static  void  OS_InitRdyList (void)
8690                     ; 1435 {
8691                     	switch	.text
8692 f8844               L5153_OS_InitRdyList:
8694 f8844 37            	pshb	
8695       00000001      OFST:	set	1
8698                     ; 1439     OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
8700 f8845 c7            	clrb	
8701 f8846 7b1638        	stab	_OSRdyGrp
8702                     ; 1440     for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
8704 f8849 6b80          	stab	OFST-1,s
8705 f884b               L7325:
8706                     ; 1441         OSRdyTbl[i] = 0u;
8708 f884b 87            	clra	
8709 f884c b746          	tfr	d,y
8710 f884e 6aea1630      	staa	_OSRdyTbl,y
8711                     ; 1440     for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
8713 f8852 6280          	inc	OFST-1,s
8716 f8854 e680          	ldab	OFST-1,s
8717 f8856 c108          	cmpb	#8
8718 f8858 25f1          	blo	L7325
8719                     ; 1444     OSPrioCur     = 0u;
8721 f885a c7            	clrb	
8722 f885b 7b163a        	stab	_OSPrioCur
8723                     ; 1445     OSPrioHighRdy = 0u;
8725 f885e 7a1639        	staa	_OSPrioHighRdy
8726                     ; 1447     OSTCBHighRdy  = (OS_TCB *)0;
8728 f8861 7c1584        	std	_OSTCBHighRdy
8729                     ; 1448     OSTCBCur      = (OS_TCB *)0;
8731 f8864 7c1588        	std	_OSTCBCur
8732                     ; 1449 }
8735 f8867 1b81          	leas	1,s
8736 f8869 3d            	rts	
8772                     ; 1465 static  void  OS_InitTaskIdle (void)
8772                     ; 1466 {
8773                     	switch	.text
8774 f886a               L7153_OS_InitTaskIdle:
8776 f886a 37            	pshb	
8777       00000001      OFST:	set	1
8780                     ; 1474     (void)OSTaskCreateExt(OS_TaskIdle,
8780                     ; 1475                           (void *)0,                                 /* No arguments passed to OS_TaskIdle() */
8780                     ; 1476                           &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1u],/* Set Top-Of-Stack                     */
8780                     ; 1477                           OS_TASK_IDLE_PRIO,                         /* Lowest priority level                */
8780                     ; 1478                           OS_TASK_IDLE_ID,
8780                     ; 1479                           &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack                  */
8780                     ; 1480                           OS_TASK_IDLE_STK_SIZE,
8780                     ; 1481                           (void *)0,                                 /* No TCB extension                     */
8780                     ; 1482                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
8782 f886b cc0003        	ldd	#3
8783 f886e 3b            	pshd	
8784 f886f c7            	clrb	
8785 f8870 3b            	pshd	
8786 f8871 c6a0          	ldab	#160
8787 f8873 3b            	pshd	
8788 f8874 c7            	clrb	
8789 f8875 3b            	pshd	
8790 f8876 cc158a        	ldd	#_OSTaskIdleStk
8791 f8879 3b            	pshd	
8792 f887a ccffff        	ldd	#-1
8793 f887d 3b            	pshd	
8794 f887e cc003f        	ldd	#63
8795 f8881 3b            	pshd	
8796 f8882 cc1629        	ldd	#_OSTaskIdleStk+159
8797 f8885 3b            	pshd	
8798 f8886 87            	clra	
8799 f8887 c7            	clrb	
8800 f8888 3b            	pshd	
8801 f8889 cc49ca        	ldd	#_OS_TaskIdle
8802 f888c 1669d1        	jsr	_OSTaskCreateExt
8804 f888f 1bf012        	leas	18,s
8805                     ; 1509     OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
8807 f8892 1a80          	leax	OFST-1,s
8808 f8894 34            	pshx	
8809 f8895 cc76af        	ldd	#L1625
8810 f8898 3b            	pshd	
8811 f8899 cc003f        	ldd	#63
8812 f889c 166c91        	jsr	_OSTaskNameSet
8814                     ; 1511 }
8817 f889f 1b85          	leas	5,s
8818 f88a1 3d            	rts	
8885                     ; 1591 static  void  OS_InitTCBList (void)
8885                     ; 1592 {
8886                     	switch	.text
8887 f88a2               L1253_OS_InitTCBList:
8889 f88a2 1b9a          	leas	-6,s
8890       00000006      OFST:	set	6
8893                     ; 1599     OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
8895 f88a4 cc00ba        	ldd	#186
8896 f88a7 3b            	pshd	
8897 f88a8 cc1448        	ldd	#_OSTCBTbl
8898 f88ab 075a          	jsr	_OS_MemClr
8900                     ; 1600     OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
8902 f88ad cc0080        	ldd	#128
8903 f88b0 6c80          	std	0,s
8904 f88b2 cc1502        	ldd	#_OSTCBPrioTbl
8905 f88b5 0750          	jsr	_OS_MemClr
8907 f88b7 1b82          	leas	2,s
8908                     ; 1601     for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
8910 f88b9 c7            	clrb	
8911 f88ba 6b80          	stab	OFST-6,s
8912 f88bc               L5135:
8913                     ; 1602         ix_next =  ix + 1u;
8915 f88bc 52            	incb	
8916 f88bd 6b83          	stab	OFST-3,s
8917                     ; 1603         ptcb1   = &OSTCBTbl[ix];
8919 f88bf e680          	ldab	OFST-6,s
8920 f88c1 863e          	ldaa	#62
8921 f88c3 12            	mul	
8922 f88c4 c31448        	addd	#_OSTCBTbl
8923 f88c7 6c81          	std	OFST-5,s
8924                     ; 1604         ptcb2   = &OSTCBTbl[ix_next];
8926 f88c9 e683          	ldab	OFST-3,s
8927 f88cb 863e          	ldaa	#62
8928 f88cd 12            	mul	
8929 f88ce c31448        	addd	#_OSTCBTbl
8930 f88d1 6c84          	std	OFST-2,s
8931                     ; 1605         ptcb1->OSTCBNext = ptcb2;
8933 f88d3 ed81          	ldy	OFST-5,s
8934 f88d5 6c4e          	std	14,y
8935                     ; 1607         ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
8937 f88d7 cc76bd        	ldd	#L1125
8938 f88da 6ce83c        	std	60,y
8939                     ; 1601     for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
8941 f88dd 6280          	inc	OFST-6,s
8944 f88df e680          	ldab	OFST-6,s
8945 f88e1 c102          	cmpb	#2
8946 f88e3 25d7          	blo	L5135
8947                     ; 1610     ptcb1                   = &OSTCBTbl[ix];
8949 f88e5 863e          	ldaa	#62
8950 f88e7 12            	mul	
8951 f88e8 c31448        	addd	#_OSTCBTbl
8952 f88eb 6c81          	std	OFST-5,s
8953                     ; 1611     ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
8955 f88ed 87            	clra	
8956 f88ee c7            	clrb	
8957 f88ef ed81          	ldy	OFST-5,s
8958 f88f1 6c4e          	std	14,y
8959                     ; 1613     ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
8961 f88f3 cc76bd        	ldd	#L1125
8962 f88f6 6ce83c        	std	60,y
8963                     ; 1615     OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
8965 f88f9 87            	clra	
8966 f88fa c7            	clrb	
8967 f88fb 7c1582        	std	_OSTCBList
8968                     ; 1616     OSTCBFreeList           = &OSTCBTbl[0];
8970 f88fe cc1448        	ldd	#_OSTCBTbl
8971 f8901 7c1586        	std	_OSTCBFreeList
8972                     ; 1617 }
8975 f8904 1b86          	leas	6,s
8976 f8906 3d            	rts	
9017                     ; 1640 _NEAR void  OS_MemClr (INT8U  *pdest,
9017                     ; 1641                       INT16U  size)
9017                     ; 1642 {
9018                     	switch	.text
9019 f8907               _OS_MemClr:
9021 f8907 3b            	pshd	
9022       00000000      OFST:	set	0
9025 f8908 200b          	bra	L5435
9026 f890a               L3435:
9027                     ; 1644         *pdest++ = (INT8U)0;
9029 f890a ed80          	ldy	OFST+0,s
9030 f890c 6970          	clr	1,y+
9031 f890e 6d80          	sty	OFST+0,s
9032                     ; 1645         size--;
9034 f8910 b746          	tfr	d,y
9035 f8912 03            	dey	
9036 f8913 6d84          	sty	OFST+4,s
9037 f8915               L5435:
9038                     ; 1643     while (size > 0u) {
9040 f8915 ec84          	ldd	OFST+4,s
9041 f8917 26f1          	bne	L3435
9042                     ; 1647 }
9045 f8919 31            	puly	
9046 f891a 3d            	rts	
9097                     ; 1674 _NEAR void  OS_MemCopy (INT8U  *pdest,
9097                     ; 1675                        INT8U  *psrc,
9097                     ; 1676                        INT16U  size)
9097                     ; 1677 {
9098                     	switch	.text
9099 f891b               _OS_MemCopy:
9101 f891b 3b            	pshd	
9102       00000000      OFST:	set	0
9105 f891c ee84          	ldx	OFST+4,s
9106 f891e 200d          	bra	L7735
9107 f8920               L5735:
9108                     ; 1679         *pdest++ = *psrc++;
9110 f8920 ed80          	ldy	OFST+0,s
9111 f8922 180a3070      	movb	1,x+,1,y+
9112 f8926 6d80          	sty	OFST+0,s
9113                     ; 1680         size--;
9115 f8928 ed86          	ldy	OFST+6,s
9116 f892a 03            	dey	
9117 f892b 6d86          	sty	OFST+6,s
9118 f892d               L7735:
9119                     ; 1678     while (size > 0u) {
9121 f892d ec86          	ldd	OFST+6,s
9122 f892f 26ef          	bne	L5735
9123                     ; 1682 }
9126 f8931 31            	puly	
9127 f8932 3d            	rts	
9170                     ; 1702 _NEAR void  OS_Sched (void)
9170                     ; 1703 {
9171                     	switch	.text
9172 f8933               _OS_Sched:
9174 f8933 37            	pshb	
9175       00000001      OFST:	set	1
9178                     ; 1705     OS_CPU_SR  cpu_sr = 0u;
9180                     ; 1710     OS_ENTER_CRITICAL();
9182 f8934 164b4f        	jsr	_OS_CPU_SR_Save
9184 f8937 6b80          	stab	OFST-1,s
9185                     ; 1711     if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
9187 f8939 f6163c        	ldab	_OSIntNesting
9188 f893c 2644          	bne	L7145
9189                     ; 1712         if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
9191 f893e f6163b        	ldab	_OSLockNesting
9192 f8941 263f          	bne	L7145
9193                     ; 1713             OS_SchedNew();
9195 f8943 0746          	jsr	L3253_OS_SchedNew
9197                     ; 1714             OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
9199 f8945 f61639        	ldab	_OSPrioHighRdy
9200 f8948 87            	clra	
9201 f8949 59            	lsld	
9202 f894a b746          	tfr	d,y
9203 f894c edea1502      	ldy	_OSTCBPrioTbl,y
9204 f8950 7d1584        	sty	_OSTCBHighRdy
9205                     ; 1715             if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
9207 f8953 f61639        	ldab	_OSPrioHighRdy
9208 f8956 f1163a        	cmpb	_OSPrioCur
9209 f8959 2727          	beq	L7145
9210                     ; 1717                 OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
9212 f895b ece82c        	ldd	44,y
9213 f895e c30001        	addd	#1
9214 f8961 6ce82c        	std	44,y
9215 f8964 2408          	bcc	L611
9216 f8966 62e82b        	inc	43,y
9217 f8969 2603          	bne	L611
9218 f896b 62e82a        	inc	42,y
9219 f896e               L611:
9220                     ; 1719                 OSCtxSwCtr++;                          /* Increment context switch counter             */
9222 f896e fc1706        	ldd	_OSCtxSwCtr+2
9223 f8971 c30001        	addd	#1
9224 f8974 7c1706        	std	_OSCtxSwCtr+2
9225 f8977 2408          	bcc	L021
9226 f8979 721705        	inc	_OSCtxSwCtr+1
9227 f897c 2603          	bne	L021
9228 f897e 721704        	inc	_OSCtxSwCtr
9229 f8981               L021:
9230                     ; 1727                 OS_TASK_SW();                          /* Perform a context switch                     */
9233 f8981 3f            	swi	
9236 f8982               L7145:
9237                     ; 1731     OS_EXIT_CRITICAL();
9239 f8982 e680          	ldab	OFST-1,s
9240 f8984 87            	clra	
9241 f8985 164b54        	jsr	_OS_CPU_SR_Restore
9243                     ; 1732 }
9246 f8988 1b81          	leas	1,s
9247 f898a 3d            	rts	
9282                     ; 1751 _NEAR static  void  OS_SchedNew (void)
9282                     ; 1752 {
9283                     	switch	.text
9284 f898b               L3253_OS_SchedNew:
9286 f898b 37            	pshb	
9287       00000001      OFST:	set	1
9290                     ; 1757     y             = OSUnMapTbl[OSRdyGrp];
9292 f898c f61638        	ldab	_OSRdyGrp
9293 f898f 87            	clra	
9294 f8990 b746          	tfr	d,y
9295 f8992 e6ea75af      	ldab	_OSUnMapTbl,y
9296 f8996 6b80          	stab	OFST-1,s
9297                     ; 1758     OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
9299 f8998 b746          	tfr	d,y
9300 f899a e6ea1630      	ldab	_OSRdyTbl,y
9301 f899e b746          	tfr	d,y
9302 f89a0 e680          	ldab	OFST-1,s
9303 f89a2 58            	lslb	
9304 f89a3 58            	lslb	
9305 f89a4 58            	lslb	
9306 f89a5 ebea75af      	addb	_OSUnMapTbl,y
9307 f89a9 7b1639        	stab	_OSPrioHighRdy
9308                     ; 1776 }
9311 f89ac 1b81          	leas	1,s
9312 f89ae 3d            	rts	
9353                     ; 1796 _NEAR INT8U  OS_StrLen (INT8U *psrc)
9353                     ; 1797 {
9354                     	switch	.text
9355 f89af               _OS_StrLen:
9357 f89af 3b            	pshd	
9358 f89b0 37            	pshb	
9359       00000001      OFST:	set	1
9362                     ; 1802     if (psrc == (INT8U *)0) {
9364 f89b1 046402        	tbne	d,L1645
9365                     ; 1803         return (0u);
9368 f89b4 2011          	bra	L621
9369 f89b6               L1645:
9370                     ; 1807     len = 0u;
9372 f89b6 6980          	clr	OFST-1,s
9374 f89b8 b746          	tfr	d,y
9375 f89ba 2003          	bra	L7645
9376 f89bc               L3645:
9377                     ; 1809         psrc++;
9379 f89bc 02            	iny	
9380                     ; 1810         len++;
9382 f89bd 6280          	inc	OFST-1,s
9383 f89bf               L7645:
9384                     ; 1808     while (*psrc != OS_ASCII_NUL) {
9384                     ; 1809         psrc++;
9384                     ; 1810         len++;
9386 f89bf e640          	ldab	0,y
9387 f89c1 26f9          	bne	L3645
9388 f89c3 6d81          	sty	OFST+0,s
9389                     ; 1812     return (len);
9391 f89c5 e680          	ldab	OFST-1,s
9393 f89c7               L621:
9395 f89c7 1b83          	leas	3,s
9396 f89c9 3d            	rts	
9441                     ; 1838 _NEAR void  OS_TaskIdle (void *p_arg)
9441                     ; 1839 {
9442                     	switch	.text
9443 f89ca               _OS_TaskIdle:
9445 f89ca 3b            	pshd	
9446 f89cb 37            	pshb	
9447       00000001      OFST:	set	1
9450                     ; 1841     OS_CPU_SR  cpu_sr = 0u;
9452                     ; 1844     (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
9454 f89cc               L3155:
9455                     ; 1846         OS_ENTER_CRITICAL();
9457 f89cc 164b4f        	jsr	_OS_CPU_SR_Save
9459 f89cf 6b80          	stab	OFST-1,s
9460                     ; 1847         OSIdleCtr++;
9462 f89d1 fc162c        	ldd	_OSIdleCtr+2
9463 f89d4 c30001        	addd	#1
9464 f89d7 7c162c        	std	_OSIdleCtr+2
9465 f89da 2408          	bcc	L231
9466 f89dc 72162b        	inc	_OSIdleCtr+1
9467 f89df 2603          	bne	L231
9468 f89e1 72162a        	inc	_OSIdleCtr
9469 f89e4               L231:
9470                     ; 1848         OS_EXIT_CRITICAL();
9472 f89e4 e680          	ldab	OFST-1,s
9473 f89e6 87            	clra	
9474 f89e7 164b54        	jsr	_OS_CPU_SR_Restore
9476                     ; 1849         OSTaskIdleHook();                        /* Call user definable HOOK                           */
9478 f89ea 164bc2        	jsr	_OSTaskIdleHook
9481 f89ed 20dd          	bra	L3155
9564                     ; 1949 _NEAR void  OS_TaskStatStkChk (void)
9564                     ; 1950 {
9565                     	switch	.text
9566 f89ef               _OS_TaskStatStkChk:
9568 f89ef 1b94          	leas	-12,s
9569       0000000c      OFST:	set	12
9572                     ; 1957     for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
9574 f89f1 6982          	clr	OFST-10,s
9575 f89f3               L7555:
9576                     ; 1958         err = OSTaskStkChk(prio, &stk_data);
9578 f89f3 1a83          	leax	OFST-9,s
9579 f89f5 34            	pshx	
9580 f89f6 e684          	ldab	OFST-8,s
9581 f89f8 87            	clra	
9582 f89f9 166d88        	jsr	_OSTaskStkChk
9584 f89fc 1b82          	leas	2,s
9585 f89fe 6b8b          	stab	OFST-1,s
9586                     ; 1959         if (err == OS_ERR_NONE) {
9588 f8a00 2624          	bne	L5655
9589                     ; 1960             ptcb = OSTCBPrioTbl[prio];
9591 f8a02 e682          	ldab	OFST-10,s
9592 f8a04 87            	clra	
9593 f8a05 59            	lsld	
9594 f8a06 b746          	tfr	d,y
9595 f8a08 edea1502      	ldy	_OSTCBPrioTbl,y
9596 f8a0c 6d80          	sty	OFST-12,s
9597                     ; 1961             if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
9599 f8a0e ec80          	ldd	OFST-12,s
9600 f8a10 2714          	beq	L5655
9601                     ; 1962                 if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
9603 f8a12 040411        	dbeq	d,L5655
9604                     ; 1965                     ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
9606 f8a15 ec48          	ldd	8,y
9607 f8a17 e344          	addd	4,y
9608 f8a19 6ce836        	std	54,y
9609                     ; 1969                     ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
9611 f8a1c ec89          	ldd	OFST-3,s
9612 f8a1e 6ce83a        	std	58,y
9613 f8a21 ec87          	ldd	OFST-5,s
9614 f8a23 6ce838        	std	56,y
9615 f8a26               L5655:
9616                     ; 1957     for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
9618 f8a26 6282          	inc	OFST-10,s
9621 f8a28 e682          	ldab	OFST-10,s
9622 f8a2a c13f          	cmpb	#63
9623 f8a2c 23c5          	bls	L7555
9624                     ; 1975 }
9627 f8a2e 1b8c          	leas	12,s
9628 f8a30 3d            	rts	
9739                     ; 2022 _NEAR INT8U  OS_TCBInit (INT8U    prio,
9739                     ; 2023                         OS_STK  *ptos,
9739                     ; 2024                         OS_STK  *pbos,
9739                     ; 2025                         INT16U   id,
9739                     ; 2026                         INT32U   stk_size,
9739                     ; 2027                         void    *pext,
9739                     ; 2028                         INT16U   opt)
9739                     ; 2029 {
9740                     	switch	.text
9741 f8a31               _OS_TCBInit:
9743 f8a31 3b            	pshd	
9744 f8a32 1b9d          	leas	-3,s
9745       00000003      OFST:	set	3
9748                     ; 2032     OS_CPU_SR  cpu_sr = 0u;
9750                     ; 2044     OS_ENTER_CRITICAL();
9752 f8a34 164b4f        	jsr	_OS_CPU_SR_Save
9754 f8a37 6b82          	stab	OFST-1,s
9755                     ; 2045     ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
9757 f8a39 fd1586        	ldy	_OSTCBFreeList
9758 f8a3c 6d80          	sty	OFST-3,s
9759                     ; 2046     if (ptcb != (OS_TCB *)0) {
9761 f8a3e 18270104      	beq	L1465
9762                     ; 2047         OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
9764 f8a42 18054e1586    	movw	14,y,_OSTCBFreeList
9765                     ; 2048         OS_EXIT_CRITICAL();
9767 f8a47 87            	clra	
9768 f8a48 164b54        	jsr	_OS_CPU_SR_Restore
9770                     ; 2049         ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
9772 f8a4b ed80          	ldy	OFST-3,s
9773 f8a4d 18028740      	movw	OFST+4,s,0,y
9774                     ; 2050         ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
9776 f8a51 e684          	ldab	OFST+1,s
9777 f8a53 6be824        	stab	36,y
9778                     ; 2051         ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
9780 f8a56 c7            	clrb	
9781 f8a57 6be822        	stab	34,y
9782                     ; 2052         ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
9784 f8a5a 87            	clra	
9785 f8a5b 6ae823        	staa	35,y
9786                     ; 2053         ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
9788 f8a5e 6ce820        	std	32,y
9789 f8a61 6ce81e        	std	30,y
9790                     ; 2056         ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
9792 f8a64 ecf011        	ldd	OFST+14,s
9793 f8a67 6c42          	std	2,y
9794                     ; 2057         ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
9796 f8a69 18028f48      	movw	OFST+12,s,8,y
9797 f8a6d 18028d46      	movw	OFST+10,s,6,y
9798                     ; 2058         ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
9800 f8a71 18028944      	movw	OFST+6,s,4,y
9801                     ; 2059         ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
9803 f8a75 ecf013        	ldd	OFST+16,s
9804 f8a78 6c4a          	std	10,y
9805                     ; 2060         ptcb->OSTCBId            = id;                     /* Store task ID                            */
9807 f8a7a 18028b4c      	movw	OFST+8,s,12,y
9808                     ; 2070         ptcb->OSTCBDelReq        = OS_ERR_NONE;
9810 f8a7e 69e829        	clr	41,y
9811                     ; 2074         ptcb->OSTCBY             = (INT8U)(prio >> 3u);
9813 f8a81 e684          	ldab	OFST+1,s
9814 f8a83 54            	lsrb	
9815 f8a84 54            	lsrb	
9816 f8a85 54            	lsrb	
9817 f8a86 6be826        	stab	38,y
9818                     ; 2075         ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
9820 f8a89 e684          	ldab	OFST+1,s
9821 f8a8b c407          	andb	#7
9822 f8a8d 6be825        	stab	37,y
9823                     ; 2081         ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
9825 f8a90 c601          	ldab	#1
9826 f8a92 a6e826        	ldaa	38,y
9827 f8a95 2704          	beq	L041
9828 f8a97               L241:
9829 f8a97 58            	lslb	
9830 f8a98 0430fc        	dbne	a,L241
9831 f8a9b               L041:
9832 f8a9b 6be828        	stab	40,y
9833                     ; 2082         ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
9835 f8a9e c601          	ldab	#1
9836 f8aa0 a6e825        	ldaa	37,y
9837 f8aa3 2704          	beq	L441
9838 f8aa5               L641:
9839 f8aa5 58            	lslb	
9840 f8aa6 0430fc        	dbne	a,L641
9841 f8aa9               L441:
9842 f8aa9 6be827        	stab	39,y
9843                     ; 2085         ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
9845 f8aac 87            	clra	
9846 f8aad c7            	clrb	
9847 f8aae 6ce812        	std	18,y
9848                     ; 2087         ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
9850 f8ab1 6ce814        	std	20,y
9851                     ; 2088         ptcb->OSTCBEventMultiRdy = (OS_EVENT  *)0;         /* No events readied for Multipend          */
9853 f8ab4 6ce816        	std	22,y
9854                     ; 2093         ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
9856 f8ab7 6ce81a        	std	26,y
9857                     ; 2097         ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
9859 f8aba 6ce818        	std	24,y
9860                     ; 2101         ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
9862 f8abd 6ce82c        	std	44,y
9863 f8ac0 6ce82a        	std	42,y
9864                     ; 2102         ptcb->OSTCBCyclesStart   = 0uL;
9866 f8ac3 6ce834        	std	52,y
9867 f8ac6 6ce832        	std	50,y
9868                     ; 2103         ptcb->OSTCBCyclesTot     = 0uL;
9870 f8ac9 6ce830        	std	48,y
9871 f8acc 6ce82e        	std	46,y
9872                     ; 2104         ptcb->OSTCBStkBase       = (OS_STK *)0;
9874 f8acf 6ce836        	std	54,y
9875                     ; 2105         ptcb->OSTCBStkUsed       = 0uL;
9877 f8ad2 6ce83a        	std	58,y
9878 f8ad5 6ce838        	std	56,y
9879                     ; 2109         ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
9881 f8ad8 cc76bd        	ldd	#L1125
9882 f8adb 6ce83c        	std	60,y
9883                     ; 2118         OSTCBInitHook(ptcb);
9885 f8ade ec80          	ldd	OFST-3,s
9886 f8ae0 164c0e        	jsr	_OSTCBInitHook
9888                     ; 2120         OS_ENTER_CRITICAL();
9890 f8ae3 164b4f        	jsr	_OS_CPU_SR_Save
9892 f8ae6 6b82          	stab	OFST-1,s
9893                     ; 2121         OSTCBPrioTbl[prio] = ptcb;
9895 f8ae8 e684          	ldab	OFST+1,s
9896 f8aea 87            	clra	
9897 f8aeb 59            	lsld	
9898 f8aec b746          	tfr	d,y
9899 f8aee ec80          	ldd	OFST-3,s
9900 f8af0 6cea1502      	std	_OSTCBPrioTbl,y
9901                     ; 2122         OS_EXIT_CRITICAL();
9903 f8af4 e682          	ldab	OFST-1,s
9904 f8af6 87            	clra	
9905 f8af7 164b54        	jsr	_OS_CPU_SR_Restore
9907                     ; 2124         OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
9909 f8afa ec80          	ldd	OFST-3,s
9910 f8afc 164bc0        	jsr	_OSTaskCreateHook
9912                     ; 2135         OS_ENTER_CRITICAL();
9914 f8aff 164b4f        	jsr	_OS_CPU_SR_Save
9916 f8b02 6b82          	stab	OFST-1,s
9917                     ; 2136         ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
9919 f8b04 ed80          	ldy	OFST-3,s
9920 f8b06 18014e1582    	movw	_OSTCBList,14,y
9921                     ; 2137         ptcb->OSTCBPrev = (OS_TCB *)0;
9923 f8b0b 87            	clra	
9924 f8b0c c7            	clrb	
9925 f8b0d 6ce810        	std	16,y
9926                     ; 2138         if (OSTCBList != (OS_TCB *)0) {
9928 f8b10 fd1582        	ldy	_OSTCBList
9929 f8b13 2705          	beq	L3465
9930                     ; 2139             OSTCBList->OSTCBPrev = ptcb;
9932 f8b15 ec80          	ldd	OFST-3,s
9933 f8b17 6ce810        	std	16,y
9934 f8b1a               L3465:
9935                     ; 2141         OSTCBList               = ptcb;
9937 f8b1a ed80          	ldy	OFST-3,s
9938 f8b1c 7d1582        	sty	_OSTCBList
9939                     ; 2142         OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
9941 f8b1f e6e828        	ldab	40,y
9942 f8b22 fa1638        	orab	_OSRdyGrp
9943 f8b25 7b1638        	stab	_OSRdyGrp
9944                     ; 2143         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
9946 f8b28 e6e826        	ldab	38,y
9947 f8b2b 87            	clra	
9948 f8b2c b746          	tfr	d,y
9949 f8b2e ee80          	ldx	OFST-3,s
9950 f8b30 e6e027        	ldab	39,x
9951 f8b33 eaea1630      	orab	_OSRdyTbl,y
9952 f8b37 6bea1630      	stab	_OSRdyTbl,y
9953                     ; 2144         OSTaskCtr++;                                       /* Increment the #tasks counter             */
9955 f8b3b 72162e        	inc	_OSTaskCtr
9956                     ; 2146         OS_EXIT_CRITICAL();
9959 f8b3e e682          	ldab	OFST-1,s
9960 f8b40 164b54        	jsr	_OS_CPU_SR_Restore
9962                     ; 2147         return (OS_ERR_NONE);
9964 f8b43 c7            	clrb	
9966 f8b44 2006          	bra	L051
9967 f8b46               L1465:
9968                     ; 2149     OS_EXIT_CRITICAL();
9970 f8b46 87            	clra	
9971 f8b47 164b54        	jsr	_OS_CPU_SR_Restore
9973                     ; 2150     return (OS_ERR_TASK_NO_MORE_TCB);
9975 f8b4a c642          	ldab	#66
9977 f8b4c               L051:
9979 f8b4c 1b85          	leas	5,s
9980 f8b4e 3d            	rts	
10004                     	xref	_OSTimeTickHook
10005                     	xref	_OSTCBInitHook
10006                     	xref	_OSTaskIdleHook
10007                     	xref	_OSTaskCreateHook
10008                     	xref	_OSInitHookEnd
10009                     	xref	_OSInitHookBegin
10010                     	xref	_OSDebugInit
10011                     	xref	_OSTmr_Init
10012                     	xdef	_OS_TCBInit
10013                     	xdef	_OS_TaskStatStkChk
10014                     	xdef	_OS_TaskIdle
10015                     	xdef	_OS_StrLen
10016                     	xdef	_OS_Sched
10017                     	xref	_OS_QInit
10018                     	xref	_OS_MemInit
10019                     	xdef	_OS_MemCopy
10020                     	xdef	_OS_MemClr
10021                     	xref	_OS_FlagInit
10022                     	xdef	_OS_EventWaitListInit
10023                     	xdef	_OS_EventTaskRemoveMulti
10024                     	xdef	_OS_EventTaskWaitMulti
10025                     	xdef	_OS_EventTaskRemove
10026                     	xdef	_OS_EventTaskWait
10027                     	xdef	_OS_EventTaskRdy
10028                     	xdef	_OS_Dummy
10029                     	xdef	_OSVersion
10030                     	xdef	_OSStart
10031                     	xdef	_OSSchedUnlock
10032                     	xdef	_OSSchedLock
10033                     	xdef	_OSIntExit
10034                     	xdef	_OSIntEnter
10035                     	xdef	_OSInit
10036                     	xdef	_OSTimeTick
10037                     	xref	_OSTaskStkChk
10038                     	xref	_OSTaskNameSet
10039                     	xref	_OSTaskCreateExt
10040                     	xdef	_OSEventPendMulti
10041                     	xdef	_OSEventNameSet
10042                     	xdef	_OSEventNameGet
10043                     	xdef	_OSUnMapTbl
10044                     	switch	.bss
10045 0116f               _OSTmrWheelTbl:
10046 0116f 000000000000  	ds.b	32
10047                     	xdef	_OSTmrWheelTbl
10048 0118f               _OSTmrTaskStk:
10049 0118f 000000000000  	ds.b	160
10050                     	xdef	_OSTmrTaskStk
10051 0122f               _OSTmrFreeList:
10052 0122f 0000          	ds.b	2
10053                     	xdef	_OSTmrFreeList
10054 01231               _OSTmrTbl:
10055 01231 000000000000  	ds.b	368
10056                     	xdef	_OSTmrTbl
10057 013a1               _OSTmrSemSignal:
10058 013a1 0000          	ds.b	2
10059                     	xdef	_OSTmrSemSignal
10060 013a3               _OSTmrSem:
10061 013a3 0000          	ds.b	2
10062                     	xdef	_OSTmrSem
10063 013a5               _OSTmrTime:
10064 013a5 00000000      	ds.b	4
10065                     	xdef	_OSTmrTime
10066 013a9               _OSTmrUsed:
10067 013a9 0000          	ds.b	2
10068                     	xdef	_OSTmrUsed
10069 013ab               _OSTmrFree:
10070 013ab 0000          	ds.b	2
10071                     	xdef	_OSTmrFree
10072 013ad               _OSTime:
10073 013ad 00000000      	ds.b	4
10074                     	xdef	_OSTime
10075 013b1               _OSQTbl:
10076 013b1 000000000000  	ds.b	56
10077                     	xdef	_OSQTbl
10078 013e9               _OSQFreeList:
10079 013e9 0000          	ds.b	2
10080                     	xdef	_OSQFreeList
10081 013eb               _OSMemTbl:
10082 013eb 000000000000  	ds.b	90
10083                     	xdef	_OSMemTbl
10084 01445               _OSMemFreeList:
10085 01445 0000          	ds.b	2
10086                     	xdef	_OSMemFreeList
10087 01447               _OSTickStepState:
10088 01447 00            	ds.b	1
10089                     	xdef	_OSTickStepState
10090 01448               _OSTCBTbl:
10091 01448 000000000000  	ds.b	186
10092                     	xdef	_OSTCBTbl
10093 01502               _OSTCBPrioTbl:
10094 01502 000000000000  	ds.b	128
10095                     	xdef	_OSTCBPrioTbl
10096 01582               _OSTCBList:
10097 01582 0000          	ds.b	2
10098                     	xdef	_OSTCBList
10099 01584               _OSTCBHighRdy:
10100 01584 0000          	ds.b	2
10101                     	xdef	_OSTCBHighRdy
10102 01586               _OSTCBFreeList:
10103 01586 0000          	ds.b	2
10104                     	xdef	_OSTCBFreeList
10105 01588               _OSTCBCur:
10106 01588 0000          	ds.b	2
10107                     	xdef	_OSTCBCur
10108 0158a               _OSTaskIdleStk:
10109 0158a 000000000000  	ds.b	160
10110                     	xdef	_OSTaskIdleStk
10111 0162a               _OSIdleCtr:
10112 0162a 00000000      	ds.b	4
10113                     	xdef	_OSIdleCtr
10114 0162e               _OSTaskCtr:
10115 0162e 00            	ds.b	1
10116                     	xdef	_OSTaskCtr
10117 0162f               _OSRunning:
10118 0162f 00            	ds.b	1
10119                     	xdef	_OSRunning
10120 01630               _OSRdyTbl:
10121 01630 000000000000  	ds.b	8
10122                     	xdef	_OSRdyTbl
10123 01638               _OSRdyGrp:
10124 01638 00            	ds.b	1
10125                     	xdef	_OSRdyGrp
10126 01639               _OSPrioHighRdy:
10127 01639 00            	ds.b	1
10128                     	xdef	_OSPrioHighRdy
10129 0163a               _OSPrioCur:
10130 0163a 00            	ds.b	1
10131                     	xdef	_OSPrioCur
10132 0163b               _OSLockNesting:
10133 0163b 00            	ds.b	1
10134                     	xdef	_OSLockNesting
10135 0163c               _OSIntNesting:
10136 0163c 00            	ds.b	1
10137                     	xdef	_OSIntNesting
10138 0163d               _OSFlagFreeList:
10139 0163d 0000          	ds.b	2
10140                     	xdef	_OSFlagFreeList
10141 0163f               _OSFlagTbl:
10142 0163f 000000000000  	ds.b	35
10143                     	xdef	_OSFlagTbl
10144 01662               _OSEventTbl:
10145 01662 000000000000  	ds.b	160
10146                     	xdef	_OSEventTbl
10147 01702               _OSEventFreeList:
10148 01702 0000          	ds.b	2
10149                     	xdef	_OSEventFreeList
10150 01704               _OSCtxSwCtr:
10151 01704 00000000      	ds.b	4
10152                     	xdef	_OSCtxSwCtr
10153                     	xref	_OS_CPU_SR_Restore
10154                     	xref	_OS_CPU_SR_Save
10155                     	switch	.const
10156 fb6af               L1625:
10157 fb6af 75432f4f532d  	dc.b	"uC/OS-II Idle",0
10158 fb6bd               L1125:
10159 fb6bd 3f00          	dc.b	"?",0
10180                     	end
