   2                     ;*********************************************************************
   3                     ;
   4                     ;  File name:  Crtsi_256.s
   5                     ;
   6                     ;  Purpose:    MC9S12DG256 application startup file (executed before
   7                     ;              jumping to main() subroutine)
   8                     ;
   9                     ;  Target:     MC9S12DG256-based board
  10                     ;
  11                     ;  Revisions:
  12                     ;   ##  dd mmm yyyy  who  description
  13                     ;    1  09 Dec 2020  GPM  Initial revision (from COSMIC Software)
  14                     ;
  15                     ;  Notes:
  16                     ;    IMPORTANT!!!
  17                     ;      This module *MUST* be located at physical address 0xF8000
  18                     ;      (logical address 0x4000) so that it agrees with the
  19                     ;      bootloader.
  20                     ;
  21                     ;  Tensor Drilling Technologies
  22                     ;  2418 North Frazier St., Suite 100
  23                     ;  Conroe, TX 77303
  24                     ;*********************************************************************
  25                     ;
  26                     ;    C STARTUP FOR MC68HC12
  27                     ;    WITH AUTOMATIC DATA INITIALISATION
  28                     ;    Copyright (c) 2000 by COSMIC Software
  29                     ;
  30                         xdef    _exit, __stext
  31                         xref    _main, __sbss, __memory, __idesc__, __stack
  32                     
  33                     ; this is function void _stext(void)
  34                     ; PIC = position independent code
  35 f8000               __stext:
  36 f8000 cf4000            lds   #__stack           ; initialize stack pointer
  43 f8003 cec000            ldx   #__idesc__         ; descriptor address
  45 f8006 ed31              ldy   2,x+               ; start address of prom data
  46 f8008               ibcl:
  47 f8008 a634              ldaa  5,x+               ; test flag byte
  48 f800a 2719              beq   zbss               ; no more segment
  49 f800c 2a02              bpl   nopg               ; page indicator
  50 f800e 1a02              leax  2,x                ; skip it
  51 f8010               nopg:
  52 f8010 8560              bita  #$60               ; test for moveable code segment
  53 f8012 27f4              beq   ibcl               ; yes, skip it
  54 f8014 34                pshx                     ; save pointer
  55 f8015 b764              tfr   y,d                ; start address
  56 f8017 a31e              subd  -2,x               ; minus end address
  57 f8019 ee1c              ldx   -4,x               ; destination address
  63 f801b               dbcl:
  64 f801b 180a7030          movb  1,y+,1,x+          ; copy from prom to ram
  65 f801f 04b4f9            ibne  d,dbcl             ; count up and loop
  71 f8022 30                pulx                     ; reload pointer to desc
  72 f8023 20e3              bra   ibcl               ; and loop
  73 f8025               zbss:
  74 f8025 ce1102            ldx   #__sbss            ; start of bss
  75 f8028 c7                clrb                     ; complete zero
  76 f8029 2002              bra   loop               ; start loop
  77 f802b               zbcl:
  78 f802b 6c31              std   2,x+               ; clear byte
  79 f802d               loop:
  80 f802d 8e170a            cpx   #__memory          ; end of bss
  81 f8030 25f9              blo   zbcl               ; no, continue
  86 f8032 16408c            jsr   _main              ; execute main()
  88                     
  89                     ; this is function "void _exit(void)"
  90 f8035               _exit:
  91 f8035 20fe              bra   _exit              ; stay here
  92                     ;
  93                         end
